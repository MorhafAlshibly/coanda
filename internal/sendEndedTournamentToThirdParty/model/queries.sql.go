// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package model

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const GetEndedTournamentUsers = `-- name: GetEndedTournamentUsers :many
SELECT id,
    name,
    tournament_interval,
    user_id,
    score,
    ranking,
    data,
    tournament_started_at,
    created_at,
    updated_at
FROM ranked_tournament
WHERE name = ?
    AND tournament_started_at = ?
    AND tournament_interval = ?
    AND (
        sent_to_third_party_at IS NULL
        OR sent_to_third_party_at > NOW()
    )
    AND ranking <= ?
`

type GetEndedTournamentUsersParams struct {
	Name                string                       `db:"name"`
	TournamentStartedAt time.Time                    `db:"tournament_started_at"`
	TournamentInterval  TournamentTournamentInterval `db:"tournament_interval"`
	Ranking             uint64                       `db:"ranking"`
}

type GetEndedTournamentUsersRow struct {
	ID                  uint64                       `db:"id"`
	Name                string                       `db:"name"`
	TournamentInterval  TournamentTournamentInterval `db:"tournament_interval"`
	UserID              uint64                       `db:"user_id"`
	Score               int64                        `db:"score"`
	Ranking             uint64                       `db:"ranking"`
	Data                json.RawMessage              `db:"data"`
	TournamentStartedAt time.Time                    `db:"tournament_started_at"`
	CreatedAt           time.Time                    `db:"created_at"`
	UpdatedAt           time.Time                    `db:"updated_at"`
}

func (q *Queries) GetEndedTournamentUsers(ctx context.Context, arg GetEndedTournamentUsersParams) ([]GetEndedTournamentUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, GetEndedTournamentUsers,
		arg.Name,
		arg.TournamentStartedAt,
		arg.TournamentInterval,
		arg.Ranking,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEndedTournamentUsersRow
	for rows.Next() {
		var i GetEndedTournamentUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TournamentInterval,
			&i.UserID,
			&i.Score,
			&i.Ranking,
			&i.Data,
			&i.TournamentStartedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEndedTournaments = `-- name: GetEndedTournaments :many
SELECT name,
    tournament_interval,
    tournament_started_at
FROM ranked_tournament
WHERE tournament_started_at < ?
    AND tournament_interval = ?
    AND (
        sent_to_third_party_at IS NULL
        OR sent_to_third_party_at > NOW()
    )
GROUP BY name,
    tournament_interval,
    tournament_started_at
ORDER BY name ASC,
    tournament_interval ASC,
    tournament_started_at DESC
LIMIT ? OFFSET ?
`

type GetEndedTournamentsParams struct {
	TournamentStartedAt time.Time                    `db:"tournament_started_at"`
	TournamentInterval  TournamentTournamentInterval `db:"tournament_interval"`
	Limit               int32                        `db:"limit"`
	Offset              int32                        `db:"offset"`
}

type GetEndedTournamentsRow struct {
	Name                string                       `db:"name"`
	TournamentInterval  TournamentTournamentInterval `db:"tournament_interval"`
	TournamentStartedAt time.Time                    `db:"tournament_started_at"`
}

func (q *Queries) GetEndedTournaments(ctx context.Context, arg GetEndedTournamentsParams) ([]GetEndedTournamentsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetEndedTournaments,
		arg.TournamentStartedAt,
		arg.TournamentInterval,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEndedTournamentsRow
	for rows.Next() {
		var i GetEndedTournamentsRow
		if err := rows.Scan(&i.Name, &i.TournamentInterval, &i.TournamentStartedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTournamentSentToThirdParty = `-- name: UpdateTournamentSentToThirdParty :execresult
UPDATE tournament
SET sent_to_third_party_at = NOW()
WHERE name = ?
    AND tournament_started_at = ?
    AND tournament_interval = ?
    AND (
        sent_to_third_party_at IS NULL
        OR sent_to_third_party_at > NOW()
    )
`

type UpdateTournamentSentToThirdPartyParams struct {
	Name                string                       `db:"name"`
	TournamentStartedAt time.Time                    `db:"tournament_started_at"`
	TournamentInterval  TournamentTournamentInterval `db:"tournament_interval"`
}

func (q *Queries) UpdateTournamentSentToThirdParty(ctx context.Context, arg UpdateTournamentSentToThirdPartyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, UpdateTournamentSentToThirdParty, arg.Name, arg.TournamentStartedAt, arg.TournamentInterval)
}
