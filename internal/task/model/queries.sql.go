// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package model

import (
	"context"
	"database/sql"
	"encoding/json"
)

const CompleteTask = `-- name: CompleteTask :execresult
UPDATE task
SET completed_at = CURRENT_TIMESTAMP
WHERE id = ?
    AND type = ?
    AND (
        expires_at IS NULL
        OR expires_at > NOW()
    )
    AND completed_at IS NULL
LIMIT 1
`

type CompleteTaskParams struct {
	ID   string `db:"id"`
	Type string `db:"type"`
}

func (q *Queries) CompleteTask(ctx context.Context, arg CompleteTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, CompleteTask, arg.ID, arg.Type)
}

const CreateTask = `-- name: CreateTask :execresult
INSERT INTO task (
        id,
        type,
        data,
        expires_at
    )
VALUES (?, ?, ?, ?)
`

type CreateTaskParams struct {
	ID        string          `db:"id"`
	Type      string          `db:"type"`
	Data      json.RawMessage `db:"data"`
	ExpiresAt sql.NullTime    `db:"expires_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, CreateTask,
		arg.ID,
		arg.Type,
		arg.Data,
		arg.ExpiresAt,
	)
}

const DeleteTask = `-- name: DeleteTask :execresult
DELETE FROM task
WHERE id = ?
    AND type = ?
    AND (
        expires_at IS NULL
        OR expires_at > NOW()
    )
LIMIT 1
`

type DeleteTaskParams struct {
	ID   string `db:"id"`
	Type string `db:"type"`
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, DeleteTask, arg.ID, arg.Type)
}

const GetTask = `-- name: GetTask :one
SELECT id,
    type,
    data,
    expires_at,
    completed_at,
    created_at,
    updated_at
FROM task
WHERE id = ?
    AND type = ?
    AND (
        expires_at IS NULL
        OR expires_at > NOW()
    )
LIMIT 1
`

type GetTaskParams struct {
	ID   string `db:"id"`
	Type string `db:"type"`
}

func (q *Queries) GetTask(ctx context.Context, arg GetTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, GetTask, arg.ID, arg.Type)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Data,
		&i.ExpiresAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateTask = `-- name: UpdateTask :execresult
UPDATE task
SET data = ?
WHERE id = ?
    AND type = ?
    AND (
        expires_at IS NULL
        OR expires_at > NOW()
    )
LIMIT 1
`

type UpdateTaskParams struct {
	Data json.RawMessage `db:"data"`
	ID   string          `db:"id"`
	Type string          `db:"type"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, UpdateTask, arg.Data, arg.ID, arg.Type)
}
