// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package model

import (
	"context"
	"database/sql"
)

const DeleteExpiredItems = `-- name: DeleteExpiredItems :execresult
DELETE FROM item
WHERE expires_at < NOW()
    AND expires_at IS NOT NULL
    AND id >= ?
    AND id <= ?
`

type DeleteExpiredItemsParams struct {
	MinID string `db:"min_id"`
	MaxID string `db:"max_id"`
}

func (q *Queries) DeleteExpiredItems(ctx context.Context, arg DeleteExpiredItemsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, DeleteExpiredItems, arg.MinID, arg.MaxID)
}

const GetExpiredItems = `-- name: GetExpiredItems :many
SELECT id,
    type,
    data,
    created_at,
    updated_at,
    expires_at
FROM item
WHERE expires_at < NOW()
    AND expires_at IS NOT NULL
ORDER BY id ASC
LIMIT ? OFFSET ?
`

type GetExpiredItemsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) GetExpiredItems(ctx context.Context, arg GetExpiredItemsParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, GetExpiredItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
