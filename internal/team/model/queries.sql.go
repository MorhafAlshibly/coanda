// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package model

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createTeam = `-- name: CreateTeam :execresult
INSERT INTO team (name, owner, score, data)
VALUES (?, ?, ?, ?)
`

type CreateTeamParams struct {
	Name  string
	Owner uint64
	Score int64
	Data  json.RawMessage
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTeam,
		arg.Name,
		arg.Owner,
		arg.Score,
		arg.Data,
	)
}

const createTeamMember = `-- name: CreateTeamMember :execresult
INSERT INTO team_member (team, user_id, data)
SELECT ?,
  ?,
  ?
FROM dual
WHERE (
    SELECT COUNT(*)
    FROM team_member tm
    WHERE tm.team = ?
  ) < CAST(? as unsigned)
`

type CreateTeamMemberParams struct {
	Team       string
	UserID     uint64
	Data       json.RawMessage
	MaxMembers int64
}

func (q *Queries) CreateTeamMember(ctx context.Context, arg CreateTeamMemberParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTeamMember,
		arg.Team,
		arg.UserID,
		arg.Data,
		arg.Team,
		arg.MaxMembers,
	)
}

const createTeamOwner = `-- name: CreateTeamOwner :execresult
INSERT INTO team_owner (team, user_id)
VALUES (?, ?)
`

type CreateTeamOwnerParams struct {
	Team   string
	UserID uint64
}

func (q *Queries) CreateTeamOwner(ctx context.Context, arg CreateTeamOwnerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTeamOwner, arg.Team, arg.UserID)
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM team
WHERE name = ?
  OR owner = ?
LIMIT 1
`

type DeleteTeamParams struct {
	Name  sql.NullString
	Owner sql.NullInt64
}

func (q *Queries) DeleteTeam(ctx context.Context, arg DeleteTeamParams) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, arg.Name, arg.Owner)
	return err
}

const deleteTeamByMember = `-- name: DeleteTeamByMember :exec
DELETE FROM team
WHERE name = (
    SELECT team
    FROM team_member
    WHERE user_id = ?
    LIMIT 1
  )
LIMIT 1
`

func (q *Queries) DeleteTeamByMember(ctx context.Context, userID uint64) error {
	_, err := q.db.ExecContext(ctx, deleteTeamByMember, userID)
	return err
}

const deleteTeamMember = `-- name: DeleteTeamMember :exec
DELETE FROM team_member
WHERE user_id = ?
LIMIT 1
`

func (q *Queries) DeleteTeamMember(ctx context.Context, userID uint64) error {
	_, err := q.db.ExecContext(ctx, deleteTeamMember, userID)
	return err
}

const deleteTeamMembersByMember = `-- name: DeleteTeamMembersByMember :exec
DELETE FROM team_member
WHERE team = (
    SELECT team
    FROM team_member tm
    WHERE tm.user_id = ?
    LIMIT 1
  )
`

func (q *Queries) DeleteTeamMembersByMember(ctx context.Context, userID uint64) error {
	_, err := q.db.ExecContext(ctx, deleteTeamMembersByMember, userID)
	return err
}

const deleteTeamMembersByOwner = `-- name: DeleteTeamMembersByOwner :exec
DELETE FROM team_member
WHERE team = (
    SELECT name
    FROM team
    WHERE owner = ?
    LIMIT 1
  )
`

func (q *Queries) DeleteTeamMembersByOwner(ctx context.Context, owner uint64) error {
	_, err := q.db.ExecContext(ctx, deleteTeamMembersByOwner, owner)
	return err
}

const deleteTeamMembersByTeam = `-- name: DeleteTeamMembersByTeam :exec
DELETE FROM team_member
WHERE team = ?
`

func (q *Queries) DeleteTeamMembersByTeam(ctx context.Context, team string) error {
	_, err := q.db.ExecContext(ctx, deleteTeamMembersByTeam, team)
	return err
}

const deleteTeamOwner = `-- name: DeleteTeamOwner :exec
DELETE FROM team_owner
WHERE team = ?
  OR user_id = ?
LIMIT 1
`

type DeleteTeamOwnerParams struct {
	Team   string
	UserID uint64
}

func (q *Queries) DeleteTeamOwner(ctx context.Context, arg DeleteTeamOwnerParams) error {
	_, err := q.db.ExecContext(ctx, deleteTeamOwner, arg.Team, arg.UserID)
	return err
}

const deleteTeamOwnerByMember = `-- name: DeleteTeamOwnerByMember :exec
DELETE FROM team_owner
WHERE team = (
    SELECT team
    FROM team_member tm
    WHERE tm.user_id = ?
    LIMIT 1
  )
LIMIT 1
`

func (q *Queries) DeleteTeamOwnerByMember(ctx context.Context, userID uint64) error {
	_, err := q.db.ExecContext(ctx, deleteTeamOwnerByMember, userID)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT name,
  owner,
  score,
  ranking,
  data,
  created_at,
  updated_at
FROM ranked_team
WHERE name = ?
  OR owner = ?
LIMIT 1
`

type GetTeamParams struct {
	Name  sql.NullString
	Owner sql.NullInt64
}

func (q *Queries) GetTeam(ctx context.Context, arg GetTeamParams) (RankedTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeam, arg.Name, arg.Owner)
	var i RankedTeam
	err := row.Scan(
		&i.Name,
		&i.Owner,
		&i.Score,
		&i.Ranking,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamByMember = `-- name: GetTeamByMember :one
SELECT t.name,
  t.owner,
  t.score,
  t.ranking,
  t.data,
  t.created_at,
  t.updated_at
FROM ranked_team t
  JOIN team_member tm ON t.name = tm.team
WHERE tm.user_id = ?
LIMIT 1
`

func (q *Queries) GetTeamByMember(ctx context.Context, userID uint64) (RankedTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeamByMember, userID)
	var i RankedTeam
	err := row.Scan(
		&i.Name,
		&i.Owner,
		&i.Score,
		&i.Ranking,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamMember = `-- name: GetTeamMember :one
SELECT team,
  user_id,
  data,
  joined_at,
  updated_at
FROM team_member
WHERE user_id = ?
LIMIT 1
`

func (q *Queries) GetTeamMember(ctx context.Context, userID uint64) (TeamMember, error) {
	row := q.db.QueryRowContext(ctx, getTeamMember, userID)
	var i TeamMember
	err := row.Scan(
		&i.Team,
		&i.UserID,
		&i.Data,
		&i.JoinedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT team,
  user_id,
  data,
  joined_at,
  updated_at
FROM team_member
WHERE team = ?
ORDER BY joined_at ASC
LIMIT ? OFFSET ?
`

type GetTeamMembersParams struct {
	Team   string
	Limit  int32
	Offset int32
}

func (q *Queries) GetTeamMembers(ctx context.Context, arg GetTeamMembersParams) ([]TeamMember, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembers, arg.Team, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamMember
	for rows.Next() {
		var i TeamMember
		if err := rows.Scan(
			&i.Team,
			&i.UserID,
			&i.Data,
			&i.JoinedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeams = `-- name: GetTeams :many
SELECT name,
  owner,
  score,
  ranking,
  data,
  created_at,
  updated_at
FROM ranked_team
ORDER BY score DESC
LIMIT ? OFFSET ?
`

type GetTeamsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetTeams(ctx context.Context, arg GetTeamsParams) ([]RankedTeam, error) {
	rows, err := q.db.QueryContext(ctx, getTeams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RankedTeam
	for rows.Next() {
		var i RankedTeam
		if err := rows.Scan(
			&i.Name,
			&i.Owner,
			&i.Score,
			&i.Ranking,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeamData = `-- name: UpdateTeamData :exec
UPDATE team
SET data = ?
WHERE name = ?
  or owner = ?
LIMIT 1
`

type UpdateTeamDataParams struct {
	Data  json.RawMessage
	Name  string
	Owner uint64
}

func (q *Queries) UpdateTeamData(ctx context.Context, arg UpdateTeamDataParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamData, arg.Data, arg.Name, arg.Owner)
	return err
}

const updateTeamDataByMember = `-- name: UpdateTeamDataByMember :exec
UPDATE team
SET data = ?
WHERE name = (
    SELECT team
    FROM team_member
    WHERE user_id = ?
    LIMIT 1
  )
LIMIT 1
`

type UpdateTeamDataByMemberParams struct {
	Data   json.RawMessage
	UserID uint64
}

func (q *Queries) UpdateTeamDataByMember(ctx context.Context, arg UpdateTeamDataByMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamDataByMember, arg.Data, arg.UserID)
	return err
}

const updateTeamMemberData = `-- name: UpdateTeamMemberData :exec
UPDATE team_member
SET data = ?
WHERE user_id = ?
LIMIT 1
`

type UpdateTeamMemberDataParams struct {
	Data   json.RawMessage
	UserID uint64
}

func (q *Queries) UpdateTeamMemberData(ctx context.Context, arg UpdateTeamMemberDataParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamMemberData, arg.Data, arg.UserID)
	return err
}

const updateTeamMemberDataByMember = `-- name: UpdateTeamMemberDataByMember :exec
UPDATE team_member
SET data = ?
WHERE team = (
    SELECT team
    FROM team_member tm
    WHERE tm.user_id = ?
    LIMIT 1
  )
`

type UpdateTeamMemberDataByMemberParams struct {
	Data   json.RawMessage
	UserID uint64
}

func (q *Queries) UpdateTeamMemberDataByMember(ctx context.Context, arg UpdateTeamMemberDataByMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamMemberDataByMember, arg.Data, arg.UserID)
	return err
}

const updateTeamMemberDataByOwner = `-- name: UpdateTeamMemberDataByOwner :exec
UPDATE team_member
SET data = ?
WHERE team = (
    SELECT name
    FROM team
    WHERE owner = ?
    LIMIT 1
  )
`

type UpdateTeamMemberDataByOwnerParams struct {
	Data  json.RawMessage
	Owner uint64
}

func (q *Queries) UpdateTeamMemberDataByOwner(ctx context.Context, arg UpdateTeamMemberDataByOwnerParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamMemberDataByOwner, arg.Data, arg.Owner)
	return err
}

const updateTeamMemberDataByTeam = `-- name: UpdateTeamMemberDataByTeam :exec
UPDATE team_member
SET data = ?
WHERE team = ?
`

type UpdateTeamMemberDataByTeamParams struct {
	Data json.RawMessage
	Team string
}

func (q *Queries) UpdateTeamMemberDataByTeam(ctx context.Context, arg UpdateTeamMemberDataByTeamParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamMemberDataByTeam, arg.Data, arg.Team)
	return err
}

const updateTeamScore = `-- name: UpdateTeamScore :exec
UPDATE team
SET score = score + ?
WHERE name = ?
  or owner = ?
LIMIT 1
`

type UpdateTeamScoreParams struct {
	Score int64
	Name  string
	Owner uint64
}

func (q *Queries) UpdateTeamScore(ctx context.Context, arg UpdateTeamScoreParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamScore, arg.Score, arg.Name, arg.Owner)
	return err
}

const updateTeamScoreByMember = `-- name: UpdateTeamScoreByMember :exec
UPDATE team
SET score = score + ?
WHERE name = (
    SELECT team
    FROM team_member
    WHERE user_id = ?
    LIMIT 1
  )
LIMIT 1
`

type UpdateTeamScoreByMemberParams struct {
	Score  int64
	UserID uint64
}

func (q *Queries) UpdateTeamScoreByMember(ctx context.Context, arg UpdateTeamScoreByMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamScoreByMember, arg.Score, arg.UserID)
	return err
}
