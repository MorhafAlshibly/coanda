package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/MorhafAlshibly/coanda/api"
	"github.com/MorhafAlshibly/coanda/internal/bff"
	"github.com/MorhafAlshibly/coanda/internal/bff/model"
)

// Error is the resolver for the error field.
func (r *createRecordResponseResolver) Error(ctx context.Context, obj *api.CreateRecordResponse) (model.CreateRecordError, error) {
	return model.CreateRecordError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *deleteRecordResponseResolver) Error(ctx context.Context, obj *api.DeleteRecordResponse) (model.DeleteRecordError, error) {
	return model.DeleteRecordError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *getRecordResponseResolver) Error(ctx context.Context, obj *api.GetRecordResponse) (model.GetRecordError, error) {
	return model.GetRecordError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *getRecordsResponseResolver) Error(ctx context.Context, obj *api.GetRecordsResponse) (model.GetRecordsError, error) {
	return model.GetRecordsError(obj.Error.String()), nil
}

// CreateRecord is the resolver for the CreateRecord field.
func (r *mutationResolver) CreateRecord(ctx context.Context, input *api.CreateRecordRequest) (*api.CreateRecordResponse, error) {
	return r.recordClient.CreateRecord(ctx, input)
}

// UpdateRecord is the resolver for the UpdateRecord field.
func (r *mutationResolver) UpdateRecord(ctx context.Context, input *api.UpdateRecordRequest) (*api.UpdateRecordResponse, error) {
	return r.recordClient.UpdateRecord(ctx, input)
}

// DeleteRecord is the resolver for the DeleteRecord field.
func (r *mutationResolver) DeleteRecord(ctx context.Context, input *api.RecordRequest) (*api.DeleteRecordResponse, error) {
	return r.recordClient.DeleteRecord(ctx, input)
}

// GetRecord is the resolver for the GetRecord field.
func (r *queryResolver) GetRecord(ctx context.Context, input *api.RecordRequest) (*api.GetRecordResponse, error) {
	return r.recordClient.GetRecord(ctx, input)
}

// GetRecords is the resolver for the GetRecords field.
func (r *queryResolver) GetRecords(ctx context.Context, input *api.GetRecordsRequest) (*api.GetRecordsResponse, error) {
	return r.recordClient.GetRecords(ctx, input)
}

// Error is the resolver for the error field.
func (r *updateRecordResponseResolver) Error(ctx context.Context, obj *api.UpdateRecordResponse) (model.UpdateRecordError, error) {
	return model.UpdateRecordError(obj.Error.String()), nil
}

// CreateRecordResponse returns bff.CreateRecordResponseResolver implementation.
func (r *Resolver) CreateRecordResponse() bff.CreateRecordResponseResolver {
	return &createRecordResponseResolver{r}
}

// DeleteRecordResponse returns bff.DeleteRecordResponseResolver implementation.
func (r *Resolver) DeleteRecordResponse() bff.DeleteRecordResponseResolver {
	return &deleteRecordResponseResolver{r}
}

// GetRecordResponse returns bff.GetRecordResponseResolver implementation.
func (r *Resolver) GetRecordResponse() bff.GetRecordResponseResolver {
	return &getRecordResponseResolver{r}
}

// GetRecordsResponse returns bff.GetRecordsResponseResolver implementation.
func (r *Resolver) GetRecordsResponse() bff.GetRecordsResponseResolver {
	return &getRecordsResponseResolver{r}
}

// UpdateRecordResponse returns bff.UpdateRecordResponseResolver implementation.
func (r *Resolver) UpdateRecordResponse() bff.UpdateRecordResponseResolver {
	return &updateRecordResponseResolver{r}
}

type createRecordResponseResolver struct{ *Resolver }
type deleteRecordResponseResolver struct{ *Resolver }
type getRecordResponseResolver struct{ *Resolver }
type getRecordsResponseResolver struct{ *Resolver }
type updateRecordResponseResolver struct{ *Resolver }
