package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/MorhafAlshibly/coanda/api"
	"github.com/MorhafAlshibly/coanda/internal/bff/model"
)

// CreateEvent is the resolver for the CreateEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.CreateEventRequest) (*model.CreateEventResponse, error) {
	var rounds []*api.CreateEventRound
	for _, round := range input.Rounds {
		rounds = append(rounds, &api.CreateEventRound{
			Name:    round.Name,
			Data:    round.Data,
			Scoring: round.Scoring,
			EndedAt: round.EndedAt,
		})
	}
	resp, err := r.eventClient.CreateEvent(ctx, &api.CreateEventRequest{
		Name:      input.Name,
		Data:      input.Data,
		StartedAt: input.StartedAt,
		Rounds:    rounds,
	})
	if err != nil {
		return nil, err
	}
	return &model.CreateEventResponse{
		Success: resp.Success,
		Error:   model.CreateEventError(resp.Error.String()),
		ID:      resp.Id,
	}, nil
}

// UpdateEvent is the resolver for the UpdateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, input model.UpdateEventRequest) (*model.UpdateEventResponse, error) {
	if input.Event == nil {
		input.Event = &model.EventRequest{}
	}
	resp, err := r.eventClient.UpdateEvent(ctx, &api.UpdateEventRequest{
		Event: &api.EventRequest{
			Id:   input.Event.ID,
			Name: input.Event.Name,
		},
		Data: input.Data,
	})
	if err != nil {
		return nil, err
	}
	return &model.UpdateEventResponse{
		Success: resp.Success,
		Error:   model.UpdateEventError(resp.Error.String()),
	}, nil
}

// DeleteEvent is the resolver for the DeleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, input model.EventRequest) (*model.EventResponse, error) {
	resp, err := r.eventClient.DeleteEvent(ctx, &api.EventRequest{
		Id:   input.ID,
		Name: input.Name,
	})
	if err != nil {
		return nil, err
	}
	return &model.EventResponse{
		Success: resp.Success,
		Error:   model.EventError(resp.Error.String()),
	}, nil
}

// CreateEventRound is the resolver for the CreateEventRound field.
func (r *mutationResolver) CreateEventRound(ctx context.Context, input model.CreateEventRoundRequest) (*model.CreateEventRoundResponse, error) {
	if input.Event == nil {
		input.Event = &model.EventRequest{}
	}
	if input.Round == nil {
		input.Round = &model.CreateEventRound{}
	}
	resp, err := r.eventClient.CreateEventRound(ctx, &api.CreateEventRoundRequest{
		Event: &api.EventRequest{
			Id:   input.Event.ID,
			Name: input.Event.Name,
		},
		Round: &api.CreateEventRound{
			Name:    input.Round.Name,
			Data:    input.Round.Data,
			EndedAt: input.Round.EndedAt,
			Scoring: input.Round.Scoring,
		},
	})
	if err != nil {
		return nil, err
	}
	return &model.CreateEventRoundResponse{
		Success: resp.Success,
		Error:   model.CreateEventRoundError(resp.Error.String()),
		ID:      resp.Id,
	}, nil
}

// UpdateEventRound is the resolver for the UpdateEventRound field.
func (r *mutationResolver) UpdateEventRound(ctx context.Context, input model.UpdateEventRoundRequest) (*model.UpdateEventRoundResponse, error) {
	if input.Round == nil {
		input.Round = &model.EventRoundRequest{
			Event: &model.EventRequest{},
		}
	}
	if input.Round.Event == nil {
		input.Round.Event = &model.EventRequest{}
	}
	resp, err := r.eventClient.UpdateEventRound(ctx, &api.UpdateEventRoundRequest{
		Round: &api.EventRoundRequest{
			Id: input.Round.ID,
			Event: &api.EventRequest{
				Id:   input.Round.Event.ID,
				Name: input.Round.Event.Name,
			},
			RoundName: input.Round.RoundName,
		},
		Data:    input.Data,
		Scoring: input.Scoring,
	})
	if err != nil {
		return nil, err
	}
	return &model.UpdateEventRoundResponse{
		Success: resp.Success,
		Error:   model.UpdateEventRoundError(resp.Error.String()),
	}, nil
}

// UpdateEventUser is the resolver for the UpdateEventUser field.
func (r *mutationResolver) UpdateEventUser(ctx context.Context, input model.UpdateEventUserRequest) (*model.UpdateEventUserResponse, error) {
	if input.User == nil {
		input.User = &model.EventUserRequest{
			Event: &model.EventRequest{},
		}
	}
	if input.User.Event == nil {
		input.User.Event = &model.EventRequest{}
	}
	resp, err := r.eventClient.UpdateEventUser(ctx, &api.UpdateEventUserRequest{
		User: &api.EventUserRequest{
			Id: input.User.ID,
			Event: &api.EventRequest{
				Id:   input.User.Event.ID,
				Name: input.User.Event.Name,
			},
			UserId: input.User.UserID,
		},
		Data: input.Data,
	})
	if err != nil {
		return nil, err
	}
	return &model.UpdateEventUserResponse{
		Success: resp.Success,
		Error:   model.UpdateEventUserError(resp.Error.String()),
	}, nil
}

// DeleteEventUser is the resolver for the DeleteEventUser field.
func (r *mutationResolver) DeleteEventUser(ctx context.Context, input model.EventUserRequest) (*model.EventUserResponse, error) {
	if input.Event == nil {
		input.Event = &model.EventRequest{}
	}
	resp, err := r.eventClient.DeleteEventUser(ctx, &api.EventUserRequest{
		Id: input.ID,
		Event: &api.EventRequest{
			Id:   input.Event.ID,
			Name: input.Event.Name,
		},
		UserId: input.UserID,
	})
	if err != nil {
		return nil, err
	}
	return &model.EventUserResponse{
		Success: resp.Success,
		Error:   model.EventUserError(resp.Error.String()),
	}, nil
}

// AddEventResult is the resolver for the AddEventResult field.
func (r *mutationResolver) AddEventResult(ctx context.Context, input model.AddEventResultRequest) (*model.AddEventResultResponse, error) {
	var eventRequest *api.EventRequest
	if input.Event != nil {
		eventRequest = &api.EventRequest{
			Id:   input.Event.ID,
			Name: input.Event.Name,
		}
	}
	resp, err := r.eventClient.AddEventResult(ctx, &api.AddEventResultRequest{
		Event:         eventRequest,
		UserId:        input.UserID,
		Result:        input.Result,
		UserData:      input.UserData,
		RoundUserData: input.RoundUserData,
	})
	if err != nil {
		return nil, err
	}
	return &model.AddEventResultResponse{
		Success: resp.Success,
		Error:   model.AddEventResultError(resp.Error.String()),
	}, nil
}

// RemoveEventResult is the resolver for the RemoveEventResult field.
func (r *mutationResolver) RemoveEventResult(ctx context.Context, input model.EventRoundUserRequest) (*model.RemoveEventResultResponse, error) {
	resp, err := r.eventClient.RemoveEventResult(ctx, &api.EventRoundUserRequest{
		Id: input.ID,
	})
	if err != nil {
		return nil, err
	}
	return &model.RemoveEventResultResponse{
		Success: resp.Success,
		Error:   model.RemoveEventResultError(resp.Error.String()),
	}, nil
}

// GetEvent is the resolver for the GetEvent field.
func (r *queryResolver) GetEvent(ctx context.Context, input model.GetEventRequest) (*model.GetEventResponse, error) {
	var eventRequest *api.EventRequest
	if input.Event != nil {
		eventRequest = &api.EventRequest{
			Id:   input.Event.ID,
			Name: input.Event.Name,
		}
	}
	if input.Pagination == nil {
		input.Pagination = &model.Pagination{}
	}
	resp, err := r.eventClient.GetEvent(ctx, &api.GetEventRequest{
		Event: eventRequest,
		Pagination: &api.Pagination{
			Max:  input.Pagination.Max,
			Page: input.Pagination.Page,
		},
	})
	if err != nil {
		return nil, err
	}
	var event *model.Event
	if resp.Event != nil {
		var rounds []*model.EventRound
		for _, round := range resp.Event.Rounds {
			rounds = append(rounds, &model.EventRound{
				ID:        round.Id,
				Name:      round.Name,
				Data:      round.Data,
				Scoring:   round.Scoring,
				EndedAt:   round.EndedAt,
				CreatedAt: round.CreatedAt,
				UpdatedAt: round.UpdatedAt,
			})
		}
		event = &model.Event{
			ID:               resp.Event.Id,
			Name:             resp.Event.Name,
			CurrentRoundID:   resp.Event.CurrentRoundId,
			CurrentRoundName: resp.Event.CurrentRoundName,
			Rounds:           rounds,
			Data:             resp.Event.Data,
			StartedAt:        resp.Event.StartedAt,
			CreatedAt:        resp.Event.CreatedAt,
			UpdatedAt:        resp.Event.UpdatedAt,
		}
	}
	var leaderboard []*model.EventUser
	for _, user := range resp.Leaderboard {
		leaderboard = append(leaderboard, &model.EventUser{
			ID:        user.Id,
			EventID:   user.EventId,
			UserID:    user.UserId,
			Score:     user.Score,
			Ranking:   user.Ranking,
			Data:      user.Data,
			CreatedAt: user.CreatedAt,
			UpdatedAt: user.UpdatedAt,
		})
	}
	return &model.GetEventResponse{
		Success:     resp.Success,
		Event:       event,
		Leaderboard: leaderboard,
		Error:       model.GetEventError(resp.Error.String()),
	}, nil
}

// GetEventRound is the resolver for the GetEventRound field.
func (r *queryResolver) GetEventRound(ctx context.Context, input model.GetEventRoundRequest) (*model.GetEventRoundResponse, error) {
	if input.Round == nil {
		input.Round = &model.EventRoundRequest{
			Event: &model.EventRequest{},
		}
	}
	if input.Round.Event == nil {
		input.Round.Event = &model.EventRequest{}
	}
	resp, err := r.eventClient.GetEventRound(ctx, &api.GetEventRoundRequest{
		Round: &api.EventRoundRequest{
			Id: input.Round.ID,
			Event: &api.EventRequest{
				Id:   input.Round.Event.ID,
				Name: input.Round.Event.Name,
			},
			RoundName: input.Round.RoundName,
		},
	})
	if err != nil {
		return nil, err
	}
	var round *model.EventRound
	if resp.Round != nil {
		round = &model.EventRound{
			ID:        resp.Round.Id,
			EventID:   resp.Round.EventId,
			Name:      resp.Round.Name,
			Scoring:   resp.Round.Scoring,
			Data:      resp.Round.Data,
			EndedAt:   resp.Round.EndedAt,
			CreatedAt: resp.Round.CreatedAt,
			UpdatedAt: resp.Round.UpdatedAt,
		}
	}
	return &model.GetEventRoundResponse{
		Success: resp.Success,
		Round:   round,
		Error:   model.GetEventRoundError(resp.Error.String()),
	}, nil
}

// GetEventUser is the resolver for the GetEventUser field.
func (r *queryResolver) GetEventUser(ctx context.Context, input model.GetEventUserRequest) (*model.GetEventUserResponse, error) {
	if input.User == nil {
		input.User = &model.EventUserRequest{
			Event: &model.EventRequest{},
		}
	}
	if input.User.Event == nil {
		input.User.Event = &model.EventRequest{}
	}
	resp, err := r.eventClient.GetEventUser(ctx, &api.GetEventUserRequest{
		User: &api.EventUserRequest{
			Id: input.User.ID,
			Event: &api.EventRequest{
				Id:   input.User.Event.ID,
				Name: input.User.Event.Name,
			},
			UserId: input.User.UserID,
		},
	})
	if err != nil {
		return nil, err
	}
	var user *model.EventUser
	if resp.User != nil {
		user = &model.EventUser{
			ID:        resp.User.Id,
			EventID:   resp.User.EventId,
			UserID:    resp.User.UserId,
			Score:     resp.User.Score,
			Ranking:   resp.User.Ranking,
			Data:      resp.User.Data,
			CreatedAt: resp.User.CreatedAt,
			UpdatedAt: resp.User.UpdatedAt,
		}
	}
	return &model.GetEventUserResponse{
		Success: resp.Success,
		User:    user,
		Error:   model.GetEventUserError(resp.Error.String()),
	}, nil
}
