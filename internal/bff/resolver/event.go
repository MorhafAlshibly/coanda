package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/MorhafAlshibly/coanda/api"
	"github.com/MorhafAlshibly/coanda/internal/bff"
	"github.com/MorhafAlshibly/coanda/internal/bff/model"
)

// Error is the resolver for the error field.
func (r *addEventResultResponseResolver) Error(ctx context.Context, obj *api.AddEventResultResponse) (model.AddEventResultError, error) {
	return model.AddEventResultError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *createEventResponseResolver) Error(ctx context.Context, obj *api.CreateEventResponse) (model.CreateEventError, error) {
	return model.CreateEventError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *createEventRoundResponseResolver) Error(ctx context.Context, obj *api.CreateEventRoundResponse) (model.CreateEventRoundError, error) {
	return model.CreateEventRoundError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *eventResponseResolver) Error(ctx context.Context, obj *api.EventResponse) (model.EventError, error) {
	return model.EventError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *eventUserResponseResolver) Error(ctx context.Context, obj *api.EventUserResponse) (model.EventUserError, error) {
	return model.EventUserError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *getEventResponseResolver) Error(ctx context.Context, obj *api.GetEventResponse) (model.GetEventError, error) {
	return model.GetEventError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *getEventRoundResponseResolver) Error(ctx context.Context, obj *api.GetEventRoundResponse) (model.GetEventRoundError, error) {
	return model.GetEventRoundError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *getEventUserResponseResolver) Error(ctx context.Context, obj *api.GetEventUserResponse) (model.GetEventUserError, error) {
	return model.GetEventUserError(obj.Error.String()), nil
}

// CreateEvent is the resolver for the CreateEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input *api.CreateEventRequest) (*api.CreateEventResponse, error) {
	return r.eventClient.CreateEvent(ctx, input)
}

// UpdateEvent is the resolver for the UpdateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, input *api.UpdateEventRequest) (*api.UpdateEventResponse, error) {
	return r.eventClient.UpdateEvent(ctx, input)
}

// DeleteEvent is the resolver for the DeleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, input *api.EventRequest) (*api.EventResponse, error) {
	return r.eventClient.DeleteEvent(ctx, input)
}

// CreateEventRound is the resolver for the CreateEventRound field.
func (r *mutationResolver) CreateEventRound(ctx context.Context, input *api.CreateEventRoundRequest) (*api.CreateEventRoundResponse, error) {
	return r.eventClient.CreateEventRound(ctx, input)
}

// UpdateEventRound is the resolver for the UpdateEventRound field.
func (r *mutationResolver) UpdateEventRound(ctx context.Context, input *api.UpdateEventRoundRequest) (*api.UpdateEventRoundResponse, error) {
	return r.eventClient.UpdateEventRound(ctx, input)
}

// UpdateEventUser is the resolver for the UpdateEventUser field.
func (r *mutationResolver) UpdateEventUser(ctx context.Context, input *api.UpdateEventUserRequest) (*api.UpdateEventUserResponse, error) {
	return r.eventClient.UpdateEventUser(ctx, input)
}

// DeleteEventUser is the resolver for the DeleteEventUser field.
func (r *mutationResolver) DeleteEventUser(ctx context.Context, input *api.EventUserRequest) (*api.EventUserResponse, error) {
	return r.eventClient.DeleteEventUser(ctx, input)
}

// AddEventResult is the resolver for the AddEventResult field.
func (r *mutationResolver) AddEventResult(ctx context.Context, input *api.AddEventResultRequest) (*api.AddEventResultResponse, error) {
	return r.eventClient.AddEventResult(ctx, input)
}

// RemoveEventResult is the resolver for the RemoveEventResult field.
func (r *mutationResolver) RemoveEventResult(ctx context.Context, input *api.EventRoundUserRequest) (*api.RemoveEventResultResponse, error) {
	return r.eventClient.RemoveEventResult(ctx, input)
}

// GetEvent is the resolver for the GetEvent field.
func (r *queryResolver) GetEvent(ctx context.Context, input *api.GetEventRequest) (*api.GetEventResponse, error) {
	return r.eventClient.GetEvent(ctx, input)
}

// GetEventRound is the resolver for the GetEventRound field.
func (r *queryResolver) GetEventRound(ctx context.Context, input *api.GetEventRoundRequest) (*api.GetEventRoundResponse, error) {
	return r.eventClient.GetEventRound(ctx, input)
}

// GetEventUser is the resolver for the GetEventUser field.
func (r *queryResolver) GetEventUser(ctx context.Context, input *api.GetEventUserRequest) (*api.GetEventUserResponse, error) {
	return r.eventClient.GetEventUser(ctx, input)
}

// Error is the resolver for the error field.
func (r *removeEventResultResponseResolver) Error(ctx context.Context, obj *api.RemoveEventResultResponse) (model.RemoveEventResultError, error) {
	return model.RemoveEventResultError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *updateEventResponseResolver) Error(ctx context.Context, obj *api.UpdateEventResponse) (model.UpdateEventError, error) {
	return model.UpdateEventError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *updateEventRoundResponseResolver) Error(ctx context.Context, obj *api.UpdateEventRoundResponse) (model.UpdateEventRoundError, error) {
	return model.UpdateEventRoundError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *updateEventUserResponseResolver) Error(ctx context.Context, obj *api.UpdateEventUserResponse) (model.UpdateEventUserError, error) {
	return model.UpdateEventUserError(obj.Error.String()), nil
}

// AddEventResultResponse returns bff.AddEventResultResponseResolver implementation.
func (r *Resolver) AddEventResultResponse() bff.AddEventResultResponseResolver {
	return &addEventResultResponseResolver{r}
}

// CreateEventResponse returns bff.CreateEventResponseResolver implementation.
func (r *Resolver) CreateEventResponse() bff.CreateEventResponseResolver {
	return &createEventResponseResolver{r}
}

// CreateEventRoundResponse returns bff.CreateEventRoundResponseResolver implementation.
func (r *Resolver) CreateEventRoundResponse() bff.CreateEventRoundResponseResolver {
	return &createEventRoundResponseResolver{r}
}

// EventResponse returns bff.EventResponseResolver implementation.
func (r *Resolver) EventResponse() bff.EventResponseResolver { return &eventResponseResolver{r} }

// EventUserResponse returns bff.EventUserResponseResolver implementation.
func (r *Resolver) EventUserResponse() bff.EventUserResponseResolver {
	return &eventUserResponseResolver{r}
}

// GetEventResponse returns bff.GetEventResponseResolver implementation.
func (r *Resolver) GetEventResponse() bff.GetEventResponseResolver {
	return &getEventResponseResolver{r}
}

// GetEventRoundResponse returns bff.GetEventRoundResponseResolver implementation.
func (r *Resolver) GetEventRoundResponse() bff.GetEventRoundResponseResolver {
	return &getEventRoundResponseResolver{r}
}

// GetEventUserResponse returns bff.GetEventUserResponseResolver implementation.
func (r *Resolver) GetEventUserResponse() bff.GetEventUserResponseResolver {
	return &getEventUserResponseResolver{r}
}

// RemoveEventResultResponse returns bff.RemoveEventResultResponseResolver implementation.
func (r *Resolver) RemoveEventResultResponse() bff.RemoveEventResultResponseResolver {
	return &removeEventResultResponseResolver{r}
}

// UpdateEventResponse returns bff.UpdateEventResponseResolver implementation.
func (r *Resolver) UpdateEventResponse() bff.UpdateEventResponseResolver {
	return &updateEventResponseResolver{r}
}

// UpdateEventRoundResponse returns bff.UpdateEventRoundResponseResolver implementation.
func (r *Resolver) UpdateEventRoundResponse() bff.UpdateEventRoundResponseResolver {
	return &updateEventRoundResponseResolver{r}
}

// UpdateEventUserResponse returns bff.UpdateEventUserResponseResolver implementation.
func (r *Resolver) UpdateEventUserResponse() bff.UpdateEventUserResponseResolver {
	return &updateEventUserResponseResolver{r}
}

type addEventResultResponseResolver struct{ *Resolver }
type createEventResponseResolver struct{ *Resolver }
type createEventRoundResponseResolver struct{ *Resolver }
type eventResponseResolver struct{ *Resolver }
type eventUserResponseResolver struct{ *Resolver }
type getEventResponseResolver struct{ *Resolver }
type getEventRoundResponseResolver struct{ *Resolver }
type getEventUserResponseResolver struct{ *Resolver }
type removeEventResultResponseResolver struct{ *Resolver }
type updateEventResponseResolver struct{ *Resolver }
type updateEventRoundResponseResolver struct{ *Resolver }
type updateEventUserResponseResolver struct{ *Resolver }
