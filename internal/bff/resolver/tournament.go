package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/MorhafAlshibly/coanda/api"
	"github.com/MorhafAlshibly/coanda/internal/bff"
	"github.com/MorhafAlshibly/coanda/internal/bff/model"
	"github.com/MorhafAlshibly/coanda/pkg/graphqlEnums"
)

// Error is the resolver for the error field.
func (r *createTournamentUserResponseResolver) Error(ctx context.Context, obj *api.CreateTournamentUserResponse) (model.CreateTournamentUserError, error) {
	return model.CreateTournamentUserError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *getTournamentUserResponseResolver) Error(ctx context.Context, obj *api.GetTournamentUserResponse) (model.GetTournamentUserError, error) {
	return model.GetTournamentUserError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *getTournamentUsersResponseResolver) Error(ctx context.Context, obj *api.GetTournamentUsersResponse) (model.GetTournamentUsersError, error) {
	return model.GetTournamentUsersError(obj.Error.String()), nil
}

// CreateTournamentUser is the resolver for the CreateTournamentUser field.
func (r *mutationResolver) CreateTournamentUser(ctx context.Context, input *api.CreateTournamentUserRequest) (*api.CreateTournamentUserResponse, error) {
	return r.tournamentClient.CreateTournamentUser(ctx, input)
}

// UpdateTournamentUser is the resolver for the UpdateTournamentUser field.
func (r *mutationResolver) UpdateTournamentUser(ctx context.Context, input *api.UpdateTournamentUserRequest) (*api.UpdateTournamentUserResponse, error) {
	return r.tournamentClient.UpdateTournamentUser(ctx, input)
}

// DeleteTournamentUser is the resolver for the DeleteTournamentUser field.
func (r *mutationResolver) DeleteTournamentUser(ctx context.Context, input *api.TournamentUserRequest) (*api.TournamentUserResponse, error) {
	return r.tournamentClient.DeleteTournamentUser(ctx, input)
}

// GetTournamentUser is the resolver for the GetTournamentUser field.
func (r *queryResolver) GetTournamentUser(ctx context.Context, input *api.TournamentUserRequest) (*api.GetTournamentUserResponse, error) {
	return r.tournamentClient.GetTournamentUser(ctx, input)
}

// GetTournamentUsers is the resolver for the GetTournamentUsers field.
func (r *queryResolver) GetTournamentUsers(ctx context.Context, input *api.GetTournamentUsersRequest) (*api.GetTournamentUsersResponse, error) {
	return r.tournamentClient.GetTournamentUsers(ctx, input)
}

// Interval is the resolver for the interval field.
func (r *tournamentUserResolver) Interval(ctx context.Context, obj *api.TournamentUser) (graphqlEnums.TournamentInterval, error) {
	return graphqlEnums.TournamentInterval(obj.Interval.String()), nil
}

// Error is the resolver for the error field.
func (r *tournamentUserResponseResolver) Error(ctx context.Context, obj *api.TournamentUserResponse) (model.TournamentUserError, error) {
	return model.TournamentUserError(obj.Error.String()), nil
}

// Error is the resolver for the error field.
func (r *updateTournamentUserResponseResolver) Error(ctx context.Context, obj *api.UpdateTournamentUserResponse) (model.UpdateTournamentUserError, error) {
	return model.UpdateTournamentUserError(obj.Error.String()), nil
}

// Interval is the resolver for the interval field.
func (r *createTournamentUserRequestResolver) Interval(ctx context.Context, obj *api.CreateTournamentUserRequest, data graphqlEnums.TournamentInterval) error {
	obj.Interval = api.TournamentInterval(api.TournamentInterval_value[data.String()])
	return nil
}

// Interval is the resolver for the interval field.
func (r *getTournamentUsersRequestResolver) Interval(ctx context.Context, obj *api.GetTournamentUsersRequest, data graphqlEnums.TournamentInterval) error {
	obj.Interval = api.TournamentInterval(api.TournamentInterval_value[data.String()])
	return nil
}

// Interval is the resolver for the interval field.
func (r *tournamentIntervalUserIdResolver) Interval(ctx context.Context, obj *api.TournamentIntervalUserId, data graphqlEnums.TournamentInterval) error {
	obj.Interval = api.TournamentInterval(api.TournamentInterval_value[data.String()])
	return nil
}

// CreateTournamentUserResponse returns bff.CreateTournamentUserResponseResolver implementation.
func (r *Resolver) CreateTournamentUserResponse() bff.CreateTournamentUserResponseResolver {
	return &createTournamentUserResponseResolver{r}
}

// GetTournamentUserResponse returns bff.GetTournamentUserResponseResolver implementation.
func (r *Resolver) GetTournamentUserResponse() bff.GetTournamentUserResponseResolver {
	return &getTournamentUserResponseResolver{r}
}

// GetTournamentUsersResponse returns bff.GetTournamentUsersResponseResolver implementation.
func (r *Resolver) GetTournamentUsersResponse() bff.GetTournamentUsersResponseResolver {
	return &getTournamentUsersResponseResolver{r}
}

// TournamentUser returns bff.TournamentUserResolver implementation.
func (r *Resolver) TournamentUser() bff.TournamentUserResolver { return &tournamentUserResolver{r} }

// TournamentUserResponse returns bff.TournamentUserResponseResolver implementation.
func (r *Resolver) TournamentUserResponse() bff.TournamentUserResponseResolver {
	return &tournamentUserResponseResolver{r}
}

// UpdateTournamentUserResponse returns bff.UpdateTournamentUserResponseResolver implementation.
func (r *Resolver) UpdateTournamentUserResponse() bff.UpdateTournamentUserResponseResolver {
	return &updateTournamentUserResponseResolver{r}
}

// CreateTournamentUserRequest returns bff.CreateTournamentUserRequestResolver implementation.
func (r *Resolver) CreateTournamentUserRequest() bff.CreateTournamentUserRequestResolver {
	return &createTournamentUserRequestResolver{r}
}

// GetTournamentUsersRequest returns bff.GetTournamentUsersRequestResolver implementation.
func (r *Resolver) GetTournamentUsersRequest() bff.GetTournamentUsersRequestResolver {
	return &getTournamentUsersRequestResolver{r}
}

// TournamentIntervalUserId returns bff.TournamentIntervalUserIdResolver implementation.
func (r *Resolver) TournamentIntervalUserId() bff.TournamentIntervalUserIdResolver {
	return &tournamentIntervalUserIdResolver{r}
}

type createTournamentUserResponseResolver struct{ *Resolver }
type getTournamentUserResponseResolver struct{ *Resolver }
type getTournamentUsersResponseResolver struct{ *Resolver }
type tournamentUserResolver struct{ *Resolver }
type tournamentUserResponseResolver struct{ *Resolver }
type updateTournamentUserResponseResolver struct{ *Resolver }
type createTournamentUserRequestResolver struct{ *Resolver }
type getTournamentUsersRequestResolver struct{ *Resolver }
type tournamentIntervalUserIdResolver struct{ *Resolver }
