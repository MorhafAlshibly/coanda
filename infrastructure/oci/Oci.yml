version: "3"

tasks:
   test:
      cmds:
         - oci os object put -bn "coanda-tfstate" --name "tf.tfstate" --file - <<< "" --no-overwrite
   init:
      dotenv: ["../../env/.env.oci"]
      cmds:
         - cmd: oci os bucket create --name $BUCKET_NAME --compartment-id $COMPARTMENT_ID --public-access-type NoPublicAccess
           ignore_error: true
         # Add empty state file to bucket
         - |
            oci os object put -bn $BUCKET_NAME --name $KEY --file - <<< '{"version": 3}' --no-overwrite
         # Deleting all preauths, need to remove carriage returns from the output of the jq command
         - |
            for id in $(oci os preauth-request list --bucket-name $BUCKET_NAME | jq -r '.data[].id'); do
                  id=$(echo "$id" | dos2unix)
                  oci os preauth-request delete -bn $BUCKET_NAME --par-id "$id" --force
            done
         # Creating a new preauth and exporting the full path as a variable and then using it to init terraform
         - cmd: |
              FULL_PATH=$(oci os preauth-request create --name $BUCKET_NAME --access-type ObjectReadWrite \
              --bucket-name $BUCKET_NAME --object-name $KEY --time-expires 2099-01-01T00:00:00.000Z \
              | jq -r '.data."full-path"' | dos2unix)
              terraform init --backend-config="address=$FULL_PATH"
         - terraform workspace new dev
         - terraform workspace new stage
         - terraform workspace new prod
   setup:
      dotenv: ["../../env/.env.oci"]
      cmds:
         - cmd: oci os bucket create --name $BUCKET --compartment-id $COMPARTMENT_ID --public-access-type NoPublicAccess
           ignore_error: true
         # Terraform init
         - terraform init --backend-config="bucket=$BUCKET" --backend-config="key=$KEY" --backend-config="region=$REGION" --backend-config="access_key=$ACCESS_KEY" --backend-config="secret_key=$SECRET_KEY"
         - terraform workspace new dev
         - terraform workspace new stage
         - terraform workspace new prod

   plan:
      # Need to source the env file to work with terraform
      cmds:
         - terraform workspace select {{.ENV}}
         - . ../../env/.env.{{.ENV}} && terraform plan
      requires:
         vars: [ENV]
   apply:
      cmds:
         - terraform workspace select {{.ENV}}
         - . ../../env/.env.{{.ENV}} && terraform apply -auto-approve
      requires:
         vars: [ENV]
   destroy:
      cmds:
         - terraform workspace select {{.ENV}}
         - . ../../env/.env.{{.ENV}} && terraform destroy -auto-approve
      requires:
         vars: [ENV]
