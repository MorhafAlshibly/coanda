// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: schema.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TournamentsClient is the client API for Tournaments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TournamentsClient interface {
	CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error)
	GetTournament(ctx context.Context, in *GetTournamentRequest, opts ...grpc.CallOption) (*GetTournamentResponse, error)
	UpdateTournament(ctx context.Context, in *UpdateTournamentRequest, opts ...grpc.CallOption) (*UpdateTournamentResponse, error)
}

type tournamentsClient struct {
	cc grpc.ClientConnInterface
}

func NewTournamentsClient(cc grpc.ClientConnInterface) TournamentsClient {
	return &tournamentsClient{cc}
}

func (c *tournamentsClient) CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error) {
	out := new(CreateTournamentResponse)
	err := c.cc.Invoke(ctx, "/schema.Tournaments/CreateTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentsClient) GetTournament(ctx context.Context, in *GetTournamentRequest, opts ...grpc.CallOption) (*GetTournamentResponse, error) {
	out := new(GetTournamentResponse)
	err := c.cc.Invoke(ctx, "/schema.Tournaments/GetTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentsClient) UpdateTournament(ctx context.Context, in *UpdateTournamentRequest, opts ...grpc.CallOption) (*UpdateTournamentResponse, error) {
	out := new(UpdateTournamentResponse)
	err := c.cc.Invoke(ctx, "/schema.Tournaments/UpdateTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TournamentsServer is the server API for Tournaments service.
// All implementations must embed UnimplementedTournamentsServer
// for forward compatibility
type TournamentsServer interface {
	CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error)
	GetTournament(context.Context, *GetTournamentRequest) (*GetTournamentResponse, error)
	UpdateTournament(context.Context, *UpdateTournamentRequest) (*UpdateTournamentResponse, error)
	mustEmbedUnimplementedTournamentsServer()
}

// UnimplementedTournamentsServer must be embedded to have forward compatible implementations.
type UnimplementedTournamentsServer struct {
}

func (UnimplementedTournamentsServer) CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTournament not implemented")
}
func (UnimplementedTournamentsServer) GetTournament(context.Context, *GetTournamentRequest) (*GetTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournament not implemented")
}
func (UnimplementedTournamentsServer) UpdateTournament(context.Context, *UpdateTournamentRequest) (*UpdateTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTournament not implemented")
}
func (UnimplementedTournamentsServer) mustEmbedUnimplementedTournamentsServer() {}

// UnsafeTournamentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TournamentsServer will
// result in compilation errors.
type UnsafeTournamentsServer interface {
	mustEmbedUnimplementedTournamentsServer()
}

func RegisterTournamentsServer(s grpc.ServiceRegistrar, srv TournamentsServer) {
	s.RegisterService(&Tournaments_ServiceDesc, srv)
}

func _Tournaments_CreateTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentsServer).CreateTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Tournaments/CreateTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentsServer).CreateTournament(ctx, req.(*CreateTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tournaments_GetTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentsServer).GetTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Tournaments/GetTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentsServer).GetTournament(ctx, req.(*GetTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tournaments_UpdateTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentsServer).UpdateTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Tournaments/UpdateTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentsServer).UpdateTournament(ctx, req.(*UpdateTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tournaments_ServiceDesc is the grpc.ServiceDesc for Tournaments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tournaments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schema.Tournaments",
	HandlerType: (*TournamentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTournament",
			Handler:    _Tournaments_CreateTournament_Handler,
		},
		{
			MethodName: "GetTournament",
			Handler:    _Tournaments_GetTournament_Handler,
		},
		{
			MethodName: "UpdateTournament",
			Handler:    _Tournaments_UpdateTournament_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}
