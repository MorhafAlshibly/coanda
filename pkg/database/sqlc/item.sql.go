// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: item.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createItem = `-- name: CreateItem :execresult
INSERT INTO item (
  id, data, expires_at
) VALUES (
    ?, ?, ?
)
`

type CreateItemParams struct {
	ID        string
	Data      json.RawMessage
	ExpiresAt sql.NullTime
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createItem, arg.ID, arg.Data, arg.ExpiresAt)
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM item
WHERE id = ? LIMIT 1
`

func (q *Queries) DeleteItem(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, data, created_at, expires_at FROM item
WHERE id = ? LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, id string) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Data,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getItems = `-- name: GetItems :many
SELECT id, data, created_at, expires_at FROM item
ORDER BY created_at ASC
LIMIT ?
OFFSET ?
`

type GetItemsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetItems(ctx context.Context, arg GetItemsParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Data,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE item
SET data = ?
WHERE id = ? LIMIT 1
`

type UpdateItemParams struct {
	Data json.RawMessage
	ID   string
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem, arg.Data, arg.ID)
	return err
}
