// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package record

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createRecord = `-- name: CreateRecord :execresult
INSERT INTO record (
  name, user_id, record, data
) VALUES (
  ?, ?, ?, ?
)
`

type CreateRecordParams struct {
	Name   string
	UserID uint64
	Record uint64
	Data   json.RawMessage
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRecord,
		arg.Name,
		arg.UserID,
		arg.Record,
		arg.Data,
	)
}

const deleteRecord = `-- name: DeleteRecord :exec
DELETE FROM record
WHERE name = ? AND user_id = ?
`

type DeleteRecordParams struct {
	Name   string
	UserID uint64
}

func (q *Queries) DeleteRecord(ctx context.Context, arg DeleteRecordParams) error {
	_, err := q.db.ExecContext(ctx, deleteRecord, arg.Name, arg.UserID)
	return err
}

const getRecord = `-- name: GetRecord :one
SELECT name, user_id, record, data, ranking, created_at, updated_at FROM ranked_record
WHERE name = ? AND user_id = ?
`

type GetRecordParams struct {
	Name   string
	UserID uint64
}

func (q *Queries) GetRecord(ctx context.Context, arg GetRecordParams) (RankedRecord, error) {
	row := q.db.QueryRowContext(ctx, getRecord, arg.Name, arg.UserID)
	var i RankedRecord
	err := row.Scan(
		&i.Name,
		&i.UserID,
		&i.Record,
		&i.Data,
		&i.Ranking,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRecords = `-- name: GetRecords :many
SELECT name, user_id, record, data, ranking, created_at, updated_at FROM ranked_record
WHERE name = ?
ORDER BY record ASC
LIMIT ?
OFFSET ?
`

type GetRecordsParams struct {
	Name   string
	Limit  int32
	Offset int32
}

func (q *Queries) GetRecords(ctx context.Context, arg GetRecordsParams) ([]RankedRecord, error) {
	rows, err := q.db.QueryContext(ctx, getRecords, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RankedRecord
	for rows.Next() {
		var i RankedRecord
		if err := rows.Scan(
			&i.Name,
			&i.UserID,
			&i.Record,
			&i.Data,
			&i.Ranking,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
