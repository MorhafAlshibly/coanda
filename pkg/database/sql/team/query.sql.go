// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package team

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createTeam = `-- name: CreateTeam :execresult
INSERT INTO team (
  name, owner, score, data
) VALUES (
  ?, ?, ?, ?
)
`

type CreateTeamParams struct {
	Name  string
	Owner uint64
	Score int64
	Data  json.RawMessage
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTeam,
		arg.Name,
		arg.Owner,
		arg.Score,
		arg.Data,
	)
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM team
WHERE name = ?
`

func (q *Queries) DeleteTeam(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, name)
	return err
}

const deleteTeamMember = `-- name: DeleteTeamMember :exec
DELETE FROM team_members
WHERE team_name = ? AND user_id = ?
`

type DeleteTeamMemberParams struct {
	TeamName string
	UserID   uint64
}

func (q *Queries) DeleteTeamMember(ctx context.Context, arg DeleteTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteTeamMember, arg.TeamName, arg.UserID)
	return err
}

const getTeamByMember = `-- name: GetTeamByMember :one
SELECT name, owner, member, score, data, ranking, created_at, updated_at FROM ranked_team_members
WHERE member = ?
`

func (q *Queries) GetTeamByMember(ctx context.Context, member uint64) (RankedTeamMember, error) {
	row := q.db.QueryRowContext(ctx, getTeamByMember, member)
	var i RankedTeamMember
	err := row.Scan(
		&i.Name,
		&i.Owner,
		&i.Member,
		&i.Score,
		&i.Data,
		&i.Ranking,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamByName = `-- name: GetTeamByName :one
SELECT name, owner, members, score, data, ranking, created_at, updated_at FROM ranked_team
WHERE name = ?
`

func (q *Queries) GetTeamByName(ctx context.Context, name string) (RankedTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeamByName, name)
	var i RankedTeam
	err := row.Scan(
		&i.Name,
		&i.Owner,
		&i.Members,
		&i.Score,
		&i.Data,
		&i.Ranking,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamByOwner = `-- name: GetTeamByOwner :one
SELECT name, owner, members, score, data, ranking, created_at, updated_at FROM ranked_team
WHERE owner = ?
`

func (q *Queries) GetTeamByOwner(ctx context.Context, owner uint64) (RankedTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeamByOwner, owner)
	var i RankedTeam
	err := row.Scan(
		&i.Name,
		&i.Owner,
		&i.Members,
		&i.Score,
		&i.Data,
		&i.Ranking,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeams = `-- name: GetTeams :many
SELECT name, owner, members, score, data, ranking, created_at, updated_at FROM ranked_team
ORDER BY score DESC
LIMIT ?
OFFSET ?
`

type GetTeamsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetTeams(ctx context.Context, arg GetTeamsParams) ([]RankedTeam, error) {
	rows, err := q.db.QueryContext(ctx, getTeams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RankedTeam
	for rows.Next() {
		var i RankedTeam
		if err := rows.Scan(
			&i.Name,
			&i.Owner,
			&i.Members,
			&i.Score,
			&i.Data,
			&i.Ranking,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
