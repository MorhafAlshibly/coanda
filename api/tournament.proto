syntax = "proto3";

option go_package = ".;api";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "types.proto";

package api;

service TournamentService {
    rpc CreateTournamentUser(CreateTournamentUserRequest) returns (CreateTournamentUserResponse);
    rpc GetTournamentUser(TournamentUserRequest) returns (GetTournamentUserResponse);
    rpc GetTournamentUsers(GetTournamentUsersRequest) returns (GetTournamentUsersResponse);
    rpc UpdateTournamentUser(UpdateTournamentUserRequest) returns (UpdateTournamentUserResponse);
    rpc DeleteTournamentUser(TournamentUserRequest) returns (TournamentUserResponse);
}

message CreateTournamentUserRequest {
    string tournament = 1;
    TournamentInterval interval = 2;
    uint64 userId = 3;
    optional int64 score = 4;
    google.protobuf.Struct data = 5;
}

message CreateTournamentUserResponse {
    bool success = 1;
    enum Error {
        NONE = 0;
        TOURNAMENT_NAME_TOO_SHORT = 1;
        TOURNAMENT_NAME_TOO_LONG = 2;
        USER_ID_REQUIRED = 3;
        DATA_REQUIRED = 4;
        ALREADY_EXISTS = 5;
    }
    Error error = 2;
}

message TournamentUserRequest {
    string tournament = 1;
    TournamentInterval interval = 2;
    uint64 userId = 3;
}

message GetTournamentUserResponse {
    bool success = 1;
    TournamentUser tournamentUser = 2;
    enum Error {
        NONE = 0;
        TOURNAMENT_NAME_TOO_SHORT = 1;
        TOURNAMENT_NAME_TOO_LONG = 2;
        USER_ID_REQUIRED = 3;
        NOT_FOUND = 4;
    }
    Error error = 3;
}

message TournamentUserResponse {
    bool success = 1;
    enum Error {
        NONE = 0;
        TOURNAMENT_NAME_TOO_SHORT = 1;
        TOURNAMENT_NAME_TOO_LONG = 2;
        USER_ID_REQUIRED = 3;
        NOT_FOUND = 4;
    }
    Error error = 2;
}

message GetTournamentUsersRequest {
   optional string tournament = 1;
   TournamentInterval interval = 2;
   optional uint64 userId = 3;
   optional Pagination pagination = 4;
}

message GetTournamentUsersResponse {
    bool success = 1;
    repeated TournamentUser tournamentUsers = 2;
    enum Error {
        NONE = 0;
        TOURNAMENT_NAME_TOO_SHORT = 1;
        TOURNAMENT_NAME_TOO_LONG = 2;
    }
    Error error = 3;
}

message UpdateTournamentUserRequest {
    TournamentUserRequest tournament = 1;
    optional google.protobuf.Struct data = 2;
    optional int64 score = 3;
    optional bool incrementScore = 4;
}

message UpdateTournamentUserResponse {
    bool success = 1;
    enum Error {
        NONE = 0;
        TOURNAMENT_NAME_TOO_SHORT = 1;
        TOURNAMENT_NAME_TOO_LONG = 2;
        USER_ID_REQUIRED = 3;
        NOT_FOUND = 4;
        NO_UPDATE_SPECIFIED = 5;
        INCREMENT_SCORE_NOT_SPECIFIED = 6;
    }
    Error error = 2;
}

message TournamentUser {
    string tournament = 1;
    uint64 userId = 2;
    TournamentInterval interval = 3;
    int64 score = 4;
    uint64 ranking = 5;
    google.protobuf.Struct data = 6;
    google.protobuf.Timestamp tournamentStartedAt = 7;
    google.protobuf.Timestamp createdAt = 8;
    google.protobuf.Timestamp updatedAt = 9;
}

enum TournamentInterval {
    DAILY = 0;
    WEEKLY = 1;
    MONTHLY = 2;
    UNLIMITED = 3;
}
