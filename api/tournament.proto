syntax = "proto3";

option go_package = ".;api";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

package api;

service TournamentService {
    rpc CreateTournamentUser(CreateTournamentUserRequest) returns (CreateTournamentUserResponse);
    rpc GetTournamentUser(TournamentUserRequest) returns (TournamentUserResponse);
    rpc GetTournamentUsers(GetTournamentUsersRequest) returns (GetTournamentUsersResponse);
    rpc UpdateTournamentUserScore(UpdateTournamentUserScoreRequest) returns (TournamentUserResponse);
    rpc UpdateTournamentUserData(UpdateTournamentUserDataRequest) returns (TournamentUserResponse);
    rpc DeleteTournamentUser(GetTournamentUserRequest) returns (DeleteTournamentUserResponse);
}

message CreateTournamentUserRequest {
    string tournament = 1;
    TournamentInterval interval = 2;
    uint64 userId = 3;
    int64 score = 4;
    google.protobuf.Struct data = 5;
}

message CreateTournamentUserResponse {
    bool success = 1;
    string id = 2;
    enum Error {
        NONE = 0;
        TOURNAMENT_NAME_TOO_SHORT = 1;
        TOURNAMENT_NAME_TOO_LONG = 2;
        USER_ID_REQUIRED = 3;
        ALREADY_EXISTS = 4;
    }
    Error error = 3;
}

message TournamentUserRequest {
    string tournament = 1;
    TournamentInterval interval = 2;
    uint64 userId = 3;
}

message TournamentUserResponse {
    bool success = 1;
    TournamentUser tournamentUser = 2;
    enum Error {
        NONE = 0;
        INVALID = 1;
        NOT_FOUND = 2;
        TOURNAMENT_NAME_TOO_SHORT = 3;
        TOURNAMENT_NAME_TOO_LONG = 4;
    }
    Error error = 3;
}

message GetTournamentUsersRequest {
   string tournament = 1;
   uint32 max = 2;
   uint64 page = 3;
}

message GetTournamentUsersResponse {
    bool success = 1;
    repeated TournamentUser tournamentUsers = 2;
    enum Error {
        NONE = 0;
        TOURNAMENT_NAME_TOO_SHORT = 1;
        TOURNAMENT_NAME_TOO_LONG = 2;
    }
    Error error = 3;
}

message UpdateTournamentUserScoreRequest {
    GetTournamentUserRequest pagination = 1;
    int64 scoreOffset = 2;
}

message UpdateTournamentUserDataRequest {
    GetTournamentUserRequest pagination = 1;
    map<string, string> data = 2;
}

message DeleteTournamentUserResponse {
    bool success = 1;
    enum Error {
        NONE = 0;
        INVALID = 1;
        NOT_FOUND = 2;
        TOURNAMENT_NAME_TOO_SHORT = 3;
        TOURNAMENT_NAME_TOO_LONG = 4;
    }
    Error error = 2;
}


message TournamentUser {
    string id = 1;
    string tournament = 2;
    TournamentInterval interval = 3;
    uint64 userId = 4;
    int64 score = 5;
    uint64 rank = 6;
    string tournamentStartDate = 7;
    map<string, string> data = 8;
}

enum TournamentInterval {
    DAILY = 0;
    WEEKLY = 1;
    MONTHLY = 2;
    INFINITE = 3;
}
