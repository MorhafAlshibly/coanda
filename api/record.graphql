extend type Query {
	GetRecord(input: RecordRequest!): GetRecordResponse
	GetRecords(input: GetRecordsRequest!): GetRecordsResponse
}

extend type Mutation {
	CreateRecord(input: CreateRecordRequest!): CreateRecordResponse
	UpdateRecord(input: UpdateRecordRequest!): UpdateRecordResponse
	DeleteRecord(input: RecordRequest!): DeleteRecordResponse
}

input CreateRecordRequest {
	name: String!
	userId: Uint64!
	record: Uint64!
	data: Struct!
}

type CreateRecordResponse {
	success: Boolean!
	error: CreateRecordError!
}

enum CreateRecordError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	USER_ID_REQUIRED
	RECORD_REQUIRED
	DATA_REQUIRED
	RECORD_EXISTS
}

input RecordRequest {
	name: String!
	userId: Uint64!
}

type GetRecordResponse {
	success: Boolean!
	record: Record!
	error: GetRecordError!
}

enum GetRecordError {
	NONE
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
	USER_ID_REQUIRED
}

input GetRecordsRequest {
	name: String
	max: Uint32
	pagination: Pagination
}

type GetRecordsResponse {
	success: Boolean!
	records: [Record]!
	error: GetRecordsError!
}

enum GetRecordsError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
}

input UpdateRecordRequest {
	request: RecordRequest!
	record: Uint64
	data: Struct
}

type UpdateRecordResponse {
	success: Boolean!
	error: UpdateRecordError!
}

enum UpdateRecordError {
	NONE
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
	USER_ID_REQUIRED
	NO_UPDATE_SPECIFIED
}

type DeleteRecordResponse {
	success: Boolean!
	error: DeleteRecordError!
}

enum DeleteRecordError {
	NONE
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
	USER_ID_REQUIRED
}

type Record {
	name: String!
	userId: Uint64!
	record: Uint64!
	ranking: Uint64!
	data: Struct!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}
