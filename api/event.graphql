extend type Query {
	GetEvent(input: GetEventRequest!): GetEventResponse
}

extend type Mutation {
	CreateEvent(input: CreateEventRequest!): CreateEventResponse
	AddEventResult(input: AddEventResultRequest!): AddEventResultResponse
}

input CreateEventRequest {
	name: String!
	data: Struct!
	startedAt: Timestamp!
	rounds: [CreateEventRound]!
}

input CreateEventRound {
	name: String!
	data: Struct!
	endedAt: Timestamp!
	scoring: [Uint64!]!
}

type CreateEventResponse {
	success: Boolean!
	id: Uint64!
	error: CreateEventError!
}

enum CreateEventError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	DATA_REQUIRED
	STARTED_AT_REQUIRED
	STARTED_AT_IN_THE_PAST
	ROUNDS_REQUIRED
	TOO_MANY_ROUNDS
	ROUND_NAME_TOO_SHORT
	ROUND_NAME_TOO_LONG
	ROUND_DATA_REQUIRED
	ROUND_ENDED_AT_REQUIRED
	ROUND_ENDED_AT_BEFORE_STARTED_AT
	ROUND_SCORING_REQUIRED
	ALREADY_EXISTS
	DUPLICATE_ROUND_NAME_OR_ENDED_AT
}

input EventRequest {
	id: Uint64
	name: String
}

input AddEventResultRequest {
	event: EventRequest!
	userId: Uint64!
	result: Uint64!
	userData: Struct!
	roundUserData: Struct!
}

enum AddEventResultError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	USER_ID_REQUIRED
	RESULT_REQUIRED
	USER_DATA_REQUIRED
	ROUND_USER_DATA_REQUIRED
	NOT_FOUND
	EVENT_ENDED
	ALREADY_EXISTS
}

type AddEventResultResponse {
	success: Boolean!
	error: AddEventResultError!
}

input GetEventRequest {
	event: EventRequest!
	pagination: Pagination
}

type GetEventResponse {
	success: Boolean!
	event: Event!
	leaderboard: [EventUser]!
	error: GetEventError!
}

enum GetEventError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	NOT_FOUND
}

type Event {
	id: Uint64!
	name: String!
	currentRoundId: Uint64!
	currentRoundName: String!
	data: Struct!
	rounds: [EventRound]!
	startedAt: Timestamp!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}

type EventRound {
	id: Uint64!
	eventId: Uint64!
	name: String!
	scoring: [Uint64!]!
	data: Struct!
	endedAt: Timestamp!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}

type EventUser {
	id: Uint64!
	eventId: Uint64!
	userId: Uint64!
	score: Uint64!
	ranking: Uint64!
	data: Struct!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}

type EventRoundUser {
	id: Uint64!
	eventUserId: Uint64!
	eventRoundId: Uint64!
	result: Uint64!
	data: Struct!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}
