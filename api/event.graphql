extend type Query {
	GetEvent(input: GetEventRequest!): GetEventResponse!
	GetEventRound(input: GetEventRoundRequest!): GetEventRoundResponse!
	GetEventUser(input: GetEventUserRequest!): GetEventUserResponse!
}

extend type Mutation {
	CreateEvent(input: CreateEventRequest!): CreateEventResponse!
	UpdateEvent(input: UpdateEventRequest!): UpdateEventResponse!
	DeleteEvent(input: EventRequest!): EventResponse!
	CreateEventRound(input: CreateEventRoundRequest!): CreateEventRoundResponse!
	UpdateEventRound(input: UpdateEventRoundRequest!): UpdateEventRoundResponse!
	UpdateEventUser(input: UpdateEventUserRequest!): UpdateEventUserResponse!
	DeleteEventUser(input: EventUserRequest!): EventUserResponse!
	AddEventResult(input: AddEventResultRequest!): AddEventResultResponse!
	RemoveEventResult(input: EventRoundUserRequest!): RemoveEventResultResponse!
}

input CreateEventRound {
	name: String!
	data: Struct!
	endedAt: Timestamp!
	scoring: [Uint64!]!
}

input CreateEventRequest {
	name: String!
	data: Struct!
	startedAt: Timestamp!
	rounds: [CreateEventRound]!
}

type CreateEventResponse {
	success: Boolean!
	id: Uint64
	error: CreateEventError!
}

enum CreateEventError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	DATA_REQUIRED
	STARTED_AT_REQUIRED
	STARTED_AT_IN_THE_PAST
	ROUNDS_REQUIRED
	TOO_MANY_ROUNDS
	ROUND_NAME_TOO_SHORT
	ROUND_NAME_TOO_LONG
	ROUND_DATA_REQUIRED
	ROUND_ENDED_AT_REQUIRED
	ROUND_ENDED_AT_BEFORE_STARTED_AT
	ROUND_SCORING_REQUIRED
	ALREADY_EXISTS
	DUPLICATE_ROUND_NAME_OR_ENDED_AT
}

input EventRequest {
	id: Uint64
	name: String
}

input GetEventRequest {
	event: EventRequest!
	pagination: Pagination
}

type GetEventResponse {
	success: Boolean!
	event: Event
	leaderboard: [EventUser]!
	error: GetEventError!
}

enum GetEventError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	NOT_FOUND
}

input UpdateEventRequest {
	event: EventRequest!
	data: Struct!
}

type UpdateEventResponse {
	success: Boolean!
	error: UpdateEventError!
}

enum UpdateEventError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	DATA_REQUIRED
	NOT_FOUND
}

type EventResponse {
	success: Boolean!
	error: EventError!
}

enum EventError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	NOT_FOUND
}

input CreateEventRoundRequest {
	event: EventRequest!
	round: CreateEventRound!
}

type CreateEventRoundResponse {
	success: Boolean!
	id: Uint64
	error: CreateEventRoundError!
}

enum CreateEventRoundError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	ROUND_REQUIRED
	ROUND_NAME_TOO_SHORT
	ROUND_NAME_TOO_LONG
	ROUND_DATA_REQUIRED
	ROUND_ENDED_AT_REQUIRED
	ROUND_ENDED_AT_IN_THE_PAST
	ROUND_ENDED_AT_BEFORE_EVENT_STARTED_AT
	ROUND_SCORING_REQUIRED
	NOT_FOUND
	DUPLICATE_ROUND_NAME_OR_ENDED_AT
}

input EventRoundRequest {
	id: Uint64
	event: EventRequest
	roundName: String
}

input GetEventRoundRequest {
	round: EventRoundRequest!
	pagination: Pagination
}

type GetEventRoundResponse {
	success: Boolean!
	round: EventRound
	results: [EventRoundUser]!
	error: GetEventRoundError!
}

enum GetEventRoundError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	EVENT_ROUND_OR_ID_REQUIRED
	NOT_FOUND
}

input UpdateEventRoundRequest {
	round: EventRoundRequest!
	data: Struct
	scoring: [Uint64!]
}

type UpdateEventRoundResponse {
	success: Boolean!
	error: UpdateEventRoundError!
}

enum UpdateEventRoundError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	EVENT_ROUND_OR_ID_REQUIRED
	NO_UPDATE_SPECIFIED
	NOT_FOUND
}

input EventUserRequest {
	id: Uint64
	event: EventRequest
	userId: Uint64
}

input GetEventUserRequest {
	user: EventUserRequest!
	pagination: Pagination
}

type GetEventUserResponse {
	success: Boolean!
	user: EventUser
	results: [EventRoundUser]!
	error: GetEventUserError!
}

enum GetEventUserError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	USER_ID_REQUIRED
	EVENT_USER_OR_ID_REQUIRED
	NOT_FOUND
}

input UpdateEventUserRequest {
	user: EventUserRequest!
	data: Struct!
}

type UpdateEventUserResponse {
	success: Boolean!
	error: UpdateEventUserError!
}

enum UpdateEventUserError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	USER_ID_REQUIRED
	EVENT_USER_OR_ID_REQUIRED
	DATA_REQUIRED
	NOT_FOUND
}

type EventUserResponse {
	success: Boolean!
	error: EventUserError!
}

enum EventUserError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	USER_ID_REQUIRED
	NOT_FOUND
}

input AddEventResultRequest {
	event: EventRequest!
	userId: Uint64!
	result: Uint64!
	userData: Struct!
	roundUserData: Struct!
}

type AddEventResultResponse {
	success: Boolean!
	error: AddEventResultError!
}

enum AddEventResultError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	USER_ID_REQUIRED
	RESULT_REQUIRED
	USER_DATA_REQUIRED
	ROUND_USER_DATA_REQUIRED
	NOT_FOUND
	EVENT_ENDED
}

input EventRoundUserRequest {
	id: Uint64
	user: EventUserRequest
	round: String
}

type RemoveEventResultResponse {
	success: Boolean!
	error: RemoveEventResultError!
}

enum RemoveEventResultError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	ID_OR_NAME_REQUIRED
	USER_ID_REQUIRED
	EVENT_ROUND_USER_OR_ID_REQUIRED
	NOT_FOUND
	EVENT_ENDED
}

type Event {
	id: Uint64!
	name: String!
	currentRoundId: Uint64
	currentRoundName: String
	data: Struct!
	rounds: [EventRound]!
	startedAt: Timestamp!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}

type EventRound {
	id: Uint64!
	eventId: Uint64!
	name: String!
	scoring: [Uint64!]!
	data: Struct!
	endedAt: Timestamp!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}

type EventUser {
	id: Uint64!
	eventId: Uint64!
	userId: Uint64!
	score: Uint64!
	ranking: Uint64!
	data: Struct!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}

type EventRoundUser {
	id: Uint64!
	eventUserId: Uint64!
	eventRoundId: Uint64!
	result: Uint64!
	ranking: Uint64!
	data: Struct!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}
