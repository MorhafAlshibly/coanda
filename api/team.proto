syntax = "proto3";

import "graphql/graphql.proto";

option go_package = ".;api";

package api;

service TeamService {

    option (graphql.service) = {
        host: "localhost:50051"
        insecure: false
    };

    
    rpc CreateTeam(CreateTeamRequest) returns (Team) {
        option (graphql.schema) = {
            type: MUTATION
            name: "createTeam"
        };
    }
    
    rpc GetTeam(GetTeamRequest) returns (Team) {
        option (graphql.schema) = {
            type: QUERY
            name: "getTeam"
        };
    }

    rpc GetTeams(GetTeamsRequest) returns (Teams) {
        option (graphql.schema) = {
            type: QUERY
            name: "getTeams"
        };
    }

    rpc SearchTeams(SearchTeamsRequest) returns (Teams) {
        option (graphql.schema) = {
            type: QUERY
            name: "searchTeams"
        };
    }

    rpc UpdateTeamData(UpdateTeamDataRequest) returns (Team) {
        option (graphql.schema) = {
            type: MUTATION
            name: "updateTeamData"
        };
    }

    rpc UpdateTeamScore(UpdateTeamScoreRequest) returns (Team) {
        option (graphql.schema) = {
            type: MUTATION
            name: "updateTeamScore"
        };
    }

    rpc DeleteTeam(DeleteTeamRequest) returns (Team) {
        option (graphql.schema) = {
            type: MUTATION
            name: "deleteTeam"
        };
    }
    rpc JoinTeam(JoinTeamRequest) returns (Team) {
        option (graphql.schema) = {
            type: MUTATION
            name: "joinTeam"
        };
    }
    rpc LeaveTeam(LeaveTeamRequest) returns (Team) {
        option (graphql.schema) = {
            type: MUTATION
            name: "leaveTeam"
        };
    }
}

message Team {
    string id = 1 [(graphql.field) = {required: true}];
    string name = 2 [(graphql.field) = {required: true}];
    uint64 owner = 3 [(graphql.field) = {required: true}];
    repeated uint64 membersWithoutOwner = 4 [(graphql.field) = {required: true}];
    int64 score = 5 [(graphql.field) = {required: true}];
    int64 rank = 6 [(graphql.field) = {required: true}];
    map<string, string> data = 7 [(graphql.field) = {required: true}];
}

message Teams {
    repeated Team teams = 1 [(graphql.field) = {required: true}];
}

message CreateTeamRequest {
    string name = 1 [(graphql.field) = {required: true}];
    uint64 owner = 2 [(graphql.field) = {required: true}];
    repeated uint64 membersWithoutOwner = 3 [(graphql.field) = {required: true}];
    int64 score = 4 [(graphql.field) = {required: false}];
    map<string, string> data = 5 [(graphql.field) = {required: true}];
}

message GetTeamRequest {
    string id = 1 [(graphql.field) = {required: false}];
    string name = 2 [(graphql.field) = {required: false}];
    uint64 owner = 3 [(graphql.field) = {required: false}];
}

message GetTeamsRequest {
    uint64 max = 1 [(graphql.field) = {required: true}];
    uint64 page = 2 [(graphql.field) = {required: true}];
}

message SearchTeamsRequest {
    string query = 1 [(graphql.field) = {required: true}];
    uint64 max = 2 [(graphql.field) = {required: true}];
    uint64 page = 3 [(graphql.field) = {required: true}];
}

message UpdateTeamDataRequest {
    GetTeamRequest team = 1 [(graphql.field) = {required: true}];
    map<string, string> data = 2 [(graphql.field) = {required: true}];
}

message UpdateTeamScoreRequest {
    GetTeamRequest team = 1 [(graphql.field) = {required: true}];
    int64 scoreOffset = 2 [(graphql.field) = {required: true}];
}

message DeleteTeamRequest {
    GetTeamRequest team = 1 [(graphql.field) = {required: true}];
}

message JoinTeamRequest {
    GetTeamRequest team = 1 [(graphql.field) = {required: true}];
    uint64 userId = 2 [(graphql.field) = {required: true}];
}

message LeaveTeamRequest {
    GetTeamRequest team = 1 [(graphql.field) = {required: true}];
    uint64 userId = 2 [(graphql.field) = {required: true}];
}