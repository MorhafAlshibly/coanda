// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.3
// source: matchmaking.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateArenaResponse_Error int32

const (
	CreateArenaResponse_NONE                                         CreateArenaResponse_Error = 0
	CreateArenaResponse_NAME_TOO_SHORT                               CreateArenaResponse_Error = 1
	CreateArenaResponse_NAME_TOO_LONG                                CreateArenaResponse_Error = 2
	CreateArenaResponse_MIN_PLAYERS_REQUIRED                         CreateArenaResponse_Error = 3
	CreateArenaResponse_MAX_PLAYERS_REQUIRED                         CreateArenaResponse_Error = 4
	CreateArenaResponse_MAX_PLAYERS_MUST_BE_GREATER_THAN_MIN_PLAYERS CreateArenaResponse_Error = 5
	CreateArenaResponse_DATA_REQUIRED                                CreateArenaResponse_Error = 6
	CreateArenaResponse_ALREADY_EXISTS                               CreateArenaResponse_Error = 7
)

// Enum value maps for CreateArenaResponse_Error.
var (
	CreateArenaResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "MIN_PLAYERS_REQUIRED",
		4: "MAX_PLAYERS_REQUIRED",
		5: "MAX_PLAYERS_MUST_BE_GREATER_THAN_MIN_PLAYERS",
		6: "DATA_REQUIRED",
		7: "ALREADY_EXISTS",
	}
	CreateArenaResponse_Error_value = map[string]int32{
		"NONE":                 0,
		"NAME_TOO_SHORT":       1,
		"NAME_TOO_LONG":        2,
		"MIN_PLAYERS_REQUIRED": 3,
		"MAX_PLAYERS_REQUIRED": 4,
		"MAX_PLAYERS_MUST_BE_GREATER_THAN_MIN_PLAYERS": 5,
		"DATA_REQUIRED":  6,
		"ALREADY_EXISTS": 7,
	}
)

func (x CreateArenaResponse_Error) Enum() *CreateArenaResponse_Error {
	p := new(CreateArenaResponse_Error)
	*p = x
	return p
}

func (x CreateArenaResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateArenaResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[0].Descriptor()
}

func (CreateArenaResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[0]
}

func (x CreateArenaResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateArenaResponse_Error.Descriptor instead.
func (CreateArenaResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{1, 0}
}

type GetArenaResponse_Error int32

const (
	GetArenaResponse_NONE                GetArenaResponse_Error = 0
	GetArenaResponse_ID_OR_NAME_REQUIRED GetArenaResponse_Error = 1
	GetArenaResponse_NOT_FOUND           GetArenaResponse_Error = 2
)

// Enum value maps for GetArenaResponse_Error.
var (
	GetArenaResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_NAME_REQUIRED",
		2: "NOT_FOUND",
	}
	GetArenaResponse_Error_value = map[string]int32{
		"NONE":                0,
		"ID_OR_NAME_REQUIRED": 1,
		"NOT_FOUND":           2,
	}
)

func (x GetArenaResponse_Error) Enum() *GetArenaResponse_Error {
	p := new(GetArenaResponse_Error)
	*p = x
	return p
}

func (x GetArenaResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetArenaResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[1].Descriptor()
}

func (GetArenaResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[1]
}

func (x GetArenaResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetArenaResponse_Error.Descriptor instead.
func (GetArenaResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{3, 0}
}

type ArenaResponse_Error int32

const (
	ArenaResponse_NONE                ArenaResponse_Error = 0
	ArenaResponse_ID_OR_NAME_REQUIRED ArenaResponse_Error = 1
	ArenaResponse_NOT_FOUND           ArenaResponse_Error = 2
)

// Enum value maps for ArenaResponse_Error.
var (
	ArenaResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_NAME_REQUIRED",
		2: "NOT_FOUND",
	}
	ArenaResponse_Error_value = map[string]int32{
		"NONE":                0,
		"ID_OR_NAME_REQUIRED": 1,
		"NOT_FOUND":           2,
	}
)

func (x ArenaResponse_Error) Enum() *ArenaResponse_Error {
	p := new(ArenaResponse_Error)
	*p = x
	return p
}

func (x ArenaResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArenaResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[2].Descriptor()
}

func (ArenaResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[2]
}

func (x ArenaResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArenaResponse_Error.Descriptor instead.
func (ArenaResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{6, 0}
}

type UpdateArenaResponse_Error int32

const (
	UpdateArenaResponse_NONE                UpdateArenaResponse_Error = 0
	UpdateArenaResponse_ID_OR_NAME_REQUIRED UpdateArenaResponse_Error = 1
	UpdateArenaResponse_NO_UPDATE_SPECIFIED UpdateArenaResponse_Error = 2
	UpdateArenaResponse_NOT_FOUND           UpdateArenaResponse_Error = 3
)

// Enum value maps for UpdateArenaResponse_Error.
var (
	UpdateArenaResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_NAME_REQUIRED",
		2: "NO_UPDATE_SPECIFIED",
		3: "NOT_FOUND",
	}
	UpdateArenaResponse_Error_value = map[string]int32{
		"NONE":                0,
		"ID_OR_NAME_REQUIRED": 1,
		"NO_UPDATE_SPECIFIED": 2,
		"NOT_FOUND":           3,
	}
)

func (x UpdateArenaResponse_Error) Enum() *UpdateArenaResponse_Error {
	p := new(UpdateArenaResponse_Error)
	*p = x
	return p
}

func (x UpdateArenaResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateArenaResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[3].Descriptor()
}

func (UpdateArenaResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[3]
}

func (x UpdateArenaResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateArenaResponse_Error.Descriptor instead.
func (UpdateArenaResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{8, 0}
}

type CreateMatchmakingUserResponse_Error int32

const (
	CreateMatchmakingUserResponse_NONE             CreateMatchmakingUserResponse_Error = 0
	CreateMatchmakingUserResponse_USER_ID_REQUIRED CreateMatchmakingUserResponse_Error = 1
	CreateMatchmakingUserResponse_DATA_REQUIRED    CreateMatchmakingUserResponse_Error = 2
	CreateMatchmakingUserResponse_ALREADY_EXISTS   CreateMatchmakingUserResponse_Error = 3
)

// Enum value maps for CreateMatchmakingUserResponse_Error.
var (
	CreateMatchmakingUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "USER_ID_REQUIRED",
		2: "DATA_REQUIRED",
		3: "ALREADY_EXISTS",
	}
	CreateMatchmakingUserResponse_Error_value = map[string]int32{
		"NONE":             0,
		"USER_ID_REQUIRED": 1,
		"DATA_REQUIRED":    2,
		"ALREADY_EXISTS":   3,
	}
)

func (x CreateMatchmakingUserResponse_Error) Enum() *CreateMatchmakingUserResponse_Error {
	p := new(CreateMatchmakingUserResponse_Error)
	*p = x
	return p
}

func (x CreateMatchmakingUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateMatchmakingUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[4].Descriptor()
}

func (CreateMatchmakingUserResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[4]
}

func (x CreateMatchmakingUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateMatchmakingUserResponse_Error.Descriptor instead.
func (CreateMatchmakingUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{10, 0}
}

type GetMatchmakingUserResponse_Error int32

const (
	GetMatchmakingUserResponse_NONE                   GetMatchmakingUserResponse_Error = 0
	GetMatchmakingUserResponse_ID_OR_USER_ID_REQUIRED GetMatchmakingUserResponse_Error = 1
	GetMatchmakingUserResponse_NOT_FOUND              GetMatchmakingUserResponse_Error = 2
)

// Enum value maps for GetMatchmakingUserResponse_Error.
var (
	GetMatchmakingUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_USER_ID_REQUIRED",
		2: "NOT_FOUND",
	}
	GetMatchmakingUserResponse_Error_value = map[string]int32{
		"NONE":                   0,
		"ID_OR_USER_ID_REQUIRED": 1,
		"NOT_FOUND":              2,
	}
)

func (x GetMatchmakingUserResponse_Error) Enum() *GetMatchmakingUserResponse_Error {
	p := new(GetMatchmakingUserResponse_Error)
	*p = x
	return p
}

func (x GetMatchmakingUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchmakingUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[5].Descriptor()
}

func (GetMatchmakingUserResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[5]
}

func (x GetMatchmakingUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchmakingUserResponse_Error.Descriptor instead.
func (GetMatchmakingUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{12, 0}
}

type MatchmakingUserResponse_Error int32

const (
	MatchmakingUserResponse_NONE                   MatchmakingUserResponse_Error = 0
	MatchmakingUserResponse_ID_OR_USER_ID_REQUIRED MatchmakingUserResponse_Error = 1
	MatchmakingUserResponse_NOT_FOUND              MatchmakingUserResponse_Error = 2
)

// Enum value maps for MatchmakingUserResponse_Error.
var (
	MatchmakingUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_USER_ID_REQUIRED",
		2: "NOT_FOUND",
	}
	MatchmakingUserResponse_Error_value = map[string]int32{
		"NONE":                   0,
		"ID_OR_USER_ID_REQUIRED": 1,
		"NOT_FOUND":              2,
	}
)

func (x MatchmakingUserResponse_Error) Enum() *MatchmakingUserResponse_Error {
	p := new(MatchmakingUserResponse_Error)
	*p = x
	return p
}

func (x MatchmakingUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchmakingUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[6].Descriptor()
}

func (MatchmakingUserResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[6]
}

func (x MatchmakingUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchmakingUserResponse_Error.Descriptor instead.
func (MatchmakingUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{15, 0}
}

type UpdateMatchmakingUserResponse_Error int32

const (
	UpdateMatchmakingUserResponse_NONE                   UpdateMatchmakingUserResponse_Error = 0
	UpdateMatchmakingUserResponse_ID_OR_USER_ID_REQUIRED UpdateMatchmakingUserResponse_Error = 1
	UpdateMatchmakingUserResponse_DATA_REQUIRED          UpdateMatchmakingUserResponse_Error = 2
	UpdateMatchmakingUserResponse_NOT_FOUND              UpdateMatchmakingUserResponse_Error = 3
)

// Enum value maps for UpdateMatchmakingUserResponse_Error.
var (
	UpdateMatchmakingUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_USER_ID_REQUIRED",
		2: "DATA_REQUIRED",
		3: "NOT_FOUND",
	}
	UpdateMatchmakingUserResponse_Error_value = map[string]int32{
		"NONE":                   0,
		"ID_OR_USER_ID_REQUIRED": 1,
		"DATA_REQUIRED":          2,
		"NOT_FOUND":              3,
	}
)

func (x UpdateMatchmakingUserResponse_Error) Enum() *UpdateMatchmakingUserResponse_Error {
	p := new(UpdateMatchmakingUserResponse_Error)
	*p = x
	return p
}

func (x UpdateMatchmakingUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMatchmakingUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[7].Descriptor()
}

func (UpdateMatchmakingUserResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[7]
}

func (x UpdateMatchmakingUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMatchmakingUserResponse_Error.Descriptor instead.
func (UpdateMatchmakingUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{17, 0}
}

type SetMatchmakingUserEloResponse_Error int32

const (
	SetMatchmakingUserEloResponse_NONE                   SetMatchmakingUserEloResponse_Error = 0
	SetMatchmakingUserEloResponse_ID_OR_USER_ID_REQUIRED SetMatchmakingUserEloResponse_Error = 1
	SetMatchmakingUserEloResponse_ELO_REQUIRED           SetMatchmakingUserEloResponse_Error = 2
	SetMatchmakingUserEloResponse_NOT_FOUND              SetMatchmakingUserEloResponse_Error = 3
)

// Enum value maps for SetMatchmakingUserEloResponse_Error.
var (
	SetMatchmakingUserEloResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_USER_ID_REQUIRED",
		2: "ELO_REQUIRED",
		3: "NOT_FOUND",
	}
	SetMatchmakingUserEloResponse_Error_value = map[string]int32{
		"NONE":                   0,
		"ID_OR_USER_ID_REQUIRED": 1,
		"ELO_REQUIRED":           2,
		"NOT_FOUND":              3,
	}
)

func (x SetMatchmakingUserEloResponse_Error) Enum() *SetMatchmakingUserEloResponse_Error {
	p := new(SetMatchmakingUserEloResponse_Error)
	*p = x
	return p
}

func (x SetMatchmakingUserEloResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetMatchmakingUserEloResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[8].Descriptor()
}

func (SetMatchmakingUserEloResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[8]
}

func (x SetMatchmakingUserEloResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetMatchmakingUserEloResponse_Error.Descriptor instead.
func (SetMatchmakingUserEloResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{19, 0}
}

type CreateMatchmakingTicketResponse_Error int32

const (
	CreateMatchmakingTicketResponse_NONE                           CreateMatchmakingTicketResponse_Error = 0
	CreateMatchmakingTicketResponse_MATCHMAKING_USERS_REQUIRED     CreateMatchmakingTicketResponse_Error = 1
	CreateMatchmakingTicketResponse_ARENAS_REQUIRED                CreateMatchmakingTicketResponse_Error = 2
	CreateMatchmakingTicketResponse_DATA_REQUIRED                  CreateMatchmakingTicketResponse_Error = 3
	CreateMatchmakingTicketResponse_TOO_MANY_PLAYERS               CreateMatchmakingTicketResponse_Error = 4
	CreateMatchmakingTicketResponse_USER_NOT_FOUND                 CreateMatchmakingTicketResponse_Error = 5
	CreateMatchmakingTicketResponse_ARENA_NOT_FOUND                CreateMatchmakingTicketResponse_Error = 6
	CreateMatchmakingTicketResponse_USER_ALREADY_IN_ANOTHER_TICKET CreateMatchmakingTicketResponse_Error = 7
	CreateMatchmakingTicketResponse_USER_ALREADY_IN_MATCH          CreateMatchmakingTicketResponse_Error = 8
)

// Enum value maps for CreateMatchmakingTicketResponse_Error.
var (
	CreateMatchmakingTicketResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCHMAKING_USERS_REQUIRED",
		2: "ARENAS_REQUIRED",
		3: "DATA_REQUIRED",
		4: "TOO_MANY_PLAYERS",
		5: "USER_NOT_FOUND",
		6: "ARENA_NOT_FOUND",
		7: "USER_ALREADY_IN_ANOTHER_TICKET",
		8: "USER_ALREADY_IN_MATCH",
	}
	CreateMatchmakingTicketResponse_Error_value = map[string]int32{
		"NONE":                           0,
		"MATCHMAKING_USERS_REQUIRED":     1,
		"ARENAS_REQUIRED":                2,
		"DATA_REQUIRED":                  3,
		"TOO_MANY_PLAYERS":               4,
		"USER_NOT_FOUND":                 5,
		"ARENA_NOT_FOUND":                6,
		"USER_ALREADY_IN_ANOTHER_TICKET": 7,
		"USER_ALREADY_IN_MATCH":          8,
	}
)

func (x CreateMatchmakingTicketResponse_Error) Enum() *CreateMatchmakingTicketResponse_Error {
	p := new(CreateMatchmakingTicketResponse_Error)
	*p = x
	return p
}

func (x CreateMatchmakingTicketResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateMatchmakingTicketResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[9].Descriptor()
}

func (CreateMatchmakingTicketResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[9]
}

func (x CreateMatchmakingTicketResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateMatchmakingTicketResponse_Error.Descriptor instead.
func (CreateMatchmakingTicketResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{21, 0}
}

type MatchmakingTicketResponse_Error int32

const (
	MatchmakingTicketResponse_NONE                                    MatchmakingTicketResponse_Error = 0
	MatchmakingTicketResponse_ID_OR_MATCHMAKING_USER_REQUIRED         MatchmakingTicketResponse_Error = 1
	MatchmakingTicketResponse_MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED MatchmakingTicketResponse_Error = 2
	MatchmakingTicketResponse_NOT_FOUND                               MatchmakingTicketResponse_Error = 3
)

// Enum value maps for MatchmakingTicketResponse_Error.
var (
	MatchmakingTicketResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_MATCHMAKING_USER_REQUIRED",
		2: "MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED",
		3: "NOT_FOUND",
	}
	MatchmakingTicketResponse_Error_value = map[string]int32{
		"NONE":                            0,
		"ID_OR_MATCHMAKING_USER_REQUIRED": 1,
		"MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED": 2,
		"NOT_FOUND": 3,
	}
)

func (x MatchmakingTicketResponse_Error) Enum() *MatchmakingTicketResponse_Error {
	p := new(MatchmakingTicketResponse_Error)
	*p = x
	return p
}

func (x MatchmakingTicketResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchmakingTicketResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[10].Descriptor()
}

func (MatchmakingTicketResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[10]
}

func (x MatchmakingTicketResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchmakingTicketResponse_Error.Descriptor instead.
func (MatchmakingTicketResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{23, 0}
}

type GetMatchmakingTicketResponse_Error int32

const (
	GetMatchmakingTicketResponse_NONE                                    GetMatchmakingTicketResponse_Error = 0
	GetMatchmakingTicketResponse_ID_OR_MATCHMAKING_USER_REQUIRED         GetMatchmakingTicketResponse_Error = 1
	GetMatchmakingTicketResponse_MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED GetMatchmakingTicketResponse_Error = 2
	GetMatchmakingTicketResponse_NOT_FOUND                               GetMatchmakingTicketResponse_Error = 3
)

// Enum value maps for GetMatchmakingTicketResponse_Error.
var (
	GetMatchmakingTicketResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_MATCHMAKING_USER_REQUIRED",
		2: "MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED",
		3: "NOT_FOUND",
	}
	GetMatchmakingTicketResponse_Error_value = map[string]int32{
		"NONE":                            0,
		"ID_OR_MATCHMAKING_USER_REQUIRED": 1,
		"MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED": 2,
		"NOT_FOUND": 3,
	}
)

func (x GetMatchmakingTicketResponse_Error) Enum() *GetMatchmakingTicketResponse_Error {
	p := new(GetMatchmakingTicketResponse_Error)
	*p = x
	return p
}

func (x GetMatchmakingTicketResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchmakingTicketResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[11].Descriptor()
}

func (GetMatchmakingTicketResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[11]
}

func (x GetMatchmakingTicketResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchmakingTicketResponse_Error.Descriptor instead.
func (GetMatchmakingTicketResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{24, 0}
}

type GetMatchmakingTicketsRequest_Status int32

const (
	GetMatchmakingTicketsRequest_PENDING GetMatchmakingTicketsRequest_Status = 0
	GetMatchmakingTicketsRequest_MATCHED GetMatchmakingTicketsRequest_Status = 1
	GetMatchmakingTicketsRequest_EXPIRED GetMatchmakingTicketsRequest_Status = 2
)

// Enum value maps for GetMatchmakingTicketsRequest_Status.
var (
	GetMatchmakingTicketsRequest_Status_name = map[int32]string{
		0: "PENDING",
		1: "MATCHED",
		2: "EXPIRED",
	}
	GetMatchmakingTicketsRequest_Status_value = map[string]int32{
		"PENDING": 0,
		"MATCHED": 1,
		"EXPIRED": 2,
	}
)

func (x GetMatchmakingTicketsRequest_Status) Enum() *GetMatchmakingTicketsRequest_Status {
	p := new(GetMatchmakingTicketsRequest_Status)
	*p = x
	return p
}

func (x GetMatchmakingTicketsRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchmakingTicketsRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[12].Descriptor()
}

func (GetMatchmakingTicketsRequest_Status) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[12]
}

func (x GetMatchmakingTicketsRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchmakingTicketsRequest_Status.Descriptor instead.
func (GetMatchmakingTicketsRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{25, 0}
}

type GetMatchmakingTicketsResponse_Error int32

const (
	GetMatchmakingTicketsResponse_NONE            GetMatchmakingTicketsResponse_Error = 0
	GetMatchmakingTicketsResponse_MATCH_NOT_FOUND GetMatchmakingTicketsResponse_Error = 1
	GetMatchmakingTicketsResponse_USER_NOT_FOUND  GetMatchmakingTicketsResponse_Error = 2
)

// Enum value maps for GetMatchmakingTicketsResponse_Error.
var (
	GetMatchmakingTicketsResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCH_NOT_FOUND",
		2: "USER_NOT_FOUND",
	}
	GetMatchmakingTicketsResponse_Error_value = map[string]int32{
		"NONE":            0,
		"MATCH_NOT_FOUND": 1,
		"USER_NOT_FOUND":  2,
	}
)

func (x GetMatchmakingTicketsResponse_Error) Enum() *GetMatchmakingTicketsResponse_Error {
	p := new(GetMatchmakingTicketsResponse_Error)
	*p = x
	return p
}

func (x GetMatchmakingTicketsResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchmakingTicketsResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[13].Descriptor()
}

func (GetMatchmakingTicketsResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[13]
}

func (x GetMatchmakingTicketsResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchmakingTicketsResponse_Error.Descriptor instead.
func (GetMatchmakingTicketsResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{26, 0}
}

type UpdateMatchmakingTicketResponse_Error int32

const (
	UpdateMatchmakingTicketResponse_NONE                                    UpdateMatchmakingTicketResponse_Error = 0
	UpdateMatchmakingTicketResponse_ID_OR_MATCHMAKING_USER_REQUIRED         UpdateMatchmakingTicketResponse_Error = 1
	UpdateMatchmakingTicketResponse_MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED UpdateMatchmakingTicketResponse_Error = 2
	UpdateMatchmakingTicketResponse_DATA_REQUIRED                           UpdateMatchmakingTicketResponse_Error = 3
	UpdateMatchmakingTicketResponse_NOT_FOUND                               UpdateMatchmakingTicketResponse_Error = 4
)

// Enum value maps for UpdateMatchmakingTicketResponse_Error.
var (
	UpdateMatchmakingTicketResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_MATCHMAKING_USER_REQUIRED",
		2: "MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED",
		3: "DATA_REQUIRED",
		4: "NOT_FOUND",
	}
	UpdateMatchmakingTicketResponse_Error_value = map[string]int32{
		"NONE":                            0,
		"ID_OR_MATCHMAKING_USER_REQUIRED": 1,
		"MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED": 2,
		"DATA_REQUIRED": 3,
		"NOT_FOUND":     4,
	}
)

func (x UpdateMatchmakingTicketResponse_Error) Enum() *UpdateMatchmakingTicketResponse_Error {
	p := new(UpdateMatchmakingTicketResponse_Error)
	*p = x
	return p
}

func (x UpdateMatchmakingTicketResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMatchmakingTicketResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[14].Descriptor()
}

func (UpdateMatchmakingTicketResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[14]
}

func (x UpdateMatchmakingTicketResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMatchmakingTicketResponse_Error.Descriptor instead.
func (UpdateMatchmakingTicketResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{28, 0}
}

type ExpireMatchmakingTicketResponse_Error int32

const (
	ExpireMatchmakingTicketResponse_NONE                                    ExpireMatchmakingTicketResponse_Error = 0
	ExpireMatchmakingTicketResponse_ID_OR_MATCHMAKING_USER_REQUIRED         ExpireMatchmakingTicketResponse_Error = 1
	ExpireMatchmakingTicketResponse_MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED ExpireMatchmakingTicketResponse_Error = 2
	ExpireMatchmakingTicketResponse_NOT_FOUND                               ExpireMatchmakingTicketResponse_Error = 3
	ExpireMatchmakingTicketResponse_ALREADY_EXPIRED                         ExpireMatchmakingTicketResponse_Error = 4
	ExpireMatchmakingTicketResponse_ALREADY_MATCHED                         ExpireMatchmakingTicketResponse_Error = 5
)

// Enum value maps for ExpireMatchmakingTicketResponse_Error.
var (
	ExpireMatchmakingTicketResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_MATCHMAKING_USER_REQUIRED",
		2: "MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED",
		3: "NOT_FOUND",
		4: "ALREADY_EXPIRED",
		5: "ALREADY_MATCHED",
	}
	ExpireMatchmakingTicketResponse_Error_value = map[string]int32{
		"NONE":                            0,
		"ID_OR_MATCHMAKING_USER_REQUIRED": 1,
		"MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED": 2,
		"NOT_FOUND":       3,
		"ALREADY_EXPIRED": 4,
		"ALREADY_MATCHED": 5,
	}
)

func (x ExpireMatchmakingTicketResponse_Error) Enum() *ExpireMatchmakingTicketResponse_Error {
	p := new(ExpireMatchmakingTicketResponse_Error)
	*p = x
	return p
}

func (x ExpireMatchmakingTicketResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpireMatchmakingTicketResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[15].Descriptor()
}

func (ExpireMatchmakingTicketResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[15]
}

func (x ExpireMatchmakingTicketResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpireMatchmakingTicketResponse_Error.Descriptor instead.
func (ExpireMatchmakingTicketResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{29, 0}
}

type StartMatchResponse_Error int32

const (
	StartMatchResponse_NONE                                    StartMatchResponse_Error = 0
	StartMatchResponse_ID_OR_MATCHMAKING_TICKET_REQUIRED       StartMatchResponse_Error = 1
	StartMatchResponse_MATCHMAKING_TICKET_ID_OR_USER_REQUIRED  StartMatchResponse_Error = 2
	StartMatchResponse_MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED StartMatchResponse_Error = 3
	StartMatchResponse_START_TIME_REQUIRED                     StartMatchResponse_Error = 4
	StartMatchResponse_NOT_FOUND                               StartMatchResponse_Error = 5
	StartMatchResponse_ALREADY_STARTED                         StartMatchResponse_Error = 6
	StartMatchResponse_START_TIME_TOO_SOON                     StartMatchResponse_Error = 7
)

// Enum value maps for StartMatchResponse_Error.
var (
	StartMatchResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2: "MATCHMAKING_TICKET_ID_OR_USER_REQUIRED",
		3: "MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED",
		4: "START_TIME_REQUIRED",
		5: "NOT_FOUND",
		6: "ALREADY_STARTED",
		7: "START_TIME_TOO_SOON",
	}
	StartMatchResponse_Error_value = map[string]int32{
		"NONE":                                    0,
		"ID_OR_MATCHMAKING_TICKET_REQUIRED":       1,
		"MATCHMAKING_TICKET_ID_OR_USER_REQUIRED":  2,
		"MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED": 3,
		"START_TIME_REQUIRED":                     4,
		"NOT_FOUND":                               5,
		"ALREADY_STARTED":                         6,
		"START_TIME_TOO_SOON":                     7,
	}
)

func (x StartMatchResponse_Error) Enum() *StartMatchResponse_Error {
	p := new(StartMatchResponse_Error)
	*p = x
	return p
}

func (x StartMatchResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartMatchResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[16].Descriptor()
}

func (StartMatchResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[16]
}

func (x StartMatchResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartMatchResponse_Error.Descriptor instead.
func (StartMatchResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{32, 0}
}

type EndMatchResponse_Error int32

const (
	EndMatchResponse_NONE                                    EndMatchResponse_Error = 0
	EndMatchResponse_ID_OR_MATCHMAKING_TICKET_REQUIRED       EndMatchResponse_Error = 1
	EndMatchResponse_MATCHMAKING_TICKET_ID_OR_USER_REQUIRED  EndMatchResponse_Error = 2
	EndMatchResponse_MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED EndMatchResponse_Error = 3
	EndMatchResponse_END_TIME_REQUIRED                       EndMatchResponse_Error = 4
	EndMatchResponse_NOT_FOUND                               EndMatchResponse_Error = 5
	EndMatchResponse_ALREADY_ENDED                           EndMatchResponse_Error = 6
	EndMatchResponse_END_TIME_BEFORE_START_TIME              EndMatchResponse_Error = 7
)

// Enum value maps for EndMatchResponse_Error.
var (
	EndMatchResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2: "MATCHMAKING_TICKET_ID_OR_USER_REQUIRED",
		3: "MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED",
		4: "END_TIME_REQUIRED",
		5: "NOT_FOUND",
		6: "ALREADY_ENDED",
		7: "END_TIME_BEFORE_START_TIME",
	}
	EndMatchResponse_Error_value = map[string]int32{
		"NONE":                                    0,
		"ID_OR_MATCHMAKING_TICKET_REQUIRED":       1,
		"MATCHMAKING_TICKET_ID_OR_USER_REQUIRED":  2,
		"MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED": 3,
		"END_TIME_REQUIRED":                       4,
		"NOT_FOUND":                               5,
		"ALREADY_ENDED":                           6,
		"END_TIME_BEFORE_START_TIME":              7,
	}
)

func (x EndMatchResponse_Error) Enum() *EndMatchResponse_Error {
	p := new(EndMatchResponse_Error)
	*p = x
	return p
}

func (x EndMatchResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndMatchResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[17].Descriptor()
}

func (EndMatchResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[17]
}

func (x EndMatchResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndMatchResponse_Error.Descriptor instead.
func (EndMatchResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{34, 0}
}

type GetMatchResponse_Error int32

const (
	GetMatchResponse_NONE                                    GetMatchResponse_Error = 0
	GetMatchResponse_ID_OR_MATCHMAKING_TICKET_REQUIRED       GetMatchResponse_Error = 1
	GetMatchResponse_MATCHMAKING_TICKET_ID_OR_USER_REQUIRED  GetMatchResponse_Error = 2
	GetMatchResponse_MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED GetMatchResponse_Error = 3
	GetMatchResponse_NOT_FOUND                               GetMatchResponse_Error = 4
)

// Enum value maps for GetMatchResponse_Error.
var (
	GetMatchResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2: "MATCHMAKING_TICKET_ID_OR_USER_REQUIRED",
		3: "MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED",
		4: "NOT_FOUND",
	}
	GetMatchResponse_Error_value = map[string]int32{
		"NONE":                                    0,
		"ID_OR_MATCHMAKING_TICKET_REQUIRED":       1,
		"MATCHMAKING_TICKET_ID_OR_USER_REQUIRED":  2,
		"MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED": 3,
		"NOT_FOUND":                               4,
	}
)

func (x GetMatchResponse_Error) Enum() *GetMatchResponse_Error {
	p := new(GetMatchResponse_Error)
	*p = x
	return p
}

func (x GetMatchResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[18].Descriptor()
}

func (GetMatchResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[18]
}

func (x GetMatchResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchResponse_Error.Descriptor instead.
func (GetMatchResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{35, 0}
}

type GetMatchesRequest_Status int32

const (
	GetMatchesRequest_PENDING GetMatchesRequest_Status = 0
	GetMatchesRequest_STARTED GetMatchesRequest_Status = 1
	GetMatchesRequest_ENDED   GetMatchesRequest_Status = 2
)

// Enum value maps for GetMatchesRequest_Status.
var (
	GetMatchesRequest_Status_name = map[int32]string{
		0: "PENDING",
		1: "STARTED",
		2: "ENDED",
	}
	GetMatchesRequest_Status_value = map[string]int32{
		"PENDING": 0,
		"STARTED": 1,
		"ENDED":   2,
	}
)

func (x GetMatchesRequest_Status) Enum() *GetMatchesRequest_Status {
	p := new(GetMatchesRequest_Status)
	*p = x
	return p
}

func (x GetMatchesRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchesRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[19].Descriptor()
}

func (GetMatchesRequest_Status) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[19]
}

func (x GetMatchesRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchesRequest_Status.Descriptor instead.
func (GetMatchesRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{36, 0}
}

type GetMatchesResponse_Error int32

const (
	GetMatchesResponse_NONE            GetMatchesResponse_Error = 0
	GetMatchesResponse_ARENA_NOT_FOUND GetMatchesResponse_Error = 1
	GetMatchesResponse_USER_NOT_FOUND  GetMatchesResponse_Error = 2
)

// Enum value maps for GetMatchesResponse_Error.
var (
	GetMatchesResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ARENA_NOT_FOUND",
		2: "USER_NOT_FOUND",
	}
	GetMatchesResponse_Error_value = map[string]int32{
		"NONE":            0,
		"ARENA_NOT_FOUND": 1,
		"USER_NOT_FOUND":  2,
	}
)

func (x GetMatchesResponse_Error) Enum() *GetMatchesResponse_Error {
	p := new(GetMatchesResponse_Error)
	*p = x
	return p
}

func (x GetMatchesResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchesResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[20].Descriptor()
}

func (GetMatchesResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[20]
}

func (x GetMatchesResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchesResponse_Error.Descriptor instead.
func (GetMatchesResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{37, 0}
}

type UpdateMatchResponse_Error int32

const (
	UpdateMatchResponse_NONE                                    UpdateMatchResponse_Error = 0
	UpdateMatchResponse_ID_OR_MATCHMAKING_TICKET_REQUIRED       UpdateMatchResponse_Error = 1
	UpdateMatchResponse_MATCHMAKING_TICKET_ID_OR_USER_REQUIRED  UpdateMatchResponse_Error = 2
	UpdateMatchResponse_MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED UpdateMatchResponse_Error = 3
	UpdateMatchResponse_DATA_REQUIRED                           UpdateMatchResponse_Error = 4
	UpdateMatchResponse_NOT_FOUND                               UpdateMatchResponse_Error = 5
)

// Enum value maps for UpdateMatchResponse_Error.
var (
	UpdateMatchResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2: "MATCHMAKING_TICKET_ID_OR_USER_REQUIRED",
		3: "MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED",
		4: "DATA_REQUIRED",
		5: "NOT_FOUND",
	}
	UpdateMatchResponse_Error_value = map[string]int32{
		"NONE":                                    0,
		"ID_OR_MATCHMAKING_TICKET_REQUIRED":       1,
		"MATCHMAKING_TICKET_ID_OR_USER_REQUIRED":  2,
		"MATCHMAKING_USER_ID_OR_USER_ID_REQUIRED": 3,
		"DATA_REQUIRED":                           4,
		"NOT_FOUND":                               5,
	}
)

func (x UpdateMatchResponse_Error) Enum() *UpdateMatchResponse_Error {
	p := new(UpdateMatchResponse_Error)
	*p = x
	return p
}

func (x UpdateMatchResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMatchResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[21].Descriptor()
}

func (UpdateMatchResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[21]
}

func (x UpdateMatchResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMatchResponse_Error.Descriptor instead.
func (UpdateMatchResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{39, 0}
}

type MatchmakingTicket_Status int32

const (
	MatchmakingTicket_PENDING MatchmakingTicket_Status = 0
	MatchmakingTicket_MATCHED MatchmakingTicket_Status = 1
	MatchmakingTicket_EXPIRED MatchmakingTicket_Status = 2
)

// Enum value maps for MatchmakingTicket_Status.
var (
	MatchmakingTicket_Status_name = map[int32]string{
		0: "PENDING",
		1: "MATCHED",
		2: "EXPIRED",
	}
	MatchmakingTicket_Status_value = map[string]int32{
		"PENDING": 0,
		"MATCHED": 1,
		"EXPIRED": 2,
	}
)

func (x MatchmakingTicket_Status) Enum() *MatchmakingTicket_Status {
	p := new(MatchmakingTicket_Status)
	*p = x
	return p
}

func (x MatchmakingTicket_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchmakingTicket_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[22].Descriptor()
}

func (MatchmakingTicket_Status) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[22]
}

func (x MatchmakingTicket_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchmakingTicket_Status.Descriptor instead.
func (MatchmakingTicket_Status) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{43, 0}
}

type Match_Status int32

const (
	Match_PENDING Match_Status = 0
	Match_STARTED Match_Status = 1
	Match_ENDED   Match_Status = 2
)

// Enum value maps for Match_Status.
var (
	Match_Status_name = map[int32]string{
		0: "PENDING",
		1: "STARTED",
		2: "ENDED",
	}
	Match_Status_value = map[string]int32{
		"PENDING": 0,
		"STARTED": 1,
		"ENDED":   2,
	}
)

func (x Match_Status) Enum() *Match_Status {
	p := new(Match_Status)
	*p = x
	return p
}

func (x Match_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Match_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[23].Descriptor()
}

func (Match_Status) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[23]
}

func (x Match_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Match_Status.Descriptor instead.
func (Match_Status) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{44, 0}
}

type CreateArenaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MinPlayers uint32           `protobuf:"varint,2,opt,name=minPlayers,proto3" json:"minPlayers,omitempty"`
	MaxPlayers uint32           `protobuf:"varint,3,opt,name=maxPlayers,proto3" json:"maxPlayers,omitempty"`
	Data       *structpb.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateArenaRequest) Reset() {
	*x = CreateArenaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArenaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArenaRequest) ProtoMessage() {}

func (x *CreateArenaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArenaRequest.ProtoReflect.Descriptor instead.
func (*CreateArenaRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{0}
}

func (x *CreateArenaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateArenaRequest) GetMinPlayers() uint32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *CreateArenaRequest) GetMaxPlayers() uint32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *CreateArenaRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateArenaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      *uint64                   `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Error   CreateArenaResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=CreateArenaResponse_Error" json:"error,omitempty"`
}

func (x *CreateArenaResponse) Reset() {
	*x = CreateArenaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArenaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArenaResponse) ProtoMessage() {}

func (x *CreateArenaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArenaResponse.ProtoReflect.Descriptor instead.
func (*CreateArenaResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{1}
}

func (x *CreateArenaResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateArenaResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateArenaResponse) GetError() CreateArenaResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateArenaResponse_NONE
}

type ArenaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *ArenaRequest) Reset() {
	*x = ArenaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaRequest) ProtoMessage() {}

func (x *ArenaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaRequest.ProtoReflect.Descriptor instead.
func (*ArenaRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{2}
}

func (x *ArenaRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ArenaRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetArenaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Arena   *Arena                 `protobuf:"bytes,2,opt,name=arena,proto3,oneof" json:"arena,omitempty"`
	Error   GetArenaResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=GetArenaResponse_Error" json:"error,omitempty"`
}

func (x *GetArenaResponse) Reset() {
	*x = GetArenaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArenaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArenaResponse) ProtoMessage() {}

func (x *GetArenaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArenaResponse.ProtoReflect.Descriptor instead.
func (*GetArenaResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{3}
}

func (x *GetArenaResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetArenaResponse) GetArena() *Arena {
	if x != nil {
		return x.Arena
	}
	return nil
}

func (x *GetArenaResponse) GetError() GetArenaResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetArenaResponse_NONE
}

type GetArenasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *GetArenasRequest) Reset() {
	*x = GetArenasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArenasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArenasRequest) ProtoMessage() {}

func (x *GetArenasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArenasRequest.ProtoReflect.Descriptor instead.
func (*GetArenasRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{4}
}

func (x *GetArenasRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetArenasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Arenas  []*Arena `protobuf:"bytes,2,rep,name=arenas,proto3" json:"arenas,omitempty"`
}

func (x *GetArenasResponse) Reset() {
	*x = GetArenasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArenasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArenasResponse) ProtoMessage() {}

func (x *GetArenasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArenasResponse.ProtoReflect.Descriptor instead.
func (*GetArenasResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{5}
}

func (x *GetArenasResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetArenasResponse) GetArenas() []*Arena {
	if x != nil {
		return x.Arenas
	}
	return nil
}

type ArenaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   ArenaResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=ArenaResponse_Error" json:"error,omitempty"`
}

func (x *ArenaResponse) Reset() {
	*x = ArenaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArenaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaResponse) ProtoMessage() {}

func (x *ArenaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaResponse.ProtoReflect.Descriptor instead.
func (*ArenaResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{6}
}

func (x *ArenaResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ArenaResponse) GetError() ArenaResponse_Error {
	if x != nil {
		return x.Error
	}
	return ArenaResponse_NONE
}

type UpdateArenaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arena      *ArenaRequest    `protobuf:"bytes,1,opt,name=arena,proto3" json:"arena,omitempty"`
	MinPlayers *uint32          `protobuf:"varint,2,opt,name=minPlayers,proto3,oneof" json:"minPlayers,omitempty"`
	MaxPlayers *uint32          `protobuf:"varint,3,opt,name=maxPlayers,proto3,oneof" json:"maxPlayers,omitempty"`
	Data       *structpb.Struct `protobuf:"bytes,4,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UpdateArenaRequest) Reset() {
	*x = UpdateArenaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateArenaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArenaRequest) ProtoMessage() {}

func (x *UpdateArenaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArenaRequest.ProtoReflect.Descriptor instead.
func (*UpdateArenaRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateArenaRequest) GetArena() *ArenaRequest {
	if x != nil {
		return x.Arena
	}
	return nil
}

func (x *UpdateArenaRequest) GetMinPlayers() uint32 {
	if x != nil && x.MinPlayers != nil {
		return *x.MinPlayers
	}
	return 0
}

func (x *UpdateArenaRequest) GetMaxPlayers() uint32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *UpdateArenaRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateArenaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   UpdateArenaResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=UpdateArenaResponse_Error" json:"error,omitempty"`
}

func (x *UpdateArenaResponse) Reset() {
	*x = UpdateArenaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateArenaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArenaResponse) ProtoMessage() {}

func (x *UpdateArenaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArenaResponse.ProtoReflect.Descriptor instead.
func (*UpdateArenaResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateArenaResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateArenaResponse) GetError() UpdateArenaResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateArenaResponse_NONE
}

type CreateMatchmakingUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64           `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Data   *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateMatchmakingUserRequest) Reset() {
	*x = CreateMatchmakingUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMatchmakingUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchmakingUserRequest) ProtoMessage() {}

func (x *CreateMatchmakingUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchmakingUserRequest.ProtoReflect.Descriptor instead.
func (*CreateMatchmakingUserRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{9}
}

func (x *CreateMatchmakingUserRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateMatchmakingUserRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateMatchmakingUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      *uint64                             `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Error   CreateMatchmakingUserResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=CreateMatchmakingUserResponse_Error" json:"error,omitempty"`
}

func (x *CreateMatchmakingUserResponse) Reset() {
	*x = CreateMatchmakingUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMatchmakingUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchmakingUserResponse) ProtoMessage() {}

func (x *CreateMatchmakingUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchmakingUserResponse.ProtoReflect.Descriptor instead.
func (*CreateMatchmakingUserResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{10}
}

func (x *CreateMatchmakingUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateMatchmakingUserResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateMatchmakingUserResponse) GetError() CreateMatchmakingUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateMatchmakingUserResponse_NONE
}

type MatchmakingUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserId *uint64 `protobuf:"varint,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
}

func (x *MatchmakingUserRequest) Reset() {
	*x = MatchmakingUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingUserRequest) ProtoMessage() {}

func (x *MatchmakingUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingUserRequest.ProtoReflect.Descriptor instead.
func (*MatchmakingUserRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{11}
}

func (x *MatchmakingUserRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MatchmakingUserRequest) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type GetMatchmakingUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool                             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MatchmakingUser *MatchmakingUser                 `protobuf:"bytes,2,opt,name=matchmakingUser,proto3,oneof" json:"matchmakingUser,omitempty"`
	Error           GetMatchmakingUserResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=GetMatchmakingUserResponse_Error" json:"error,omitempty"`
}

func (x *GetMatchmakingUserResponse) Reset() {
	*x = GetMatchmakingUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchmakingUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingUserResponse) ProtoMessage() {}

func (x *GetMatchmakingUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingUserResponse.ProtoReflect.Descriptor instead.
func (*GetMatchmakingUserResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{12}
}

func (x *GetMatchmakingUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchmakingUserResponse) GetMatchmakingUser() *MatchmakingUser {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

func (x *GetMatchmakingUserResponse) GetError() GetMatchmakingUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetMatchmakingUserResponse_NONE
}

type GetMatchmakingUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *GetMatchmakingUsersRequest) Reset() {
	*x = GetMatchmakingUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchmakingUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingUsersRequest) ProtoMessage() {}

func (x *GetMatchmakingUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingUsersRequest.ProtoReflect.Descriptor instead.
func (*GetMatchmakingUsersRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{13}
}

func (x *GetMatchmakingUsersRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetMatchmakingUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success          bool               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MatchmakingUsers []*MatchmakingUser `protobuf:"bytes,2,rep,name=matchmakingUsers,proto3" json:"matchmakingUsers,omitempty"`
}

func (x *GetMatchmakingUsersResponse) Reset() {
	*x = GetMatchmakingUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchmakingUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingUsersResponse) ProtoMessage() {}

func (x *GetMatchmakingUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingUsersResponse.ProtoReflect.Descriptor instead.
func (*GetMatchmakingUsersResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{14}
}

func (x *GetMatchmakingUsersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchmakingUsersResponse) GetMatchmakingUsers() []*MatchmakingUser {
	if x != nil {
		return x.MatchmakingUsers
	}
	return nil
}

type MatchmakingUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   MatchmakingUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=MatchmakingUserResponse_Error" json:"error,omitempty"`
}

func (x *MatchmakingUserResponse) Reset() {
	*x = MatchmakingUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingUserResponse) ProtoMessage() {}

func (x *MatchmakingUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingUserResponse.ProtoReflect.Descriptor instead.
func (*MatchmakingUserResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{15}
}

func (x *MatchmakingUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchmakingUserResponse) GetError() MatchmakingUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return MatchmakingUserResponse_NONE
}

type UpdateMatchmakingUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchmakingUser *MatchmakingUserRequest `protobuf:"bytes,1,opt,name=matchmakingUser,proto3" json:"matchmakingUser,omitempty"`
	Data            *structpb.Struct        `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UpdateMatchmakingUserRequest) Reset() {
	*x = UpdateMatchmakingUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchmakingUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchmakingUserRequest) ProtoMessage() {}

func (x *UpdateMatchmakingUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchmakingUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateMatchmakingUserRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateMatchmakingUserRequest) GetMatchmakingUser() *MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

func (x *UpdateMatchmakingUserRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateMatchmakingUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   UpdateMatchmakingUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=UpdateMatchmakingUserResponse_Error" json:"error,omitempty"`
}

func (x *UpdateMatchmakingUserResponse) Reset() {
	*x = UpdateMatchmakingUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchmakingUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchmakingUserResponse) ProtoMessage() {}

func (x *UpdateMatchmakingUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchmakingUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateMatchmakingUserResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateMatchmakingUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateMatchmakingUserResponse) GetError() UpdateMatchmakingUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateMatchmakingUserResponse_NONE
}

type SetMatchmakingUserEloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchmakingUser *MatchmakingUserRequest `protobuf:"bytes,1,opt,name=matchmakingUser,proto3" json:"matchmakingUser,omitempty"`
	Elo             uint32                  `protobuf:"varint,2,opt,name=elo,proto3" json:"elo,omitempty"`
	IncrementElo    bool                    `protobuf:"varint,3,opt,name=incrementElo,proto3" json:"incrementElo,omitempty"`
}

func (x *SetMatchmakingUserEloRequest) Reset() {
	*x = SetMatchmakingUserEloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMatchmakingUserEloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMatchmakingUserEloRequest) ProtoMessage() {}

func (x *SetMatchmakingUserEloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMatchmakingUserEloRequest.ProtoReflect.Descriptor instead.
func (*SetMatchmakingUserEloRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{18}
}

func (x *SetMatchmakingUserEloRequest) GetMatchmakingUser() *MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

func (x *SetMatchmakingUserEloRequest) GetElo() uint32 {
	if x != nil {
		return x.Elo
	}
	return 0
}

func (x *SetMatchmakingUserEloRequest) GetIncrementElo() bool {
	if x != nil {
		return x.IncrementElo
	}
	return false
}

type SetMatchmakingUserEloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   SetMatchmakingUserEloResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=SetMatchmakingUserEloResponse_Error" json:"error,omitempty"`
}

func (x *SetMatchmakingUserEloResponse) Reset() {
	*x = SetMatchmakingUserEloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMatchmakingUserEloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMatchmakingUserEloResponse) ProtoMessage() {}

func (x *SetMatchmakingUserEloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMatchmakingUserEloResponse.ProtoReflect.Descriptor instead.
func (*SetMatchmakingUserEloResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{19}
}

func (x *SetMatchmakingUserEloResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetMatchmakingUserEloResponse) GetError() SetMatchmakingUserEloResponse_Error {
	if x != nil {
		return x.Error
	}
	return SetMatchmakingUserEloResponse_NONE
}

type CreateMatchmakingTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchmakingUsers []*MatchmakingUserRequest `protobuf:"bytes,1,rep,name=matchmakingUsers,proto3" json:"matchmakingUsers,omitempty"`
	Arenas           []*ArenaRequest           `protobuf:"bytes,2,rep,name=arenas,proto3" json:"arenas,omitempty"`
	Data             *structpb.Struct          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateMatchmakingTicketRequest) Reset() {
	*x = CreateMatchmakingTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMatchmakingTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchmakingTicketRequest) ProtoMessage() {}

func (x *CreateMatchmakingTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchmakingTicketRequest.ProtoReflect.Descriptor instead.
func (*CreateMatchmakingTicketRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{20}
}

func (x *CreateMatchmakingTicketRequest) GetMatchmakingUsers() []*MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUsers
	}
	return nil
}

func (x *CreateMatchmakingTicketRequest) GetArenas() []*ArenaRequest {
	if x != nil {
		return x.Arenas
	}
	return nil
}

func (x *CreateMatchmakingTicketRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateMatchmakingTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      *uint64                               `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Error   CreateMatchmakingTicketResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=CreateMatchmakingTicketResponse_Error" json:"error,omitempty"`
}

func (x *CreateMatchmakingTicketResponse) Reset() {
	*x = CreateMatchmakingTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMatchmakingTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchmakingTicketResponse) ProtoMessage() {}

func (x *CreateMatchmakingTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchmakingTicketResponse.ProtoReflect.Descriptor instead.
func (*CreateMatchmakingTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{21}
}

func (x *CreateMatchmakingTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateMatchmakingTicketResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateMatchmakingTicketResponse) GetError() CreateMatchmakingTicketResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateMatchmakingTicketResponse_NONE
}

type MatchmakingTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *uint64                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	MatchmakingUser *MatchmakingUserRequest `protobuf:"bytes,2,opt,name=matchmakingUser,proto3,oneof" json:"matchmakingUser,omitempty"`
}

func (x *MatchmakingTicketRequest) Reset() {
	*x = MatchmakingTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingTicketRequest) ProtoMessage() {}

func (x *MatchmakingTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingTicketRequest.ProtoReflect.Descriptor instead.
func (*MatchmakingTicketRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{22}
}

func (x *MatchmakingTicketRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MatchmakingTicketRequest) GetMatchmakingUser() *MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

type MatchmakingTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   MatchmakingTicketResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=MatchmakingTicketResponse_Error" json:"error,omitempty"`
}

func (x *MatchmakingTicketResponse) Reset() {
	*x = MatchmakingTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingTicketResponse) ProtoMessage() {}

func (x *MatchmakingTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingTicketResponse.ProtoReflect.Descriptor instead.
func (*MatchmakingTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{23}
}

func (x *MatchmakingTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchmakingTicketResponse) GetError() MatchmakingTicketResponse_Error {
	if x != nil {
		return x.Error
	}
	return MatchmakingTicketResponse_NONE
}

type GetMatchmakingTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success           bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MatchmakingTicket *MatchmakingTicket                 `protobuf:"bytes,2,opt,name=matchmakingTicket,proto3,oneof" json:"matchmakingTicket,omitempty"`
	Error             GetMatchmakingTicketResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=GetMatchmakingTicketResponse_Error" json:"error,omitempty"`
}

func (x *GetMatchmakingTicketResponse) Reset() {
	*x = GetMatchmakingTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchmakingTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingTicketResponse) ProtoMessage() {}

func (x *GetMatchmakingTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingTicketResponse.ProtoReflect.Descriptor instead.
func (*GetMatchmakingTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{24}
}

func (x *GetMatchmakingTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchmakingTicketResponse) GetMatchmakingTicket() *MatchmakingTicket {
	if x != nil {
		return x.MatchmakingTicket
	}
	return nil
}

func (x *GetMatchmakingTicketResponse) GetError() GetMatchmakingTicketResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetMatchmakingTicketResponse_NONE
}

type GetMatchmakingTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId         *uint64                              `protobuf:"varint,1,opt,name=matchId,proto3,oneof" json:"matchId,omitempty"`
	MatchmakingUser *MatchmakingUserRequest              `protobuf:"bytes,2,opt,name=matchmakingUser,proto3,oneof" json:"matchmakingUser,omitempty"`
	Status          *GetMatchmakingTicketsRequest_Status `protobuf:"varint,3,opt,name=status,proto3,enum=GetMatchmakingTicketsRequest_Status,oneof" json:"status,omitempty"`
	Pagination      *Pagination                          `protobuf:"bytes,4,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *GetMatchmakingTicketsRequest) Reset() {
	*x = GetMatchmakingTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchmakingTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingTicketsRequest) ProtoMessage() {}

func (x *GetMatchmakingTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingTicketsRequest.ProtoReflect.Descriptor instead.
func (*GetMatchmakingTicketsRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{25}
}

func (x *GetMatchmakingTicketsRequest) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *GetMatchmakingTicketsRequest) GetMatchmakingUser() *MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

func (x *GetMatchmakingTicketsRequest) GetStatus() GetMatchmakingTicketsRequest_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetMatchmakingTicketsRequest_PENDING
}

func (x *GetMatchmakingTicketsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetMatchmakingTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success            bool                                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MatchmakingTickets []*MatchmakingTicket                `protobuf:"bytes,2,rep,name=matchmakingTickets,proto3" json:"matchmakingTickets,omitempty"`
	Error              GetMatchmakingTicketsResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=GetMatchmakingTicketsResponse_Error" json:"error,omitempty"`
}

func (x *GetMatchmakingTicketsResponse) Reset() {
	*x = GetMatchmakingTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchmakingTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingTicketsResponse) ProtoMessage() {}

func (x *GetMatchmakingTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingTicketsResponse.ProtoReflect.Descriptor instead.
func (*GetMatchmakingTicketsResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{26}
}

func (x *GetMatchmakingTicketsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchmakingTicketsResponse) GetMatchmakingTickets() []*MatchmakingTicket {
	if x != nil {
		return x.MatchmakingTickets
	}
	return nil
}

func (x *GetMatchmakingTicketsResponse) GetError() GetMatchmakingTicketsResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetMatchmakingTicketsResponse_NONE
}

type UpdateMatchmakingTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchmakingTicket *MatchmakingTicketRequest `protobuf:"bytes,1,opt,name=matchmakingTicket,proto3" json:"matchmakingTicket,omitempty"`
	Data              *structpb.Struct          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateMatchmakingTicketRequest) Reset() {
	*x = UpdateMatchmakingTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchmakingTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchmakingTicketRequest) ProtoMessage() {}

func (x *UpdateMatchmakingTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchmakingTicketRequest.ProtoReflect.Descriptor instead.
func (*UpdateMatchmakingTicketRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateMatchmakingTicketRequest) GetMatchmakingTicket() *MatchmakingTicketRequest {
	if x != nil {
		return x.MatchmakingTicket
	}
	return nil
}

func (x *UpdateMatchmakingTicketRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateMatchmakingTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   UpdateMatchmakingTicketResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=UpdateMatchmakingTicketResponse_Error" json:"error,omitempty"`
}

func (x *UpdateMatchmakingTicketResponse) Reset() {
	*x = UpdateMatchmakingTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchmakingTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchmakingTicketResponse) ProtoMessage() {}

func (x *UpdateMatchmakingTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchmakingTicketResponse.ProtoReflect.Descriptor instead.
func (*UpdateMatchmakingTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateMatchmakingTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateMatchmakingTicketResponse) GetError() UpdateMatchmakingTicketResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateMatchmakingTicketResponse_NONE
}

type ExpireMatchmakingTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   ExpireMatchmakingTicketResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=ExpireMatchmakingTicketResponse_Error" json:"error,omitempty"`
}

func (x *ExpireMatchmakingTicketResponse) Reset() {
	*x = ExpireMatchmakingTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpireMatchmakingTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireMatchmakingTicketResponse) ProtoMessage() {}

func (x *ExpireMatchmakingTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireMatchmakingTicketResponse.ProtoReflect.Descriptor instead.
func (*ExpireMatchmakingTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{29}
}

func (x *ExpireMatchmakingTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExpireMatchmakingTicketResponse) GetError() ExpireMatchmakingTicketResponse_Error {
	if x != nil {
		return x.Error
	}
	return ExpireMatchmakingTicketResponse_NONE
}

type MatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *uint64                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	MatchmakingTicket *MatchmakingTicketRequest `protobuf:"bytes,2,opt,name=matchmakingTicket,proto3,oneof" json:"matchmakingTicket,omitempty"`
}

func (x *MatchRequest) Reset() {
	*x = MatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRequest) ProtoMessage() {}

func (x *MatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRequest.ProtoReflect.Descriptor instead.
func (*MatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{30}
}

func (x *MatchRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MatchRequest) GetMatchmakingTicket() *MatchmakingTicketRequest {
	if x != nil {
		return x.MatchmakingTicket
	}
	return nil
}

type StartMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match     *MatchRequest          `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *StartMatchRequest) Reset() {
	*x = StartMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMatchRequest) ProtoMessage() {}

func (x *StartMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMatchRequest.ProtoReflect.Descriptor instead.
func (*StartMatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{31}
}

func (x *StartMatchRequest) GetMatch() *MatchRequest {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *StartMatchRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type StartMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   StartMatchResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=StartMatchResponse_Error" json:"error,omitempty"`
}

func (x *StartMatchResponse) Reset() {
	*x = StartMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMatchResponse) ProtoMessage() {}

func (x *StartMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMatchResponse.ProtoReflect.Descriptor instead.
func (*StartMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{32}
}

func (x *StartMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartMatchResponse) GetError() StartMatchResponse_Error {
	if x != nil {
		return x.Error
	}
	return StartMatchResponse_NONE
}

type EndMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match   *MatchRequest          `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *EndMatchRequest) Reset() {
	*x = EndMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMatchRequest) ProtoMessage() {}

func (x *EndMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMatchRequest.ProtoReflect.Descriptor instead.
func (*EndMatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{33}
}

func (x *EndMatchRequest) GetMatch() *MatchRequest {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *EndMatchRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type EndMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   EndMatchResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=EndMatchResponse_Error" json:"error,omitempty"`
}

func (x *EndMatchResponse) Reset() {
	*x = EndMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMatchResponse) ProtoMessage() {}

func (x *EndMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMatchResponse.ProtoReflect.Descriptor instead.
func (*EndMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{34}
}

func (x *EndMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EndMatchResponse) GetError() EndMatchResponse_Error {
	if x != nil {
		return x.Error
	}
	return EndMatchResponse_NONE
}

type GetMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Match   *Match                 `protobuf:"bytes,2,opt,name=match,proto3,oneof" json:"match,omitempty"`
	Error   GetMatchResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=GetMatchResponse_Error" json:"error,omitempty"`
}

func (x *GetMatchResponse) Reset() {
	*x = GetMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchResponse) ProtoMessage() {}

func (x *GetMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchResponse.ProtoReflect.Descriptor instead.
func (*GetMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{35}
}

func (x *GetMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchResponse) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *GetMatchResponse) GetError() GetMatchResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetMatchResponse_NONE
}

type GetMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arena           *ArenaRequest             `protobuf:"bytes,1,opt,name=arena,proto3,oneof" json:"arena,omitempty"`
	MatchmakingUser *MatchmakingUserRequest   `protobuf:"bytes,2,opt,name=matchmakingUser,proto3,oneof" json:"matchmakingUser,omitempty"`
	Status          *GetMatchesRequest_Status `protobuf:"varint,3,opt,name=status,proto3,enum=GetMatchesRequest_Status,oneof" json:"status,omitempty"`
}

func (x *GetMatchesRequest) Reset() {
	*x = GetMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchesRequest) ProtoMessage() {}

func (x *GetMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchesRequest.ProtoReflect.Descriptor instead.
func (*GetMatchesRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{36}
}

func (x *GetMatchesRequest) GetArena() *ArenaRequest {
	if x != nil {
		return x.Arena
	}
	return nil
}

func (x *GetMatchesRequest) GetMatchmakingUser() *MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

func (x *GetMatchesRequest) GetStatus() GetMatchesRequest_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GetMatchesRequest_PENDING
}

type GetMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Matches []*Match                 `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
	Error   GetMatchesResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=GetMatchesResponse_Error" json:"error,omitempty"`
}

func (x *GetMatchesResponse) Reset() {
	*x = GetMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchesResponse) ProtoMessage() {}

func (x *GetMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchesResponse.ProtoReflect.Descriptor instead.
func (*GetMatchesResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{37}
}

func (x *GetMatchesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchesResponse) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *GetMatchesResponse) GetError() GetMatchesResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetMatchesResponse_NONE
}

type UpdateMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *MatchRequest    `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Data  *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateMatchRequest) Reset() {
	*x = UpdateMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchRequest) ProtoMessage() {}

func (x *UpdateMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchRequest.ProtoReflect.Descriptor instead.
func (*UpdateMatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateMatchRequest) GetMatch() *MatchRequest {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *UpdateMatchRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   UpdateMatchResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=UpdateMatchResponse_Error" json:"error,omitempty"`
}

func (x *UpdateMatchResponse) Reset() {
	*x = UpdateMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchResponse) ProtoMessage() {}

func (x *UpdateMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchResponse.ProtoReflect.Descriptor instead.
func (*UpdateMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateMatchResponse) GetError() UpdateMatchResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateMatchResponse_NONE
}

type Arena struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinPlayers uint32                 `protobuf:"varint,3,opt,name=minPlayers,proto3" json:"minPlayers,omitempty"`
	MaxPlayers uint32                 `protobuf:"varint,4,opt,name=maxPlayers,proto3" json:"maxPlayers,omitempty"`
	Data       *structpb.Struct       `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Arena) Reset() {
	*x = Arena{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Arena) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arena) ProtoMessage() {}

func (x *Arena) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arena.ProtoReflect.Descriptor instead.
func (*Arena) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{40}
}

func (x *Arena) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Arena) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Arena) GetMinPlayers() uint32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *Arena) GetMaxPlayers() uint32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *Arena) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Arena) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Arena) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MatchmakingUserElo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArenaId uint64 `protobuf:"varint,1,opt,name=arenaId,proto3" json:"arenaId,omitempty"`
	Elo     uint32 `protobuf:"varint,2,opt,name=elo,proto3" json:"elo,omitempty"`
}

func (x *MatchmakingUserElo) Reset() {
	*x = MatchmakingUserElo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingUserElo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingUserElo) ProtoMessage() {}

func (x *MatchmakingUserElo) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingUserElo.ProtoReflect.Descriptor instead.
func (*MatchmakingUserElo) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{41}
}

func (x *MatchmakingUserElo) GetArenaId() uint64 {
	if x != nil {
		return x.ArenaId
	}
	return 0
}

func (x *MatchmakingUserElo) GetElo() uint32 {
	if x != nil {
		return x.Elo
	}
	return 0
}

type MatchmakingUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    uint64                 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Data      *structpb.Struct       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Elos      []*MatchmakingUserElo  `protobuf:"bytes,4,rep,name=elos,proto3" json:"elos,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *MatchmakingUser) Reset() {
	*x = MatchmakingUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingUser) ProtoMessage() {}

func (x *MatchmakingUser) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingUser.ProtoReflect.Descriptor instead.
func (*MatchmakingUser) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{42}
}

func (x *MatchmakingUser) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchmakingUser) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MatchmakingUser) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MatchmakingUser) GetElos() []*MatchmakingUserElo {
	if x != nil {
		return x.Elos
	}
	return nil
}

func (x *MatchmakingUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MatchmakingUser) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MatchmakingTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MatchmakingUsers []*MatchmakingUser       `protobuf:"bytes,2,rep,name=matchmakingUsers,proto3" json:"matchmakingUsers,omitempty"`
	Arenas           []*Arena                 `protobuf:"bytes,3,rep,name=arenas,proto3" json:"arenas,omitempty"`
	MatchId          *uint64                  `protobuf:"varint,4,opt,name=matchId,proto3,oneof" json:"matchId,omitempty"`
	Data             *structpb.Struct         `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Status           MatchmakingTicket_Status `protobuf:"varint,6,opt,name=status,proto3,enum=MatchmakingTicket_Status" json:"status,omitempty"`
	CreatedAt        *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp   `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ExpiresAt        *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
}

func (x *MatchmakingTicket) Reset() {
	*x = MatchmakingTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingTicket) ProtoMessage() {}

func (x *MatchmakingTicket) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingTicket.ProtoReflect.Descriptor instead.
func (*MatchmakingTicket) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{43}
}

func (x *MatchmakingTicket) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchmakingTicket) GetMatchmakingUsers() []*MatchmakingUser {
	if x != nil {
		return x.MatchmakingUsers
	}
	return nil
}

func (x *MatchmakingTicket) GetArenas() []*Arena {
	if x != nil {
		return x.Arenas
	}
	return nil
}

func (x *MatchmakingTicket) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *MatchmakingTicket) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MatchmakingTicket) GetStatus() MatchmakingTicket_Status {
	if x != nil {
		return x.Status
	}
	return MatchmakingTicket_PENDING
}

func (x *MatchmakingTicket) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MatchmakingTicket) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MatchmakingTicket) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ArenaId            uint64                 `protobuf:"varint,2,opt,name=arenaId,proto3" json:"arenaId,omitempty"`
	MatchmakingTickets []*MatchmakingTicket   `protobuf:"bytes,3,rep,name=matchmakingTickets,proto3" json:"matchmakingTickets,omitempty"`
	Data               *structpb.Struct       `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Status             Match_Status           `protobuf:"varint,5,opt,name=status,proto3,enum=Match_Status" json:"status,omitempty"`
	LockedAt           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lockedAt,proto3,oneof" json:"lockedAt,omitempty"`
	StartedAt          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	EndedAt            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endedAt,proto3,oneof" json:"endedAt,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{44}
}

func (x *Match) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Match) GetArenaId() uint64 {
	if x != nil {
		return x.ArenaId
	}
	return 0
}

func (x *Match) GetMatchmakingTickets() []*MatchmakingTicket {
	if x != nil {
		return x.MatchmakingTickets
	}
	return nil
}

func (x *Match) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Match) GetStatus() Match_Status {
	if x != nil {
		return x.Status
	}
	return Match_PENDING
}

func (x *Match) GetLockedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LockedAt
	}
	return nil
}

func (x *Match) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Match) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *Match) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Match) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_matchmaking_proto protoreflect.FileDescriptor

var file_matchmaking_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x95, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xc5, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x30, 0x0a, 0x2c, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x4d,
	0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x07, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22,
	0x4c, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x05,
	0x61, 0x72, 0x65, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x41, 0x72,
	0x65, 0x6e, 0x61, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x39,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x22, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x65, 0x6e, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x6e, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52,
	0x06, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x41, 0x72, 0x65, 0x6e,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x39, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x69,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x52, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x03, 0x22, 0x63, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe1, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x4e, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x03, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x16, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x82, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x22, 0x5d, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x3c, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x9c, 0x01,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x5f, 0x4f, 0x52,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6c, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6c, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6c, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x6f, 0x22,
	0xc5, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x53, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4e, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44,
	0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4c, 0x4f, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xb9, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06,
	0x61, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xef, 0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x45, 0x4e,
	0x41, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x53, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52,
	0x45, 0x4e, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x19, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xc4,
	0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x22, 0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x96, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81,
	0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x04, 0x22, 0x98, 0x02, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9c,
	0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x22, 0x8e, 0x01,
	0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x72,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xe7, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x44, 0x5f, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4f, 0x4f, 0x4e, 0x10, 0x07, 0x22, 0x6c,
	0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a,
	0x10, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x6e, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xea, 0x01, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x22, 0xab, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21,
	0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x61,
	0x72, 0x65, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x72, 0x65,
	0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x65,
	0x6e, 0x61, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x22, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbd, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x3a, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x66, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x97, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x22,
	0x8c, 0x02, 0x0a, 0x05, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x40,
	0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6c, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6c, 0x6f,
	0x22, 0x83, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x04, 0x65, 0x6c, 0x6f,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6c, 0x6f, 0x52, 0x04, 0x65, 0x6c,
	0x6f, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xeb, 0x03, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x10,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x41, 0x72, 0x65,
	0x6e, 0x61, 0x52, 0x06, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x22, 0xca, 0x04, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2d, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41,
	0x74, 0x32, 0xd1, 0x0b, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x0d,
	0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x12, 0x11, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x65, 0x6e, 0x61, 0x12, 0x13, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x0d, 0x2e,
	0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x41,
	0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6c, 0x6f, 0x12, 0x1d, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x19, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x10, 0x2e, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_matchmaking_proto_rawDescOnce sync.Once
	file_matchmaking_proto_rawDescData = file_matchmaking_proto_rawDesc
)

func file_matchmaking_proto_rawDescGZIP() []byte {
	file_matchmaking_proto_rawDescOnce.Do(func() {
		file_matchmaking_proto_rawDescData = protoimpl.X.CompressGZIP(file_matchmaking_proto_rawDescData)
	})
	return file_matchmaking_proto_rawDescData
}

var file_matchmaking_proto_enumTypes = make([]protoimpl.EnumInfo, 24)
var file_matchmaking_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_matchmaking_proto_goTypes = []interface{}{
	(CreateArenaResponse_Error)(0),             // 0: CreateArenaResponse.Error
	(GetArenaResponse_Error)(0),                // 1: GetArenaResponse.Error
	(ArenaResponse_Error)(0),                   // 2: ArenaResponse.Error
	(UpdateArenaResponse_Error)(0),             // 3: UpdateArenaResponse.Error
	(CreateMatchmakingUserResponse_Error)(0),   // 4: CreateMatchmakingUserResponse.Error
	(GetMatchmakingUserResponse_Error)(0),      // 5: GetMatchmakingUserResponse.Error
	(MatchmakingUserResponse_Error)(0),         // 6: MatchmakingUserResponse.Error
	(UpdateMatchmakingUserResponse_Error)(0),   // 7: UpdateMatchmakingUserResponse.Error
	(SetMatchmakingUserEloResponse_Error)(0),   // 8: SetMatchmakingUserEloResponse.Error
	(CreateMatchmakingTicketResponse_Error)(0), // 9: CreateMatchmakingTicketResponse.Error
	(MatchmakingTicketResponse_Error)(0),       // 10: MatchmakingTicketResponse.Error
	(GetMatchmakingTicketResponse_Error)(0),    // 11: GetMatchmakingTicketResponse.Error
	(GetMatchmakingTicketsRequest_Status)(0),   // 12: GetMatchmakingTicketsRequest.Status
	(GetMatchmakingTicketsResponse_Error)(0),   // 13: GetMatchmakingTicketsResponse.Error
	(UpdateMatchmakingTicketResponse_Error)(0), // 14: UpdateMatchmakingTicketResponse.Error
	(ExpireMatchmakingTicketResponse_Error)(0), // 15: ExpireMatchmakingTicketResponse.Error
	(StartMatchResponse_Error)(0),              // 16: StartMatchResponse.Error
	(EndMatchResponse_Error)(0),                // 17: EndMatchResponse.Error
	(GetMatchResponse_Error)(0),                // 18: GetMatchResponse.Error
	(GetMatchesRequest_Status)(0),              // 19: GetMatchesRequest.Status
	(GetMatchesResponse_Error)(0),              // 20: GetMatchesResponse.Error
	(UpdateMatchResponse_Error)(0),             // 21: UpdateMatchResponse.Error
	(MatchmakingTicket_Status)(0),              // 22: MatchmakingTicket.Status
	(Match_Status)(0),                          // 23: Match.Status
	(*CreateArenaRequest)(nil),                 // 24: CreateArenaRequest
	(*CreateArenaResponse)(nil),                // 25: CreateArenaResponse
	(*ArenaRequest)(nil),                       // 26: ArenaRequest
	(*GetArenaResponse)(nil),                   // 27: GetArenaResponse
	(*GetArenasRequest)(nil),                   // 28: GetArenasRequest
	(*GetArenasResponse)(nil),                  // 29: GetArenasResponse
	(*ArenaResponse)(nil),                      // 30: ArenaResponse
	(*UpdateArenaRequest)(nil),                 // 31: UpdateArenaRequest
	(*UpdateArenaResponse)(nil),                // 32: UpdateArenaResponse
	(*CreateMatchmakingUserRequest)(nil),       // 33: CreateMatchmakingUserRequest
	(*CreateMatchmakingUserResponse)(nil),      // 34: CreateMatchmakingUserResponse
	(*MatchmakingUserRequest)(nil),             // 35: MatchmakingUserRequest
	(*GetMatchmakingUserResponse)(nil),         // 36: GetMatchmakingUserResponse
	(*GetMatchmakingUsersRequest)(nil),         // 37: GetMatchmakingUsersRequest
	(*GetMatchmakingUsersResponse)(nil),        // 38: GetMatchmakingUsersResponse
	(*MatchmakingUserResponse)(nil),            // 39: MatchmakingUserResponse
	(*UpdateMatchmakingUserRequest)(nil),       // 40: UpdateMatchmakingUserRequest
	(*UpdateMatchmakingUserResponse)(nil),      // 41: UpdateMatchmakingUserResponse
	(*SetMatchmakingUserEloRequest)(nil),       // 42: SetMatchmakingUserEloRequest
	(*SetMatchmakingUserEloResponse)(nil),      // 43: SetMatchmakingUserEloResponse
	(*CreateMatchmakingTicketRequest)(nil),     // 44: CreateMatchmakingTicketRequest
	(*CreateMatchmakingTicketResponse)(nil),    // 45: CreateMatchmakingTicketResponse
	(*MatchmakingTicketRequest)(nil),           // 46: MatchmakingTicketRequest
	(*MatchmakingTicketResponse)(nil),          // 47: MatchmakingTicketResponse
	(*GetMatchmakingTicketResponse)(nil),       // 48: GetMatchmakingTicketResponse
	(*GetMatchmakingTicketsRequest)(nil),       // 49: GetMatchmakingTicketsRequest
	(*GetMatchmakingTicketsResponse)(nil),      // 50: GetMatchmakingTicketsResponse
	(*UpdateMatchmakingTicketRequest)(nil),     // 51: UpdateMatchmakingTicketRequest
	(*UpdateMatchmakingTicketResponse)(nil),    // 52: UpdateMatchmakingTicketResponse
	(*ExpireMatchmakingTicketResponse)(nil),    // 53: ExpireMatchmakingTicketResponse
	(*MatchRequest)(nil),                       // 54: MatchRequest
	(*StartMatchRequest)(nil),                  // 55: StartMatchRequest
	(*StartMatchResponse)(nil),                 // 56: StartMatchResponse
	(*EndMatchRequest)(nil),                    // 57: EndMatchRequest
	(*EndMatchResponse)(nil),                   // 58: EndMatchResponse
	(*GetMatchResponse)(nil),                   // 59: GetMatchResponse
	(*GetMatchesRequest)(nil),                  // 60: GetMatchesRequest
	(*GetMatchesResponse)(nil),                 // 61: GetMatchesResponse
	(*UpdateMatchRequest)(nil),                 // 62: UpdateMatchRequest
	(*UpdateMatchResponse)(nil),                // 63: UpdateMatchResponse
	(*Arena)(nil),                              // 64: Arena
	(*MatchmakingUserElo)(nil),                 // 65: MatchmakingUserElo
	(*MatchmakingUser)(nil),                    // 66: MatchmakingUser
	(*MatchmakingTicket)(nil),                  // 67: MatchmakingTicket
	(*Match)(nil),                              // 68: Match
	(*structpb.Struct)(nil),                    // 69: google.protobuf.Struct
	(*Pagination)(nil),                         // 70: Pagination
	(*timestamppb.Timestamp)(nil),              // 71: google.protobuf.Timestamp
}
var file_matchmaking_proto_depIdxs = []int32{
	69, // 0: CreateArenaRequest.data:type_name -> google.protobuf.Struct
	0,  // 1: CreateArenaResponse.error:type_name -> CreateArenaResponse.Error
	64, // 2: GetArenaResponse.arena:type_name -> Arena
	1,  // 3: GetArenaResponse.error:type_name -> GetArenaResponse.Error
	70, // 4: GetArenasRequest.pagination:type_name -> Pagination
	64, // 5: GetArenasResponse.arenas:type_name -> Arena
	2,  // 6: ArenaResponse.error:type_name -> ArenaResponse.Error
	26, // 7: UpdateArenaRequest.arena:type_name -> ArenaRequest
	69, // 8: UpdateArenaRequest.data:type_name -> google.protobuf.Struct
	3,  // 9: UpdateArenaResponse.error:type_name -> UpdateArenaResponse.Error
	69, // 10: CreateMatchmakingUserRequest.data:type_name -> google.protobuf.Struct
	4,  // 11: CreateMatchmakingUserResponse.error:type_name -> CreateMatchmakingUserResponse.Error
	66, // 12: GetMatchmakingUserResponse.matchmakingUser:type_name -> MatchmakingUser
	5,  // 13: GetMatchmakingUserResponse.error:type_name -> GetMatchmakingUserResponse.Error
	70, // 14: GetMatchmakingUsersRequest.pagination:type_name -> Pagination
	66, // 15: GetMatchmakingUsersResponse.matchmakingUsers:type_name -> MatchmakingUser
	6,  // 16: MatchmakingUserResponse.error:type_name -> MatchmakingUserResponse.Error
	35, // 17: UpdateMatchmakingUserRequest.matchmakingUser:type_name -> MatchmakingUserRequest
	69, // 18: UpdateMatchmakingUserRequest.data:type_name -> google.protobuf.Struct
	7,  // 19: UpdateMatchmakingUserResponse.error:type_name -> UpdateMatchmakingUserResponse.Error
	35, // 20: SetMatchmakingUserEloRequest.matchmakingUser:type_name -> MatchmakingUserRequest
	8,  // 21: SetMatchmakingUserEloResponse.error:type_name -> SetMatchmakingUserEloResponse.Error
	35, // 22: CreateMatchmakingTicketRequest.matchmakingUsers:type_name -> MatchmakingUserRequest
	26, // 23: CreateMatchmakingTicketRequest.arenas:type_name -> ArenaRequest
	69, // 24: CreateMatchmakingTicketRequest.data:type_name -> google.protobuf.Struct
	9,  // 25: CreateMatchmakingTicketResponse.error:type_name -> CreateMatchmakingTicketResponse.Error
	35, // 26: MatchmakingTicketRequest.matchmakingUser:type_name -> MatchmakingUserRequest
	10, // 27: MatchmakingTicketResponse.error:type_name -> MatchmakingTicketResponse.Error
	67, // 28: GetMatchmakingTicketResponse.matchmakingTicket:type_name -> MatchmakingTicket
	11, // 29: GetMatchmakingTicketResponse.error:type_name -> GetMatchmakingTicketResponse.Error
	35, // 30: GetMatchmakingTicketsRequest.matchmakingUser:type_name -> MatchmakingUserRequest
	12, // 31: GetMatchmakingTicketsRequest.status:type_name -> GetMatchmakingTicketsRequest.Status
	70, // 32: GetMatchmakingTicketsRequest.pagination:type_name -> Pagination
	67, // 33: GetMatchmakingTicketsResponse.matchmakingTickets:type_name -> MatchmakingTicket
	13, // 34: GetMatchmakingTicketsResponse.error:type_name -> GetMatchmakingTicketsResponse.Error
	46, // 35: UpdateMatchmakingTicketRequest.matchmakingTicket:type_name -> MatchmakingTicketRequest
	69, // 36: UpdateMatchmakingTicketRequest.data:type_name -> google.protobuf.Struct
	14, // 37: UpdateMatchmakingTicketResponse.error:type_name -> UpdateMatchmakingTicketResponse.Error
	15, // 38: ExpireMatchmakingTicketResponse.error:type_name -> ExpireMatchmakingTicketResponse.Error
	46, // 39: MatchRequest.matchmakingTicket:type_name -> MatchmakingTicketRequest
	54, // 40: StartMatchRequest.match:type_name -> MatchRequest
	71, // 41: StartMatchRequest.startTime:type_name -> google.protobuf.Timestamp
	16, // 42: StartMatchResponse.error:type_name -> StartMatchResponse.Error
	54, // 43: EndMatchRequest.match:type_name -> MatchRequest
	71, // 44: EndMatchRequest.endTime:type_name -> google.protobuf.Timestamp
	17, // 45: EndMatchResponse.error:type_name -> EndMatchResponse.Error
	68, // 46: GetMatchResponse.match:type_name -> Match
	18, // 47: GetMatchResponse.error:type_name -> GetMatchResponse.Error
	26, // 48: GetMatchesRequest.arena:type_name -> ArenaRequest
	35, // 49: GetMatchesRequest.matchmakingUser:type_name -> MatchmakingUserRequest
	19, // 50: GetMatchesRequest.status:type_name -> GetMatchesRequest.Status
	68, // 51: GetMatchesResponse.matches:type_name -> Match
	20, // 52: GetMatchesResponse.error:type_name -> GetMatchesResponse.Error
	54, // 53: UpdateMatchRequest.match:type_name -> MatchRequest
	69, // 54: UpdateMatchRequest.data:type_name -> google.protobuf.Struct
	21, // 55: UpdateMatchResponse.error:type_name -> UpdateMatchResponse.Error
	69, // 56: Arena.data:type_name -> google.protobuf.Struct
	71, // 57: Arena.createdAt:type_name -> google.protobuf.Timestamp
	71, // 58: Arena.updatedAt:type_name -> google.protobuf.Timestamp
	69, // 59: MatchmakingUser.data:type_name -> google.protobuf.Struct
	65, // 60: MatchmakingUser.elos:type_name -> MatchmakingUserElo
	71, // 61: MatchmakingUser.createdAt:type_name -> google.protobuf.Timestamp
	71, // 62: MatchmakingUser.updatedAt:type_name -> google.protobuf.Timestamp
	66, // 63: MatchmakingTicket.matchmakingUsers:type_name -> MatchmakingUser
	64, // 64: MatchmakingTicket.arenas:type_name -> Arena
	69, // 65: MatchmakingTicket.data:type_name -> google.protobuf.Struct
	22, // 66: MatchmakingTicket.status:type_name -> MatchmakingTicket.Status
	71, // 67: MatchmakingTicket.createdAt:type_name -> google.protobuf.Timestamp
	71, // 68: MatchmakingTicket.updatedAt:type_name -> google.protobuf.Timestamp
	71, // 69: MatchmakingTicket.expiresAt:type_name -> google.protobuf.Timestamp
	67, // 70: Match.matchmakingTickets:type_name -> MatchmakingTicket
	69, // 71: Match.data:type_name -> google.protobuf.Struct
	23, // 72: Match.status:type_name -> Match.Status
	71, // 73: Match.lockedAt:type_name -> google.protobuf.Timestamp
	71, // 74: Match.startedAt:type_name -> google.protobuf.Timestamp
	71, // 75: Match.endedAt:type_name -> google.protobuf.Timestamp
	71, // 76: Match.createdAt:type_name -> google.protobuf.Timestamp
	71, // 77: Match.updatedAt:type_name -> google.protobuf.Timestamp
	24, // 78: MatchmakingService.CreateArena:input_type -> CreateArenaRequest
	26, // 79: MatchmakingService.GetArena:input_type -> ArenaRequest
	28, // 80: MatchmakingService.GetArenas:input_type -> GetArenasRequest
	31, // 81: MatchmakingService.UpdateArena:input_type -> UpdateArenaRequest
	26, // 82: MatchmakingService.DeleteArena:input_type -> ArenaRequest
	33, // 83: MatchmakingService.CreateMatchmakingUser:input_type -> CreateMatchmakingUserRequest
	35, // 84: MatchmakingService.GetMatchmakingUser:input_type -> MatchmakingUserRequest
	37, // 85: MatchmakingService.GetMatchmakingUsers:input_type -> GetMatchmakingUsersRequest
	40, // 86: MatchmakingService.UpdateMatchmakingUser:input_type -> UpdateMatchmakingUserRequest
	42, // 87: MatchmakingService.SetMatchmakingUserElo:input_type -> SetMatchmakingUserEloRequest
	44, // 88: MatchmakingService.CreateMatchmakingTicket:input_type -> CreateMatchmakingTicketRequest
	35, // 89: MatchmakingService.PollMatchmakingTicket:input_type -> MatchmakingUserRequest
	46, // 90: MatchmakingService.GetMatchmakingTicket:input_type -> MatchmakingTicketRequest
	49, // 91: MatchmakingService.GetMatchmakingTickets:input_type -> GetMatchmakingTicketsRequest
	51, // 92: MatchmakingService.UpdateMatchmakingTicket:input_type -> UpdateMatchmakingTicketRequest
	46, // 93: MatchmakingService.ExpireMatchmakingTicket:input_type -> MatchmakingTicketRequest
	55, // 94: MatchmakingService.StartMatch:input_type -> StartMatchRequest
	57, // 95: MatchmakingService.EndMatch:input_type -> EndMatchRequest
	54, // 96: MatchmakingService.GetMatch:input_type -> MatchRequest
	60, // 97: MatchmakingService.GetMatches:input_type -> GetMatchesRequest
	62, // 98: MatchmakingService.UpdateMatch:input_type -> UpdateMatchRequest
	25, // 99: MatchmakingService.CreateArena:output_type -> CreateArenaResponse
	27, // 100: MatchmakingService.GetArena:output_type -> GetArenaResponse
	29, // 101: MatchmakingService.GetArenas:output_type -> GetArenasResponse
	32, // 102: MatchmakingService.UpdateArena:output_type -> UpdateArenaResponse
	30, // 103: MatchmakingService.DeleteArena:output_type -> ArenaResponse
	34, // 104: MatchmakingService.CreateMatchmakingUser:output_type -> CreateMatchmakingUserResponse
	36, // 105: MatchmakingService.GetMatchmakingUser:output_type -> GetMatchmakingUserResponse
	38, // 106: MatchmakingService.GetMatchmakingUsers:output_type -> GetMatchmakingUsersResponse
	41, // 107: MatchmakingService.UpdateMatchmakingUser:output_type -> UpdateMatchmakingUserResponse
	43, // 108: MatchmakingService.SetMatchmakingUserElo:output_type -> SetMatchmakingUserEloResponse
	45, // 109: MatchmakingService.CreateMatchmakingTicket:output_type -> CreateMatchmakingTicketResponse
	47, // 110: MatchmakingService.PollMatchmakingTicket:output_type -> MatchmakingTicketResponse
	48, // 111: MatchmakingService.GetMatchmakingTicket:output_type -> GetMatchmakingTicketResponse
	50, // 112: MatchmakingService.GetMatchmakingTickets:output_type -> GetMatchmakingTicketsResponse
	52, // 113: MatchmakingService.UpdateMatchmakingTicket:output_type -> UpdateMatchmakingTicketResponse
	53, // 114: MatchmakingService.ExpireMatchmakingTicket:output_type -> ExpireMatchmakingTicketResponse
	56, // 115: MatchmakingService.StartMatch:output_type -> StartMatchResponse
	58, // 116: MatchmakingService.EndMatch:output_type -> EndMatchResponse
	59, // 117: MatchmakingService.GetMatch:output_type -> GetMatchResponse
	61, // 118: MatchmakingService.GetMatches:output_type -> GetMatchesResponse
	63, // 119: MatchmakingService.UpdateMatch:output_type -> UpdateMatchResponse
	99, // [99:120] is the sub-list for method output_type
	78, // [78:99] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_matchmaking_proto_init() }
func file_matchmaking_proto_init() {
	if File_matchmaking_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_matchmaking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArenaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArenaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArenaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArenasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArenasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArenaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateArenaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateArenaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMatchmakingUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMatchmakingUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchmakingUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchmakingUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchmakingUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchmakingUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchmakingUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMatchmakingUserEloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMatchmakingUserEloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMatchmakingTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMatchmakingTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchmakingTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchmakingTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchmakingTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchmakingTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchmakingTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpireMatchmakingTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Arena); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingUserElo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_matchmaking_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_matchmaking_proto_msgTypes[44].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_matchmaking_proto_rawDesc,
			NumEnums:      24,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_matchmaking_proto_goTypes,
		DependencyIndexes: file_matchmaking_proto_depIdxs,
		EnumInfos:         file_matchmaking_proto_enumTypes,
		MessageInfos:      file_matchmaking_proto_msgTypes,
	}.Build()
	File_matchmaking_proto = out.File
	file_matchmaking_proto_rawDesc = nil
	file_matchmaking_proto_goTypes = nil
	file_matchmaking_proto_depIdxs = nil
}
