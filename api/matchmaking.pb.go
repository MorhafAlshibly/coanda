// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.23.3
// source: matchmaking.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateArenaResponse_Error int32

const (
	CreateArenaResponse_NONE                                                      CreateArenaResponse_Error = 0
	CreateArenaResponse_NAME_TOO_SHORT                                            CreateArenaResponse_Error = 1
	CreateArenaResponse_NAME_TOO_LONG                                             CreateArenaResponse_Error = 2
	CreateArenaResponse_MIN_PLAYERS_REQUIRED                                      CreateArenaResponse_Error = 3
	CreateArenaResponse_MAX_PLAYERS_PER_TICKET_REQUIRED                           CreateArenaResponse_Error = 4
	CreateArenaResponse_MAX_PLAYERS_REQUIRED                                      CreateArenaResponse_Error = 5
	CreateArenaResponse_MIN_PLAYERS_CANNOT_BE_GREATER_THAN_MAX_PLAYERS            CreateArenaResponse_Error = 6
	CreateArenaResponse_MAX_PLAYERS_PER_TICKET_CANNOT_BE_GREATER_THAN_MAX_PLAYERS CreateArenaResponse_Error = 7
	CreateArenaResponse_DATA_REQUIRED                                             CreateArenaResponse_Error = 8
	CreateArenaResponse_ALREADY_EXISTS                                            CreateArenaResponse_Error = 9
)

// Enum value maps for CreateArenaResponse_Error.
var (
	CreateArenaResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "MIN_PLAYERS_REQUIRED",
		4: "MAX_PLAYERS_PER_TICKET_REQUIRED",
		5: "MAX_PLAYERS_REQUIRED",
		6: "MIN_PLAYERS_CANNOT_BE_GREATER_THAN_MAX_PLAYERS",
		7: "MAX_PLAYERS_PER_TICKET_CANNOT_BE_GREATER_THAN_MAX_PLAYERS",
		8: "DATA_REQUIRED",
		9: "ALREADY_EXISTS",
	}
	CreateArenaResponse_Error_value = map[string]int32{
		"NONE":                            0,
		"NAME_TOO_SHORT":                  1,
		"NAME_TOO_LONG":                   2,
		"MIN_PLAYERS_REQUIRED":            3,
		"MAX_PLAYERS_PER_TICKET_REQUIRED": 4,
		"MAX_PLAYERS_REQUIRED":            5,
		"MIN_PLAYERS_CANNOT_BE_GREATER_THAN_MAX_PLAYERS":            6,
		"MAX_PLAYERS_PER_TICKET_CANNOT_BE_GREATER_THAN_MAX_PLAYERS": 7,
		"DATA_REQUIRED":  8,
		"ALREADY_EXISTS": 9,
	}
)

func (x CreateArenaResponse_Error) Enum() *CreateArenaResponse_Error {
	p := new(CreateArenaResponse_Error)
	*p = x
	return p
}

func (x CreateArenaResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateArenaResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[0].Descriptor()
}

func (CreateArenaResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[0]
}

func (x CreateArenaResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateArenaResponse_Error.Descriptor instead.
func (CreateArenaResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{1, 0}
}

type GetArenaResponse_Error int32

const (
	GetArenaResponse_NONE                      GetArenaResponse_Error = 0
	GetArenaResponse_NAME_TOO_SHORT            GetArenaResponse_Error = 1
	GetArenaResponse_NAME_TOO_LONG             GetArenaResponse_Error = 2
	GetArenaResponse_ARENA_ID_OR_NAME_REQUIRED GetArenaResponse_Error = 3
	GetArenaResponse_NOT_FOUND                 GetArenaResponse_Error = 4
)

// Enum value maps for GetArenaResponse_Error.
var (
	GetArenaResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ARENA_ID_OR_NAME_REQUIRED",
		4: "NOT_FOUND",
	}
	GetArenaResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"NAME_TOO_SHORT":            1,
		"NAME_TOO_LONG":             2,
		"ARENA_ID_OR_NAME_REQUIRED": 3,
		"NOT_FOUND":                 4,
	}
)

func (x GetArenaResponse_Error) Enum() *GetArenaResponse_Error {
	p := new(GetArenaResponse_Error)
	*p = x
	return p
}

func (x GetArenaResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetArenaResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[1].Descriptor()
}

func (GetArenaResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[1]
}

func (x GetArenaResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetArenaResponse_Error.Descriptor instead.
func (GetArenaResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{3, 0}
}

type UpdateArenaResponse_Error int32

const (
	UpdateArenaResponse_NONE                                                      UpdateArenaResponse_Error = 0
	UpdateArenaResponse_NAME_TOO_SHORT                                            UpdateArenaResponse_Error = 1
	UpdateArenaResponse_NAME_TOO_LONG                                             UpdateArenaResponse_Error = 2
	UpdateArenaResponse_ARENA_ID_OR_NAME_REQUIRED                                 UpdateArenaResponse_Error = 3
	UpdateArenaResponse_NO_UPDATE_SPECIFIED                                       UpdateArenaResponse_Error = 4
	UpdateArenaResponse_IF_CAPACITY_CHANGED_MUST_CHANGE_ALL_PLAYERS               UpdateArenaResponse_Error = 5
	UpdateArenaResponse_MIN_PLAYERS_CANNOT_BE_GREATER_THAN_MAX_PLAYERS            UpdateArenaResponse_Error = 6
	UpdateArenaResponse_MAX_PLAYERS_PER_TICKET_CANNOT_BE_GREATER_THAN_MAX_PLAYERS UpdateArenaResponse_Error = 7
	UpdateArenaResponse_ARENA_CURRENTLY_IN_USE                                    UpdateArenaResponse_Error = 8
	UpdateArenaResponse_NOT_FOUND                                                 UpdateArenaResponse_Error = 9
)

// Enum value maps for UpdateArenaResponse_Error.
var (
	UpdateArenaResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ARENA_ID_OR_NAME_REQUIRED",
		4: "NO_UPDATE_SPECIFIED",
		5: "IF_CAPACITY_CHANGED_MUST_CHANGE_ALL_PLAYERS",
		6: "MIN_PLAYERS_CANNOT_BE_GREATER_THAN_MAX_PLAYERS",
		7: "MAX_PLAYERS_PER_TICKET_CANNOT_BE_GREATER_THAN_MAX_PLAYERS",
		8: "ARENA_CURRENTLY_IN_USE",
		9: "NOT_FOUND",
	}
	UpdateArenaResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"NAME_TOO_SHORT":            1,
		"NAME_TOO_LONG":             2,
		"ARENA_ID_OR_NAME_REQUIRED": 3,
		"NO_UPDATE_SPECIFIED":       4,
		"IF_CAPACITY_CHANGED_MUST_CHANGE_ALL_PLAYERS":               5,
		"MIN_PLAYERS_CANNOT_BE_GREATER_THAN_MAX_PLAYERS":            6,
		"MAX_PLAYERS_PER_TICKET_CANNOT_BE_GREATER_THAN_MAX_PLAYERS": 7,
		"ARENA_CURRENTLY_IN_USE":                                    8,
		"NOT_FOUND":                                                 9,
	}
)

func (x UpdateArenaResponse_Error) Enum() *UpdateArenaResponse_Error {
	p := new(UpdateArenaResponse_Error)
	*p = x
	return p
}

func (x UpdateArenaResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateArenaResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[2].Descriptor()
}

func (UpdateArenaResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[2]
}

func (x UpdateArenaResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateArenaResponse_Error.Descriptor instead.
func (UpdateArenaResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{6, 0}
}

type CreateMatchmakingUserResponse_Error int32

const (
	CreateMatchmakingUserResponse_NONE                    CreateMatchmakingUserResponse_Error = 0
	CreateMatchmakingUserResponse_CLIENT_USER_ID_REQUIRED CreateMatchmakingUserResponse_Error = 1
	CreateMatchmakingUserResponse_DATA_REQUIRED           CreateMatchmakingUserResponse_Error = 2
	CreateMatchmakingUserResponse_ALREADY_EXISTS          CreateMatchmakingUserResponse_Error = 3
)

// Enum value maps for CreateMatchmakingUserResponse_Error.
var (
	CreateMatchmakingUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "CLIENT_USER_ID_REQUIRED",
		2: "DATA_REQUIRED",
		3: "ALREADY_EXISTS",
	}
	CreateMatchmakingUserResponse_Error_value = map[string]int32{
		"NONE":                    0,
		"CLIENT_USER_ID_REQUIRED": 1,
		"DATA_REQUIRED":           2,
		"ALREADY_EXISTS":          3,
	}
)

func (x CreateMatchmakingUserResponse_Error) Enum() *CreateMatchmakingUserResponse_Error {
	p := new(CreateMatchmakingUserResponse_Error)
	*p = x
	return p
}

func (x CreateMatchmakingUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateMatchmakingUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[3].Descriptor()
}

func (CreateMatchmakingUserResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[3]
}

func (x CreateMatchmakingUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateMatchmakingUserResponse_Error.Descriptor instead.
func (CreateMatchmakingUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{8, 0}
}

type GetMatchmakingUserResponse_Error int32

const (
	GetMatchmakingUserResponse_NONE                                           GetMatchmakingUserResponse_Error = 0
	GetMatchmakingUserResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED GetMatchmakingUserResponse_Error = 1
	GetMatchmakingUserResponse_NOT_FOUND                                      GetMatchmakingUserResponse_Error = 2
)

// Enum value maps for GetMatchmakingUserResponse_Error.
var (
	GetMatchmakingUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		2: "NOT_FOUND",
	}
	GetMatchmakingUserResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED": 1,
		"NOT_FOUND": 2,
	}
)

func (x GetMatchmakingUserResponse_Error) Enum() *GetMatchmakingUserResponse_Error {
	p := new(GetMatchmakingUserResponse_Error)
	*p = x
	return p
}

func (x GetMatchmakingUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchmakingUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[4].Descriptor()
}

func (GetMatchmakingUserResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[4]
}

func (x GetMatchmakingUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchmakingUserResponse_Error.Descriptor instead.
func (GetMatchmakingUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{10, 0}
}

type MatchmakingUserResponse_Error int32

const (
	MatchmakingUserResponse_NONE                                           MatchmakingUserResponse_Error = 0
	MatchmakingUserResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED MatchmakingUserResponse_Error = 1
	MatchmakingUserResponse_NOT_FOUND                                      MatchmakingUserResponse_Error = 2
)

// Enum value maps for MatchmakingUserResponse_Error.
var (
	MatchmakingUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		2: "NOT_FOUND",
	}
	MatchmakingUserResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED": 1,
		"NOT_FOUND": 2,
	}
)

func (x MatchmakingUserResponse_Error) Enum() *MatchmakingUserResponse_Error {
	p := new(MatchmakingUserResponse_Error)
	*p = x
	return p
}

func (x MatchmakingUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchmakingUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[5].Descriptor()
}

func (MatchmakingUserResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[5]
}

func (x MatchmakingUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchmakingUserResponse_Error.Descriptor instead.
func (MatchmakingUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{12, 0}
}

type UpdateMatchmakingUserResponse_Error int32

const (
	UpdateMatchmakingUserResponse_NONE                                           UpdateMatchmakingUserResponse_Error = 0
	UpdateMatchmakingUserResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED UpdateMatchmakingUserResponse_Error = 1
	UpdateMatchmakingUserResponse_DATA_REQUIRED                                  UpdateMatchmakingUserResponse_Error = 2
	UpdateMatchmakingUserResponse_NOT_FOUND                                      UpdateMatchmakingUserResponse_Error = 3
)

// Enum value maps for UpdateMatchmakingUserResponse_Error.
var (
	UpdateMatchmakingUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		2: "DATA_REQUIRED",
		3: "NOT_FOUND",
	}
	UpdateMatchmakingUserResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED": 1,
		"DATA_REQUIRED": 2,
		"NOT_FOUND":     3,
	}
)

func (x UpdateMatchmakingUserResponse_Error) Enum() *UpdateMatchmakingUserResponse_Error {
	p := new(UpdateMatchmakingUserResponse_Error)
	*p = x
	return p
}

func (x UpdateMatchmakingUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMatchmakingUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[6].Descriptor()
}

func (UpdateMatchmakingUserResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[6]
}

func (x UpdateMatchmakingUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMatchmakingUserResponse_Error.Descriptor instead.
func (UpdateMatchmakingUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{14, 0}
}

type DeleteMatchmakingUserResponse_Error int32

const (
	DeleteMatchmakingUserResponse_NONE                                           DeleteMatchmakingUserResponse_Error = 0
	DeleteMatchmakingUserResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED DeleteMatchmakingUserResponse_Error = 1
	DeleteMatchmakingUserResponse_NOT_FOUND                                      DeleteMatchmakingUserResponse_Error = 2
	DeleteMatchmakingUserResponse_USER_CURRENTLY_IN_TICKET                       DeleteMatchmakingUserResponse_Error = 3
	DeleteMatchmakingUserResponse_USER_CURRENTLY_IN_MATCH                        DeleteMatchmakingUserResponse_Error = 4
)

// Enum value maps for DeleteMatchmakingUserResponse_Error.
var (
	DeleteMatchmakingUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		2: "NOT_FOUND",
		3: "USER_CURRENTLY_IN_TICKET",
		4: "USER_CURRENTLY_IN_MATCH",
	}
	DeleteMatchmakingUserResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED": 1,
		"NOT_FOUND":                2,
		"USER_CURRENTLY_IN_TICKET": 3,
		"USER_CURRENTLY_IN_MATCH":  4,
	}
)

func (x DeleteMatchmakingUserResponse_Error) Enum() *DeleteMatchmakingUserResponse_Error {
	p := new(DeleteMatchmakingUserResponse_Error)
	*p = x
	return p
}

func (x DeleteMatchmakingUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteMatchmakingUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[7].Descriptor()
}

func (DeleteMatchmakingUserResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[7]
}

func (x DeleteMatchmakingUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteMatchmakingUserResponse_Error.Descriptor instead.
func (DeleteMatchmakingUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{15, 0}
}

type CreateMatchmakingTicketResponse_Error int32

const (
	CreateMatchmakingTicketResponse_NONE                       CreateMatchmakingTicketResponse_Error = 0
	CreateMatchmakingTicketResponse_MATCHMAKING_USERS_REQUIRED CreateMatchmakingTicketResponse_Error = 1
	CreateMatchmakingTicketResponse_ARENAS_REQUIRED            CreateMatchmakingTicketResponse_Error = 2
	CreateMatchmakingTicketResponse_DATA_REQUIRED              CreateMatchmakingTicketResponse_Error = 3
	CreateMatchmakingTicketResponse_TOO_MANY_PLAYERS           CreateMatchmakingTicketResponse_Error = 4
	CreateMatchmakingTicketResponse_USER_NOT_FOUND             CreateMatchmakingTicketResponse_Error = 5
	CreateMatchmakingTicketResponse_ARENA_NOT_FOUND            CreateMatchmakingTicketResponse_Error = 6
	CreateMatchmakingTicketResponse_USER_ALREADY_IN_TICKET     CreateMatchmakingTicketResponse_Error = 7
)

// Enum value maps for CreateMatchmakingTicketResponse_Error.
var (
	CreateMatchmakingTicketResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCHMAKING_USERS_REQUIRED",
		2: "ARENAS_REQUIRED",
		3: "DATA_REQUIRED",
		4: "TOO_MANY_PLAYERS",
		5: "USER_NOT_FOUND",
		6: "ARENA_NOT_FOUND",
		7: "USER_ALREADY_IN_TICKET",
	}
	CreateMatchmakingTicketResponse_Error_value = map[string]int32{
		"NONE":                       0,
		"MATCHMAKING_USERS_REQUIRED": 1,
		"ARENAS_REQUIRED":            2,
		"DATA_REQUIRED":              3,
		"TOO_MANY_PLAYERS":           4,
		"USER_NOT_FOUND":             5,
		"ARENA_NOT_FOUND":            6,
		"USER_ALREADY_IN_TICKET":     7,
	}
)

func (x CreateMatchmakingTicketResponse_Error) Enum() *CreateMatchmakingTicketResponse_Error {
	p := new(CreateMatchmakingTicketResponse_Error)
	*p = x
	return p
}

func (x CreateMatchmakingTicketResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateMatchmakingTicketResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[8].Descriptor()
}

func (CreateMatchmakingTicketResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[8]
}

func (x CreateMatchmakingTicketResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateMatchmakingTicketResponse_Error.Descriptor instead.
func (CreateMatchmakingTicketResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{17, 0}
}

type GetMatchmakingTicketResponse_Error int32

const (
	GetMatchmakingTicketResponse_NONE                                               GetMatchmakingTicketResponse_Error = 0
	GetMatchmakingTicketResponse_MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED GetMatchmakingTicketResponse_Error = 1
	GetMatchmakingTicketResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED     GetMatchmakingTicketResponse_Error = 2
	GetMatchmakingTicketResponse_NOT_FOUND                                          GetMatchmakingTicketResponse_Error = 3
)

// Enum value maps for GetMatchmakingTicketResponse_Error.
var (
	GetMatchmakingTicketResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED",
		2: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		3: "NOT_FOUND",
	}
	GetMatchmakingTicketResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED": 1,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED":     2,
		"NOT_FOUND": 3,
	}
)

func (x GetMatchmakingTicketResponse_Error) Enum() *GetMatchmakingTicketResponse_Error {
	p := new(GetMatchmakingTicketResponse_Error)
	*p = x
	return p
}

func (x GetMatchmakingTicketResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchmakingTicketResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[9].Descriptor()
}

func (GetMatchmakingTicketResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[9]
}

func (x GetMatchmakingTicketResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchmakingTicketResponse_Error.Descriptor instead.
func (GetMatchmakingTicketResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{20, 0}
}

type GetMatchmakingTicketsResponse_Error int32

const (
	GetMatchmakingTicketsResponse_NONE            GetMatchmakingTicketsResponse_Error = 0
	GetMatchmakingTicketsResponse_MATCH_NOT_FOUND GetMatchmakingTicketsResponse_Error = 1
	GetMatchmakingTicketsResponse_USER_NOT_FOUND  GetMatchmakingTicketsResponse_Error = 2
)

// Enum value maps for GetMatchmakingTicketsResponse_Error.
var (
	GetMatchmakingTicketsResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCH_NOT_FOUND",
		2: "USER_NOT_FOUND",
	}
	GetMatchmakingTicketsResponse_Error_value = map[string]int32{
		"NONE":            0,
		"MATCH_NOT_FOUND": 1,
		"USER_NOT_FOUND":  2,
	}
)

func (x GetMatchmakingTicketsResponse_Error) Enum() *GetMatchmakingTicketsResponse_Error {
	p := new(GetMatchmakingTicketsResponse_Error)
	*p = x
	return p
}

func (x GetMatchmakingTicketsResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchmakingTicketsResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[10].Descriptor()
}

func (GetMatchmakingTicketsResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[10]
}

func (x GetMatchmakingTicketsResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchmakingTicketsResponse_Error.Descriptor instead.
func (GetMatchmakingTicketsResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{22, 0}
}

type UpdateMatchmakingTicketResponse_Error int32

const (
	UpdateMatchmakingTicketResponse_NONE                                               UpdateMatchmakingTicketResponse_Error = 0
	UpdateMatchmakingTicketResponse_MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED UpdateMatchmakingTicketResponse_Error = 1
	UpdateMatchmakingTicketResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED     UpdateMatchmakingTicketResponse_Error = 2
	UpdateMatchmakingTicketResponse_DATA_REQUIRED                                      UpdateMatchmakingTicketResponse_Error = 3
	UpdateMatchmakingTicketResponse_NOT_FOUND                                          UpdateMatchmakingTicketResponse_Error = 4
)

// Enum value maps for UpdateMatchmakingTicketResponse_Error.
var (
	UpdateMatchmakingTicketResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED",
		2: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		3: "DATA_REQUIRED",
		4: "NOT_FOUND",
	}
	UpdateMatchmakingTicketResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED": 1,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED":     2,
		"DATA_REQUIRED": 3,
		"NOT_FOUND":     4,
	}
)

func (x UpdateMatchmakingTicketResponse_Error) Enum() *UpdateMatchmakingTicketResponse_Error {
	p := new(UpdateMatchmakingTicketResponse_Error)
	*p = x
	return p
}

func (x UpdateMatchmakingTicketResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMatchmakingTicketResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[11].Descriptor()
}

func (UpdateMatchmakingTicketResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[11]
}

func (x UpdateMatchmakingTicketResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMatchmakingTicketResponse_Error.Descriptor instead.
func (UpdateMatchmakingTicketResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{24, 0}
}

type DeleteMatchmakingTicketResponse_Error int32

const (
	DeleteMatchmakingTicketResponse_NONE                                               DeleteMatchmakingTicketResponse_Error = 0
	DeleteMatchmakingTicketResponse_MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED DeleteMatchmakingTicketResponse_Error = 1
	DeleteMatchmakingTicketResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED     DeleteMatchmakingTicketResponse_Error = 2
	DeleteMatchmakingTicketResponse_NOT_FOUND                                          DeleteMatchmakingTicketResponse_Error = 3
	DeleteMatchmakingTicketResponse_TICKET_CURRENTLY_IN_MATCH                          DeleteMatchmakingTicketResponse_Error = 4
)

// Enum value maps for DeleteMatchmakingTicketResponse_Error.
var (
	DeleteMatchmakingTicketResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED",
		2: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		3: "NOT_FOUND",
		4: "TICKET_CURRENTLY_IN_MATCH",
	}
	DeleteMatchmakingTicketResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED": 1,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED":     2,
		"NOT_FOUND":                 3,
		"TICKET_CURRENTLY_IN_MATCH": 4,
	}
)

func (x DeleteMatchmakingTicketResponse_Error) Enum() *DeleteMatchmakingTicketResponse_Error {
	p := new(DeleteMatchmakingTicketResponse_Error)
	*p = x
	return p
}

func (x DeleteMatchmakingTicketResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteMatchmakingTicketResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[12].Descriptor()
}

func (DeleteMatchmakingTicketResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[12]
}

func (x DeleteMatchmakingTicketResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteMatchmakingTicketResponse_Error.Descriptor instead.
func (DeleteMatchmakingTicketResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{25, 0}
}

type StartMatchResponse_Error int32

const (
	StartMatchResponse_NONE                                               StartMatchResponse_Error = 0
	StartMatchResponse_MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED            StartMatchResponse_Error = 1
	StartMatchResponse_MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED StartMatchResponse_Error = 2
	StartMatchResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED     StartMatchResponse_Error = 3
	StartMatchResponse_START_TIME_REQUIRED                                StartMatchResponse_Error = 4
	StartMatchResponse_INVALID_START_TIME                                 StartMatchResponse_Error = 5
	StartMatchResponse_START_TIME_TOO_SOON                                StartMatchResponse_Error = 6
	StartMatchResponse_NOT_FOUND                                          StartMatchResponse_Error = 7
	StartMatchResponse_NOT_ENOUGH_PLAYERS_TO_START                        StartMatchResponse_Error = 8
	StartMatchResponse_ALREADY_HAS_START_TIME                             StartMatchResponse_Error = 9
	StartMatchResponse_PRIVATE_SERVER_NOT_SET                             StartMatchResponse_Error = 10
)

// Enum value maps for StartMatchResponse_Error.
var (
	StartMatchResponse_Error_name = map[int32]string{
		0:  "NONE",
		1:  "MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2:  "MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED",
		3:  "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		4:  "START_TIME_REQUIRED",
		5:  "INVALID_START_TIME",
		6:  "START_TIME_TOO_SOON",
		7:  "NOT_FOUND",
		8:  "NOT_ENOUGH_PLAYERS_TO_START",
		9:  "ALREADY_HAS_START_TIME",
		10: "PRIVATE_SERVER_NOT_SET",
	}
	StartMatchResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED":            1,
		"MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED": 2,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED":     3,
		"START_TIME_REQUIRED":                                4,
		"INVALID_START_TIME":                                 5,
		"START_TIME_TOO_SOON":                                6,
		"NOT_FOUND":                                          7,
		"NOT_ENOUGH_PLAYERS_TO_START":                        8,
		"ALREADY_HAS_START_TIME":                             9,
		"PRIVATE_SERVER_NOT_SET":                             10,
	}
)

func (x StartMatchResponse_Error) Enum() *StartMatchResponse_Error {
	p := new(StartMatchResponse_Error)
	*p = x
	return p
}

func (x StartMatchResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartMatchResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[13].Descriptor()
}

func (StartMatchResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[13]
}

func (x StartMatchResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartMatchResponse_Error.Descriptor instead.
func (StartMatchResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{28, 0}
}

type EndMatchResponse_Error int32

const (
	EndMatchResponse_NONE                                               EndMatchResponse_Error = 0
	EndMatchResponse_MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED            EndMatchResponse_Error = 1
	EndMatchResponse_MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED EndMatchResponse_Error = 2
	EndMatchResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED     EndMatchResponse_Error = 3
	EndMatchResponse_END_TIME_REQUIRED                                  EndMatchResponse_Error = 4
	EndMatchResponse_NOT_FOUND                                          EndMatchResponse_Error = 5
	EndMatchResponse_ALREADY_ENDED                                      EndMatchResponse_Error = 6
	EndMatchResponse_END_TIME_BEFORE_START_TIME                         EndMatchResponse_Error = 7
	EndMatchResponse_START_TIME_NOT_SET                                 EndMatchResponse_Error = 8
)

// Enum value maps for EndMatchResponse_Error.
var (
	EndMatchResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2: "MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED",
		3: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		4: "END_TIME_REQUIRED",
		5: "NOT_FOUND",
		6: "ALREADY_ENDED",
		7: "END_TIME_BEFORE_START_TIME",
		8: "START_TIME_NOT_SET",
	}
	EndMatchResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED":            1,
		"MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED": 2,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED":     3,
		"END_TIME_REQUIRED":                                  4,
		"NOT_FOUND":                                          5,
		"ALREADY_ENDED":                                      6,
		"END_TIME_BEFORE_START_TIME":                         7,
		"START_TIME_NOT_SET":                                 8,
	}
)

func (x EndMatchResponse_Error) Enum() *EndMatchResponse_Error {
	p := new(EndMatchResponse_Error)
	*p = x
	return p
}

func (x EndMatchResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndMatchResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[14].Descriptor()
}

func (EndMatchResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[14]
}

func (x EndMatchResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndMatchResponse_Error.Descriptor instead.
func (EndMatchResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{30, 0}
}

type GetMatchResponse_Error int32

const (
	GetMatchResponse_NONE                                               GetMatchResponse_Error = 0
	GetMatchResponse_MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED            GetMatchResponse_Error = 1
	GetMatchResponse_MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED GetMatchResponse_Error = 2
	GetMatchResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED     GetMatchResponse_Error = 3
	GetMatchResponse_NOT_FOUND                                          GetMatchResponse_Error = 4
)

// Enum value maps for GetMatchResponse_Error.
var (
	GetMatchResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2: "MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED",
		3: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		4: "NOT_FOUND",
	}
	GetMatchResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED":            1,
		"MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED": 2,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED":     3,
		"NOT_FOUND": 4,
	}
)

func (x GetMatchResponse_Error) Enum() *GetMatchResponse_Error {
	p := new(GetMatchResponse_Error)
	*p = x
	return p
}

func (x GetMatchResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[15].Descriptor()
}

func (GetMatchResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[15]
}

func (x GetMatchResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchResponse_Error.Descriptor instead.
func (GetMatchResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{32, 0}
}

type UpdateMatchResponse_Error int32

const (
	UpdateMatchResponse_NONE                                               UpdateMatchResponse_Error = 0
	UpdateMatchResponse_MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED            UpdateMatchResponse_Error = 1
	UpdateMatchResponse_MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED UpdateMatchResponse_Error = 2
	UpdateMatchResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED     UpdateMatchResponse_Error = 3
	UpdateMatchResponse_DATA_REQUIRED                                      UpdateMatchResponse_Error = 4
	UpdateMatchResponse_NOT_FOUND                                          UpdateMatchResponse_Error = 5
)

// Enum value maps for UpdateMatchResponse_Error.
var (
	UpdateMatchResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2: "MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED",
		3: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		4: "DATA_REQUIRED",
		5: "NOT_FOUND",
	}
	UpdateMatchResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED":            1,
		"MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED": 2,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED":     3,
		"DATA_REQUIRED": 4,
		"NOT_FOUND":     5,
	}
)

func (x UpdateMatchResponse_Error) Enum() *UpdateMatchResponse_Error {
	p := new(UpdateMatchResponse_Error)
	*p = x
	return p
}

func (x UpdateMatchResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMatchResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[16].Descriptor()
}

func (UpdateMatchResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[16]
}

func (x UpdateMatchResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMatchResponse_Error.Descriptor instead.
func (UpdateMatchResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{36, 0}
}

type SetMatchPrivateServerResponse_Error int32

const (
	SetMatchPrivateServerResponse_NONE                                               SetMatchPrivateServerResponse_Error = 0
	SetMatchPrivateServerResponse_MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED            SetMatchPrivateServerResponse_Error = 1
	SetMatchPrivateServerResponse_MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED SetMatchPrivateServerResponse_Error = 2
	SetMatchPrivateServerResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED     SetMatchPrivateServerResponse_Error = 3
	SetMatchPrivateServerResponse_PRIVATE_SERVER_ID_REQUIRED                         SetMatchPrivateServerResponse_Error = 4
	SetMatchPrivateServerResponse_PRIVATE_SERVER_ALREADY_SET                         SetMatchPrivateServerResponse_Error = 5
	SetMatchPrivateServerResponse_NOT_FOUND                                          SetMatchPrivateServerResponse_Error = 6
)

// Enum value maps for SetMatchPrivateServerResponse_Error.
var (
	SetMatchPrivateServerResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2: "MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED",
		3: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		4: "PRIVATE_SERVER_ID_REQUIRED",
		5: "PRIVATE_SERVER_ALREADY_SET",
		6: "NOT_FOUND",
	}
	SetMatchPrivateServerResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED":            1,
		"MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED": 2,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED":     3,
		"PRIVATE_SERVER_ID_REQUIRED":                         4,
		"PRIVATE_SERVER_ALREADY_SET":                         5,
		"NOT_FOUND":                                          6,
	}
)

func (x SetMatchPrivateServerResponse_Error) Enum() *SetMatchPrivateServerResponse_Error {
	p := new(SetMatchPrivateServerResponse_Error)
	*p = x
	return p
}

func (x SetMatchPrivateServerResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetMatchPrivateServerResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[17].Descriptor()
}

func (SetMatchPrivateServerResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[17]
}

func (x SetMatchPrivateServerResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetMatchPrivateServerResponse_Error.Descriptor instead.
func (SetMatchPrivateServerResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{38, 0}
}

type DeleteMatchResponse_Error int32

const (
	DeleteMatchResponse_NONE                                               DeleteMatchResponse_Error = 0
	DeleteMatchResponse_MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED            DeleteMatchResponse_Error = 1
	DeleteMatchResponse_MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED DeleteMatchResponse_Error = 2
	DeleteMatchResponse_MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED     DeleteMatchResponse_Error = 3
	DeleteMatchResponse_NOT_FOUND                                          DeleteMatchResponse_Error = 4
)

// Enum value maps for DeleteMatchResponse_Error.
var (
	DeleteMatchResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED",
		2: "MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED",
		3: "MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED",
		4: "NOT_FOUND",
	}
	DeleteMatchResponse_Error_value = map[string]int32{
		"NONE": 0,
		"MATCH_ID_OR_MATCHMAKING_TICKET_REQUIRED":            1,
		"MATCHMAKING_TICKET_ID_OR_MATCHMAKING_USER_REQUIRED": 2,
		"MATCHMAKING_USER_ID_OR_CLIENT_USER_ID_REQUIRED":     3,
		"NOT_FOUND": 4,
	}
)

func (x DeleteMatchResponse_Error) Enum() *DeleteMatchResponse_Error {
	p := new(DeleteMatchResponse_Error)
	*p = x
	return p
}

func (x DeleteMatchResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteMatchResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[18].Descriptor()
}

func (DeleteMatchResponse_Error) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[18]
}

func (x DeleteMatchResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteMatchResponse_Error.Descriptor instead.
func (DeleteMatchResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{39, 0}
}

type MatchmakingTicket_Status int32

const (
	MatchmakingTicket_PENDING MatchmakingTicket_Status = 0
	MatchmakingTicket_MATCHED MatchmakingTicket_Status = 1
	MatchmakingTicket_ENDED   MatchmakingTicket_Status = 2
)

// Enum value maps for MatchmakingTicket_Status.
var (
	MatchmakingTicket_Status_name = map[int32]string{
		0: "PENDING",
		1: "MATCHED",
		2: "ENDED",
	}
	MatchmakingTicket_Status_value = map[string]int32{
		"PENDING": 0,
		"MATCHED": 1,
		"ENDED":   2,
	}
)

func (x MatchmakingTicket_Status) Enum() *MatchmakingTicket_Status {
	p := new(MatchmakingTicket_Status)
	*p = x
	return p
}

func (x MatchmakingTicket_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchmakingTicket_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[19].Descriptor()
}

func (MatchmakingTicket_Status) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[19]
}

func (x MatchmakingTicket_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchmakingTicket_Status.Descriptor instead.
func (MatchmakingTicket_Status) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{42, 0}
}

type Match_Status int32

const (
	Match_PENDING Match_Status = 0
	Match_STARTED Match_Status = 1
	Match_ENDED   Match_Status = 2
)

// Enum value maps for Match_Status.
var (
	Match_Status_name = map[int32]string{
		0: "PENDING",
		1: "STARTED",
		2: "ENDED",
	}
	Match_Status_value = map[string]int32{
		"PENDING": 0,
		"STARTED": 1,
		"ENDED":   2,
	}
)

func (x Match_Status) Enum() *Match_Status {
	p := new(Match_Status)
	*p = x
	return p
}

func (x Match_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Match_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[20].Descriptor()
}

func (Match_Status) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[20]
}

func (x Match_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Match_Status.Descriptor instead.
func (Match_Status) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{43, 0}
}

type CreateArenaRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MinPlayers          uint32                 `protobuf:"varint,2,opt,name=minPlayers,proto3" json:"minPlayers,omitempty"`
	MaxPlayersPerTicket uint32                 `protobuf:"varint,3,opt,name=maxPlayersPerTicket,proto3" json:"maxPlayersPerTicket,omitempty"`
	MaxPlayers          uint32                 `protobuf:"varint,4,opt,name=maxPlayers,proto3" json:"maxPlayers,omitempty"`
	Data                *structpb.Struct       `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateArenaRequest) Reset() {
	*x = CreateArenaRequest{}
	mi := &file_matchmaking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateArenaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArenaRequest) ProtoMessage() {}

func (x *CreateArenaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArenaRequest.ProtoReflect.Descriptor instead.
func (*CreateArenaRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{0}
}

func (x *CreateArenaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateArenaRequest) GetMinPlayers() uint32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *CreateArenaRequest) GetMaxPlayersPerTicket() uint32 {
	if x != nil {
		return x.MaxPlayersPerTicket
	}
	return 0
}

func (x *CreateArenaRequest) GetMaxPlayers() uint32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *CreateArenaRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateArenaResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Success       bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id            *uint64                   `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Error         CreateArenaResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.CreateArenaResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateArenaResponse) Reset() {
	*x = CreateArenaResponse{}
	mi := &file_matchmaking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateArenaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArenaResponse) ProtoMessage() {}

func (x *CreateArenaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArenaResponse.ProtoReflect.Descriptor instead.
func (*CreateArenaResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{1}
}

func (x *CreateArenaResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateArenaResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateArenaResponse) GetError() CreateArenaResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateArenaResponse_NONE
}

type ArenaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArenaRequest) Reset() {
	*x = ArenaRequest{}
	mi := &file_matchmaking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArenaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArenaRequest) ProtoMessage() {}

func (x *ArenaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArenaRequest.ProtoReflect.Descriptor instead.
func (*ArenaRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{2}
}

func (x *ArenaRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ArenaRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetArenaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Arena         *Arena                 `protobuf:"bytes,2,opt,name=arena,proto3,oneof" json:"arena,omitempty"`
	Error         GetArenaResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.GetArenaResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArenaResponse) Reset() {
	*x = GetArenaResponse{}
	mi := &file_matchmaking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArenaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArenaResponse) ProtoMessage() {}

func (x *GetArenaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArenaResponse.ProtoReflect.Descriptor instead.
func (*GetArenaResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{3}
}

func (x *GetArenaResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetArenaResponse) GetArena() *Arena {
	if x != nil {
		return x.Arena
	}
	return nil
}

func (x *GetArenaResponse) GetError() GetArenaResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetArenaResponse_NONE
}

type GetArenasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Arenas        []*Arena               `protobuf:"bytes,2,rep,name=arenas,proto3" json:"arenas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArenasResponse) Reset() {
	*x = GetArenasResponse{}
	mi := &file_matchmaking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArenasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArenasResponse) ProtoMessage() {}

func (x *GetArenasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArenasResponse.ProtoReflect.Descriptor instead.
func (*GetArenasResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{4}
}

func (x *GetArenasResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetArenasResponse) GetArenas() []*Arena {
	if x != nil {
		return x.Arenas
	}
	return nil
}

type UpdateArenaRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Arena               *ArenaRequest          `protobuf:"bytes,1,opt,name=arena,proto3" json:"arena,omitempty"`
	MinPlayers          *uint32                `protobuf:"varint,2,opt,name=minPlayers,proto3,oneof" json:"minPlayers,omitempty"`
	MaxPlayersPerTicket *uint32                `protobuf:"varint,3,opt,name=maxPlayersPerTicket,proto3,oneof" json:"maxPlayersPerTicket,omitempty"`
	MaxPlayers          *uint32                `protobuf:"varint,4,opt,name=maxPlayers,proto3,oneof" json:"maxPlayers,omitempty"`
	Data                *structpb.Struct       `protobuf:"bytes,5,opt,name=data,proto3,oneof" json:"data,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateArenaRequest) Reset() {
	*x = UpdateArenaRequest{}
	mi := &file_matchmaking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateArenaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArenaRequest) ProtoMessage() {}

func (x *UpdateArenaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArenaRequest.ProtoReflect.Descriptor instead.
func (*UpdateArenaRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateArenaRequest) GetArena() *ArenaRequest {
	if x != nil {
		return x.Arena
	}
	return nil
}

func (x *UpdateArenaRequest) GetMinPlayers() uint32 {
	if x != nil && x.MinPlayers != nil {
		return *x.MinPlayers
	}
	return 0
}

func (x *UpdateArenaRequest) GetMaxPlayersPerTicket() uint32 {
	if x != nil && x.MaxPlayersPerTicket != nil {
		return *x.MaxPlayersPerTicket
	}
	return 0
}

func (x *UpdateArenaRequest) GetMaxPlayers() uint32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *UpdateArenaRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateArenaResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Success       bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         UpdateArenaResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.UpdateArenaResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateArenaResponse) Reset() {
	*x = UpdateArenaResponse{}
	mi := &file_matchmaking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateArenaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArenaResponse) ProtoMessage() {}

func (x *UpdateArenaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArenaResponse.ProtoReflect.Descriptor instead.
func (*UpdateArenaResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateArenaResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateArenaResponse) GetError() UpdateArenaResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateArenaResponse_NONE
}

type CreateMatchmakingUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientUserId  uint64                 `protobuf:"varint,1,opt,name=clientUserId,proto3" json:"clientUserId,omitempty"`
	Elo           int64                  `protobuf:"varint,2,opt,name=elo,proto3" json:"elo,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMatchmakingUserRequest) Reset() {
	*x = CreateMatchmakingUserRequest{}
	mi := &file_matchmaking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMatchmakingUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchmakingUserRequest) ProtoMessage() {}

func (x *CreateMatchmakingUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchmakingUserRequest.ProtoReflect.Descriptor instead.
func (*CreateMatchmakingUserRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{7}
}

func (x *CreateMatchmakingUserRequest) GetClientUserId() uint64 {
	if x != nil {
		return x.ClientUserId
	}
	return 0
}

func (x *CreateMatchmakingUserRequest) GetElo() int64 {
	if x != nil {
		return x.Elo
	}
	return 0
}

func (x *CreateMatchmakingUserRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateMatchmakingUserResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Success       bool                                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id            *uint64                             `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Error         CreateMatchmakingUserResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.CreateMatchmakingUserResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMatchmakingUserResponse) Reset() {
	*x = CreateMatchmakingUserResponse{}
	mi := &file_matchmaking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMatchmakingUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchmakingUserResponse) ProtoMessage() {}

func (x *CreateMatchmakingUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchmakingUserResponse.ProtoReflect.Descriptor instead.
func (*CreateMatchmakingUserResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{8}
}

func (x *CreateMatchmakingUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateMatchmakingUserResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateMatchmakingUserResponse) GetError() CreateMatchmakingUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateMatchmakingUserResponse_NONE
}

type MatchmakingUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ClientUserId  *uint64                `protobuf:"varint,2,opt,name=clientUserId,proto3,oneof" json:"clientUserId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchmakingUserRequest) Reset() {
	*x = MatchmakingUserRequest{}
	mi := &file_matchmaking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchmakingUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingUserRequest) ProtoMessage() {}

func (x *MatchmakingUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingUserRequest.ProtoReflect.Descriptor instead.
func (*MatchmakingUserRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{9}
}

func (x *MatchmakingUserRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MatchmakingUserRequest) GetClientUserId() uint64 {
	if x != nil && x.ClientUserId != nil {
		return *x.ClientUserId
	}
	return 0
}

type GetMatchmakingUserResponse struct {
	state           protoimpl.MessageState           `protogen:"open.v1"`
	Success         bool                             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MatchmakingUser *MatchmakingUser                 `protobuf:"bytes,2,opt,name=matchmakingUser,proto3,oneof" json:"matchmakingUser,omitempty"`
	Error           GetMatchmakingUserResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.GetMatchmakingUserResponse_Error" json:"error,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMatchmakingUserResponse) Reset() {
	*x = GetMatchmakingUserResponse{}
	mi := &file_matchmaking_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchmakingUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingUserResponse) ProtoMessage() {}

func (x *GetMatchmakingUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingUserResponse.ProtoReflect.Descriptor instead.
func (*GetMatchmakingUserResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{10}
}

func (x *GetMatchmakingUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchmakingUserResponse) GetMatchmakingUser() *MatchmakingUser {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

func (x *GetMatchmakingUserResponse) GetError() GetMatchmakingUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetMatchmakingUserResponse_NONE
}

type GetMatchmakingUsersResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Success          bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MatchmakingUsers []*MatchmakingUser     `protobuf:"bytes,2,rep,name=matchmakingUsers,proto3" json:"matchmakingUsers,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMatchmakingUsersResponse) Reset() {
	*x = GetMatchmakingUsersResponse{}
	mi := &file_matchmaking_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchmakingUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingUsersResponse) ProtoMessage() {}

func (x *GetMatchmakingUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingUsersResponse.ProtoReflect.Descriptor instead.
func (*GetMatchmakingUsersResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{11}
}

func (x *GetMatchmakingUsersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchmakingUsersResponse) GetMatchmakingUsers() []*MatchmakingUser {
	if x != nil {
		return x.MatchmakingUsers
	}
	return nil
}

type MatchmakingUserResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Success       bool                          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         MatchmakingUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.MatchmakingUserResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchmakingUserResponse) Reset() {
	*x = MatchmakingUserResponse{}
	mi := &file_matchmaking_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchmakingUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingUserResponse) ProtoMessage() {}

func (x *MatchmakingUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingUserResponse.ProtoReflect.Descriptor instead.
func (*MatchmakingUserResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{12}
}

func (x *MatchmakingUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchmakingUserResponse) GetError() MatchmakingUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return MatchmakingUserResponse_NONE
}

type UpdateMatchmakingUserRequest struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	MatchmakingUser *MatchmakingUserRequest `protobuf:"bytes,1,opt,name=matchmakingUser,proto3" json:"matchmakingUser,omitempty"`
	Data            *structpb.Struct        `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateMatchmakingUserRequest) Reset() {
	*x = UpdateMatchmakingUserRequest{}
	mi := &file_matchmaking_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMatchmakingUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchmakingUserRequest) ProtoMessage() {}

func (x *UpdateMatchmakingUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchmakingUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateMatchmakingUserRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateMatchmakingUserRequest) GetMatchmakingUser() *MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

func (x *UpdateMatchmakingUserRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateMatchmakingUserResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Success       bool                                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         UpdateMatchmakingUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.UpdateMatchmakingUserResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMatchmakingUserResponse) Reset() {
	*x = UpdateMatchmakingUserResponse{}
	mi := &file_matchmaking_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMatchmakingUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchmakingUserResponse) ProtoMessage() {}

func (x *UpdateMatchmakingUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchmakingUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateMatchmakingUserResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateMatchmakingUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateMatchmakingUserResponse) GetError() UpdateMatchmakingUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateMatchmakingUserResponse_NONE
}

type DeleteMatchmakingUserResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Success       bool                                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         DeleteMatchmakingUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.DeleteMatchmakingUserResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMatchmakingUserResponse) Reset() {
	*x = DeleteMatchmakingUserResponse{}
	mi := &file_matchmaking_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMatchmakingUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMatchmakingUserResponse) ProtoMessage() {}

func (x *DeleteMatchmakingUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMatchmakingUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteMatchmakingUserResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteMatchmakingUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteMatchmakingUserResponse) GetError() DeleteMatchmakingUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return DeleteMatchmakingUserResponse_NONE
}

type CreateMatchmakingTicketRequest struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	MatchmakingUsers []*MatchmakingUserRequest `protobuf:"bytes,1,rep,name=matchmakingUsers,proto3" json:"matchmakingUsers,omitempty"`
	Arenas           []*ArenaRequest           `protobuf:"bytes,2,rep,name=arenas,proto3" json:"arenas,omitempty"`
	Data             *structpb.Struct          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateMatchmakingTicketRequest) Reset() {
	*x = CreateMatchmakingTicketRequest{}
	mi := &file_matchmaking_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMatchmakingTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchmakingTicketRequest) ProtoMessage() {}

func (x *CreateMatchmakingTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchmakingTicketRequest.ProtoReflect.Descriptor instead.
func (*CreateMatchmakingTicketRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{16}
}

func (x *CreateMatchmakingTicketRequest) GetMatchmakingUsers() []*MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUsers
	}
	return nil
}

func (x *CreateMatchmakingTicketRequest) GetArenas() []*ArenaRequest {
	if x != nil {
		return x.Arenas
	}
	return nil
}

func (x *CreateMatchmakingTicketRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateMatchmakingTicketResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Success       bool                                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id            *uint64                               `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Error         CreateMatchmakingTicketResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.CreateMatchmakingTicketResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMatchmakingTicketResponse) Reset() {
	*x = CreateMatchmakingTicketResponse{}
	mi := &file_matchmaking_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMatchmakingTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchmakingTicketResponse) ProtoMessage() {}

func (x *CreateMatchmakingTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchmakingTicketResponse.ProtoReflect.Descriptor instead.
func (*CreateMatchmakingTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{17}
}

func (x *CreateMatchmakingTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateMatchmakingTicketResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateMatchmakingTicketResponse) GetError() CreateMatchmakingTicketResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateMatchmakingTicketResponse_NONE
}

type MatchmakingTicketRequest struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Id              *uint64                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	MatchmakingUser *MatchmakingUserRequest `protobuf:"bytes,2,opt,name=matchmakingUser,proto3,oneof" json:"matchmakingUser,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MatchmakingTicketRequest) Reset() {
	*x = MatchmakingTicketRequest{}
	mi := &file_matchmaking_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchmakingTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingTicketRequest) ProtoMessage() {}

func (x *MatchmakingTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingTicketRequest.ProtoReflect.Descriptor instead.
func (*MatchmakingTicketRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{18}
}

func (x *MatchmakingTicketRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MatchmakingTicketRequest) GetMatchmakingUser() *MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

type GetMatchmakingTicketRequest struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	MatchmakingTicket *MatchmakingTicketRequest `protobuf:"bytes,1,opt,name=matchmakingTicket,proto3" json:"matchmakingTicket,omitempty"`
	UserPagination    *Pagination               `protobuf:"bytes,2,opt,name=userPagination,proto3,oneof" json:"userPagination,omitempty"`
	ArenaPagination   *Pagination               `protobuf:"bytes,3,opt,name=arenaPagination,proto3,oneof" json:"arenaPagination,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetMatchmakingTicketRequest) Reset() {
	*x = GetMatchmakingTicketRequest{}
	mi := &file_matchmaking_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchmakingTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingTicketRequest) ProtoMessage() {}

func (x *GetMatchmakingTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingTicketRequest.ProtoReflect.Descriptor instead.
func (*GetMatchmakingTicketRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{19}
}

func (x *GetMatchmakingTicketRequest) GetMatchmakingTicket() *MatchmakingTicketRequest {
	if x != nil {
		return x.MatchmakingTicket
	}
	return nil
}

func (x *GetMatchmakingTicketRequest) GetUserPagination() *Pagination {
	if x != nil {
		return x.UserPagination
	}
	return nil
}

func (x *GetMatchmakingTicketRequest) GetArenaPagination() *Pagination {
	if x != nil {
		return x.ArenaPagination
	}
	return nil
}

type GetMatchmakingTicketResponse struct {
	state             protoimpl.MessageState             `protogen:"open.v1"`
	Success           bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MatchmakingTicket *MatchmakingTicket                 `protobuf:"bytes,2,opt,name=matchmakingTicket,proto3,oneof" json:"matchmakingTicket,omitempty"`
	Error             GetMatchmakingTicketResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.GetMatchmakingTicketResponse_Error" json:"error,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetMatchmakingTicketResponse) Reset() {
	*x = GetMatchmakingTicketResponse{}
	mi := &file_matchmaking_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchmakingTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingTicketResponse) ProtoMessage() {}

func (x *GetMatchmakingTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingTicketResponse.ProtoReflect.Descriptor instead.
func (*GetMatchmakingTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{20}
}

func (x *GetMatchmakingTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchmakingTicketResponse) GetMatchmakingTicket() *MatchmakingTicket {
	if x != nil {
		return x.MatchmakingTicket
	}
	return nil
}

func (x *GetMatchmakingTicketResponse) GetError() GetMatchmakingTicketResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetMatchmakingTicketResponse_NONE
}

type GetMatchmakingTicketsRequest struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	MatchId         *uint64                    `protobuf:"varint,1,opt,name=matchId,proto3,oneof" json:"matchId,omitempty"`
	MatchmakingUser *MatchmakingUserRequest    `protobuf:"bytes,2,opt,name=matchmakingUser,proto3,oneof" json:"matchmakingUser,omitempty"`
	Statuses        []MatchmakingTicket_Status `protobuf:"varint,3,rep,packed,name=statuses,proto3,enum=api.MatchmakingTicket_Status" json:"statuses,omitempty"`
	Pagination      *Pagination                `protobuf:"bytes,4,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	UserPagination  *Pagination                `protobuf:"bytes,5,opt,name=userPagination,proto3,oneof" json:"userPagination,omitempty"`
	ArenaPagination *Pagination                `protobuf:"bytes,6,opt,name=arenaPagination,proto3,oneof" json:"arenaPagination,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMatchmakingTicketsRequest) Reset() {
	*x = GetMatchmakingTicketsRequest{}
	mi := &file_matchmaking_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchmakingTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingTicketsRequest) ProtoMessage() {}

func (x *GetMatchmakingTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingTicketsRequest.ProtoReflect.Descriptor instead.
func (*GetMatchmakingTicketsRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{21}
}

func (x *GetMatchmakingTicketsRequest) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *GetMatchmakingTicketsRequest) GetMatchmakingUser() *MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

func (x *GetMatchmakingTicketsRequest) GetStatuses() []MatchmakingTicket_Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *GetMatchmakingTicketsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetMatchmakingTicketsRequest) GetUserPagination() *Pagination {
	if x != nil {
		return x.UserPagination
	}
	return nil
}

func (x *GetMatchmakingTicketsRequest) GetArenaPagination() *Pagination {
	if x != nil {
		return x.ArenaPagination
	}
	return nil
}

type GetMatchmakingTicketsResponse struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	Success            bool                                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MatchmakingTickets []*MatchmakingTicket                `protobuf:"bytes,2,rep,name=matchmakingTickets,proto3" json:"matchmakingTickets,omitempty"`
	Error              GetMatchmakingTicketsResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.GetMatchmakingTicketsResponse_Error" json:"error,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetMatchmakingTicketsResponse) Reset() {
	*x = GetMatchmakingTicketsResponse{}
	mi := &file_matchmaking_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchmakingTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchmakingTicketsResponse) ProtoMessage() {}

func (x *GetMatchmakingTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchmakingTicketsResponse.ProtoReflect.Descriptor instead.
func (*GetMatchmakingTicketsResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{22}
}

func (x *GetMatchmakingTicketsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchmakingTicketsResponse) GetMatchmakingTickets() []*MatchmakingTicket {
	if x != nil {
		return x.MatchmakingTickets
	}
	return nil
}

func (x *GetMatchmakingTicketsResponse) GetError() GetMatchmakingTicketsResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetMatchmakingTicketsResponse_NONE
}

type UpdateMatchmakingTicketRequest struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	MatchmakingTicket *MatchmakingTicketRequest `protobuf:"bytes,1,opt,name=matchmakingTicket,proto3" json:"matchmakingTicket,omitempty"`
	Data              *structpb.Struct          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateMatchmakingTicketRequest) Reset() {
	*x = UpdateMatchmakingTicketRequest{}
	mi := &file_matchmaking_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMatchmakingTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchmakingTicketRequest) ProtoMessage() {}

func (x *UpdateMatchmakingTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchmakingTicketRequest.ProtoReflect.Descriptor instead.
func (*UpdateMatchmakingTicketRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateMatchmakingTicketRequest) GetMatchmakingTicket() *MatchmakingTicketRequest {
	if x != nil {
		return x.MatchmakingTicket
	}
	return nil
}

func (x *UpdateMatchmakingTicketRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateMatchmakingTicketResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Success       bool                                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         UpdateMatchmakingTicketResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.UpdateMatchmakingTicketResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMatchmakingTicketResponse) Reset() {
	*x = UpdateMatchmakingTicketResponse{}
	mi := &file_matchmaking_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMatchmakingTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchmakingTicketResponse) ProtoMessage() {}

func (x *UpdateMatchmakingTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchmakingTicketResponse.ProtoReflect.Descriptor instead.
func (*UpdateMatchmakingTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateMatchmakingTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateMatchmakingTicketResponse) GetError() UpdateMatchmakingTicketResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateMatchmakingTicketResponse_NONE
}

type DeleteMatchmakingTicketResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Success       bool                                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         DeleteMatchmakingTicketResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.DeleteMatchmakingTicketResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMatchmakingTicketResponse) Reset() {
	*x = DeleteMatchmakingTicketResponse{}
	mi := &file_matchmaking_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMatchmakingTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMatchmakingTicketResponse) ProtoMessage() {}

func (x *DeleteMatchmakingTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMatchmakingTicketResponse.ProtoReflect.Descriptor instead.
func (*DeleteMatchmakingTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteMatchmakingTicketResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteMatchmakingTicketResponse) GetError() DeleteMatchmakingTicketResponse_Error {
	if x != nil {
		return x.Error
	}
	return DeleteMatchmakingTicketResponse_NONE
}

type MatchRequest struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Id                *uint64                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	MatchmakingTicket *MatchmakingTicketRequest `protobuf:"bytes,2,opt,name=matchmakingTicket,proto3,oneof" json:"matchmakingTicket,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchRequest) Reset() {
	*x = MatchRequest{}
	mi := &file_matchmaking_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRequest) ProtoMessage() {}

func (x *MatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRequest.ProtoReflect.Descriptor instead.
func (*MatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{26}
}

func (x *MatchRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MatchRequest) GetMatchmakingTicket() *MatchmakingTicketRequest {
	if x != nil {
		return x.MatchmakingTicket
	}
	return nil
}

type StartMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         *MatchRequest          `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartMatchRequest) Reset() {
	*x = StartMatchRequest{}
	mi := &file_matchmaking_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMatchRequest) ProtoMessage() {}

func (x *StartMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMatchRequest.ProtoReflect.Descriptor instead.
func (*StartMatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{27}
}

func (x *StartMatchRequest) GetMatch() *MatchRequest {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *StartMatchRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type StartMatchResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Success       bool                     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         StartMatchResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.StartMatchResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartMatchResponse) Reset() {
	*x = StartMatchResponse{}
	mi := &file_matchmaking_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMatchResponse) ProtoMessage() {}

func (x *StartMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMatchResponse.ProtoReflect.Descriptor instead.
func (*StartMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{28}
}

func (x *StartMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartMatchResponse) GetError() StartMatchResponse_Error {
	if x != nil {
		return x.Error
	}
	return StartMatchResponse_NONE
}

type EndMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         *MatchRequest          `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndMatchRequest) Reset() {
	*x = EndMatchRequest{}
	mi := &file_matchmaking_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMatchRequest) ProtoMessage() {}

func (x *EndMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMatchRequest.ProtoReflect.Descriptor instead.
func (*EndMatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{29}
}

func (x *EndMatchRequest) GetMatch() *MatchRequest {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *EndMatchRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type EndMatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         EndMatchResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.EndMatchResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndMatchResponse) Reset() {
	*x = EndMatchResponse{}
	mi := &file_matchmaking_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMatchResponse) ProtoMessage() {}

func (x *EndMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMatchResponse.ProtoReflect.Descriptor instead.
func (*EndMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{30}
}

func (x *EndMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EndMatchResponse) GetError() EndMatchResponse_Error {
	if x != nil {
		return x.Error
	}
	return EndMatchResponse_NONE
}

type GetMatchRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Match            *MatchRequest          `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	TicketPagination *Pagination            `protobuf:"bytes,2,opt,name=ticketPagination,proto3,oneof" json:"ticketPagination,omitempty"`
	UserPagination   *Pagination            `protobuf:"bytes,3,opt,name=userPagination,proto3,oneof" json:"userPagination,omitempty"`
	ArenaPagination  *Pagination            `protobuf:"bytes,4,opt,name=arenaPagination,proto3,oneof" json:"arenaPagination,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMatchRequest) Reset() {
	*x = GetMatchRequest{}
	mi := &file_matchmaking_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchRequest) ProtoMessage() {}

func (x *GetMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchRequest.ProtoReflect.Descriptor instead.
func (*GetMatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{31}
}

func (x *GetMatchRequest) GetMatch() *MatchRequest {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *GetMatchRequest) GetTicketPagination() *Pagination {
	if x != nil {
		return x.TicketPagination
	}
	return nil
}

func (x *GetMatchRequest) GetUserPagination() *Pagination {
	if x != nil {
		return x.UserPagination
	}
	return nil
}

func (x *GetMatchRequest) GetArenaPagination() *Pagination {
	if x != nil {
		return x.ArenaPagination
	}
	return nil
}

type GetMatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Match         *Match                 `protobuf:"bytes,2,opt,name=match,proto3,oneof" json:"match,omitempty"`
	Error         GetMatchResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.GetMatchResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMatchResponse) Reset() {
	*x = GetMatchResponse{}
	mi := &file_matchmaking_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchResponse) ProtoMessage() {}

func (x *GetMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchResponse.ProtoReflect.Descriptor instead.
func (*GetMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{32}
}

func (x *GetMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchResponse) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *GetMatchResponse) GetError() GetMatchResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetMatchResponse_NONE
}

type GetMatchesRequest struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Arena            *ArenaRequest           `protobuf:"bytes,1,opt,name=arena,proto3,oneof" json:"arena,omitempty"`
	MatchmakingUser  *MatchmakingUserRequest `protobuf:"bytes,2,opt,name=matchmakingUser,proto3,oneof" json:"matchmakingUser,omitempty"`
	Statuses         []Match_Status          `protobuf:"varint,3,rep,packed,name=statuses,proto3,enum=api.Match_Status" json:"statuses,omitempty"`
	Pagination       *Pagination             `protobuf:"bytes,4,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	TicketPagination *Pagination             `protobuf:"bytes,5,opt,name=ticketPagination,proto3,oneof" json:"ticketPagination,omitempty"`
	UserPagination   *Pagination             `protobuf:"bytes,6,opt,name=userPagination,proto3,oneof" json:"userPagination,omitempty"`
	ArenaPagination  *Pagination             `protobuf:"bytes,7,opt,name=arenaPagination,proto3,oneof" json:"arenaPagination,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMatchesRequest) Reset() {
	*x = GetMatchesRequest{}
	mi := &file_matchmaking_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchesRequest) ProtoMessage() {}

func (x *GetMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchesRequest.ProtoReflect.Descriptor instead.
func (*GetMatchesRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{33}
}

func (x *GetMatchesRequest) GetArena() *ArenaRequest {
	if x != nil {
		return x.Arena
	}
	return nil
}

func (x *GetMatchesRequest) GetMatchmakingUser() *MatchmakingUserRequest {
	if x != nil {
		return x.MatchmakingUser
	}
	return nil
}

func (x *GetMatchesRequest) GetStatuses() []Match_Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *GetMatchesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetMatchesRequest) GetTicketPagination() *Pagination {
	if x != nil {
		return x.TicketPagination
	}
	return nil
}

func (x *GetMatchesRequest) GetUserPagination() *Pagination {
	if x != nil {
		return x.UserPagination
	}
	return nil
}

func (x *GetMatchesRequest) GetArenaPagination() *Pagination {
	if x != nil {
		return x.ArenaPagination
	}
	return nil
}

type GetMatchesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Matches       []*Match               `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMatchesResponse) Reset() {
	*x = GetMatchesResponse{}
	mi := &file_matchmaking_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchesResponse) ProtoMessage() {}

func (x *GetMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchesResponse.ProtoReflect.Descriptor instead.
func (*GetMatchesResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{34}
}

func (x *GetMatchesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMatchesResponse) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

type UpdateMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         *MatchRequest          `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMatchRequest) Reset() {
	*x = UpdateMatchRequest{}
	mi := &file_matchmaking_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchRequest) ProtoMessage() {}

func (x *UpdateMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchRequest.ProtoReflect.Descriptor instead.
func (*UpdateMatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateMatchRequest) GetMatch() *MatchRequest {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *UpdateMatchRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateMatchResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Success       bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         UpdateMatchResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.UpdateMatchResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMatchResponse) Reset() {
	*x = UpdateMatchResponse{}
	mi := &file_matchmaking_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchResponse) ProtoMessage() {}

func (x *UpdateMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchResponse.ProtoReflect.Descriptor instead.
func (*UpdateMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateMatchResponse) GetError() UpdateMatchResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateMatchResponse_NONE
}

type SetMatchPrivateServerRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Match           *MatchRequest          `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	PrivateServerId string                 `protobuf:"bytes,2,opt,name=privateServerId,proto3" json:"privateServerId,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetMatchPrivateServerRequest) Reset() {
	*x = SetMatchPrivateServerRequest{}
	mi := &file_matchmaking_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMatchPrivateServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMatchPrivateServerRequest) ProtoMessage() {}

func (x *SetMatchPrivateServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMatchPrivateServerRequest.ProtoReflect.Descriptor instead.
func (*SetMatchPrivateServerRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{37}
}

func (x *SetMatchPrivateServerRequest) GetMatch() *MatchRequest {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *SetMatchPrivateServerRequest) GetPrivateServerId() string {
	if x != nil {
		return x.PrivateServerId
	}
	return ""
}

type SetMatchPrivateServerResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// If we receive "NONE" error or "PRIVATE_SERVER_ALREADY_SET" error, this returns the private server ID that was set.
	PrivateServerId *string                             `protobuf:"bytes,2,opt,name=privateServerId,proto3,oneof" json:"privateServerId,omitempty"`
	Error           SetMatchPrivateServerResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.SetMatchPrivateServerResponse_Error" json:"error,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetMatchPrivateServerResponse) Reset() {
	*x = SetMatchPrivateServerResponse{}
	mi := &file_matchmaking_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMatchPrivateServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMatchPrivateServerResponse) ProtoMessage() {}

func (x *SetMatchPrivateServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMatchPrivateServerResponse.ProtoReflect.Descriptor instead.
func (*SetMatchPrivateServerResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{38}
}

func (x *SetMatchPrivateServerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetMatchPrivateServerResponse) GetPrivateServerId() string {
	if x != nil && x.PrivateServerId != nil {
		return *x.PrivateServerId
	}
	return ""
}

func (x *SetMatchPrivateServerResponse) GetError() SetMatchPrivateServerResponse_Error {
	if x != nil {
		return x.Error
	}
	return SetMatchPrivateServerResponse_NONE
}

type DeleteMatchResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Success       bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         DeleteMatchResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.DeleteMatchResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMatchResponse) Reset() {
	*x = DeleteMatchResponse{}
	mi := &file_matchmaking_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMatchResponse) ProtoMessage() {}

func (x *DeleteMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMatchResponse.ProtoReflect.Descriptor instead.
func (*DeleteMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteMatchResponse) GetError() DeleteMatchResponse_Error {
	if x != nil {
		return x.Error
	}
	return DeleteMatchResponse_NONE
}

type Arena struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinPlayers          uint32                 `protobuf:"varint,3,opt,name=minPlayers,proto3" json:"minPlayers,omitempty"`
	MaxPlayersPerTicket uint32                 `protobuf:"varint,4,opt,name=maxPlayersPerTicket,proto3" json:"maxPlayersPerTicket,omitempty"`
	MaxPlayers          uint32                 `protobuf:"varint,5,opt,name=maxPlayers,proto3" json:"maxPlayers,omitempty"`
	Data                *structpb.Struct       `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Arena) Reset() {
	*x = Arena{}
	mi := &file_matchmaking_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Arena) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arena) ProtoMessage() {}

func (x *Arena) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arena.ProtoReflect.Descriptor instead.
func (*Arena) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{40}
}

func (x *Arena) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Arena) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Arena) GetMinPlayers() uint32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *Arena) GetMaxPlayersPerTicket() uint32 {
	if x != nil {
		return x.MaxPlayersPerTicket
	}
	return 0
}

func (x *Arena) GetMaxPlayers() uint32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *Arena) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Arena) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Arena) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MatchmakingUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientUserId  uint64                 `protobuf:"varint,2,opt,name=clientUserId,proto3" json:"clientUserId,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Elo           int64                  `protobuf:"varint,4,opt,name=elo,proto3" json:"elo,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchmakingUser) Reset() {
	*x = MatchmakingUser{}
	mi := &file_matchmaking_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchmakingUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingUser) ProtoMessage() {}

func (x *MatchmakingUser) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingUser.ProtoReflect.Descriptor instead.
func (*MatchmakingUser) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{41}
}

func (x *MatchmakingUser) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchmakingUser) GetClientUserId() uint64 {
	if x != nil {
		return x.ClientUserId
	}
	return 0
}

func (x *MatchmakingUser) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MatchmakingUser) GetElo() int64 {
	if x != nil {
		return x.Elo
	}
	return 0
}

func (x *MatchmakingUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MatchmakingUser) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MatchmakingTicket struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	Id               uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MatchmakingUsers []*MatchmakingUser       `protobuf:"bytes,2,rep,name=matchmakingUsers,proto3" json:"matchmakingUsers,omitempty"`
	Arenas           []*Arena                 `protobuf:"bytes,3,rep,name=arenas,proto3" json:"arenas,omitempty"`
	MatchId          *uint64                  `protobuf:"varint,4,opt,name=matchId,proto3,oneof" json:"matchId,omitempty"`
	Status           MatchmakingTicket_Status `protobuf:"varint,5,opt,name=status,proto3,enum=api.MatchmakingTicket_Status" json:"status,omitempty"`
	Data             *structpb.Struct         `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt        *timestamppb.Timestamp   `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MatchmakingTicket) Reset() {
	*x = MatchmakingTicket{}
	mi := &file_matchmaking_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchmakingTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingTicket) ProtoMessage() {}

func (x *MatchmakingTicket) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingTicket.ProtoReflect.Descriptor instead.
func (*MatchmakingTicket) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{42}
}

func (x *MatchmakingTicket) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchmakingTicket) GetMatchmakingUsers() []*MatchmakingUser {
	if x != nil {
		return x.MatchmakingUsers
	}
	return nil
}

func (x *MatchmakingTicket) GetArenas() []*Arena {
	if x != nil {
		return x.Arenas
	}
	return nil
}

func (x *MatchmakingTicket) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *MatchmakingTicket) GetStatus() MatchmakingTicket_Status {
	if x != nil {
		return x.Status
	}
	return MatchmakingTicket_PENDING
}

func (x *MatchmakingTicket) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MatchmakingTicket) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MatchmakingTicket) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Match struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Arena           *Arena                 `protobuf:"bytes,2,opt,name=arena,proto3" json:"arena,omitempty"`
	Tickets         []*MatchmakingTicket   `protobuf:"bytes,3,rep,name=tickets,proto3" json:"tickets,omitempty"`
	PrivateServerId *string                `protobuf:"bytes,4,opt,name=privateServerId,proto3,oneof" json:"privateServerId,omitempty"`
	Status          Match_Status           `protobuf:"varint,5,opt,name=status,proto3,enum=api.Match_Status" json:"status,omitempty"`
	Data            *structpb.Struct       `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	LockedAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lockedAt,proto3,oneof" json:"lockedAt,omitempty"`
	StartedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	EndedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endedAt,proto3,oneof" json:"endedAt,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_matchmaking_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{43}
}

func (x *Match) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Match) GetArena() *Arena {
	if x != nil {
		return x.Arena
	}
	return nil
}

func (x *Match) GetTickets() []*MatchmakingTicket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Match) GetPrivateServerId() string {
	if x != nil && x.PrivateServerId != nil {
		return *x.PrivateServerId
	}
	return ""
}

func (x *Match) GetStatus() Match_Status {
	if x != nil {
		return x.Status
	}
	return Match_PENDING
}

func (x *Match) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Match) GetLockedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LockedAt
	}
	return nil
}

func (x *Match) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Match) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *Match) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Match) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_matchmaking_proto protoreflect.FileDescriptor

var file_matchmaking_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaf,
	0x03, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52,
	0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f,
	0x50, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x32, 0x0a, 0x2e, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x53, 0x10, 0x06, 0x12, 0x3d, 0x0a, 0x39, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53,
	0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x09, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x22, 0x4c, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf8,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x65, 0x6e,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65,
	0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x66, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x6e,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x72, 0x65, 0x6e, 0x61, 0x52, 0x06, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x22, 0xaf, 0x02, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x23, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50,
	0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7,
	0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x34, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbf, 0x02, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x46, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x49,
	0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x42, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x06, 0x12, 0x3d,
	0x0a, 0x39, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f,
	0x42, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x07, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x4c, 0x59,
	0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x09, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6c, 0x6f, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xec, 0x01, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x55, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0x03, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x16, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x79, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x17,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x32,
	0x0a, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x02, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xe2, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x67, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x8b, 0x02, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x49,
	0x4e, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x22, 0xc1, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd0, 0x02, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xb4, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x53, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x54,
	0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x07, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x96,
	0x01, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x22, 0x8f, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0f,
	0x61, 0x72, 0x65, 0x6e, 0x61, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x02, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8c,
	0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x02, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0f, 0x61, 0x72, 0x65, 0x6e,
	0x61, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x46, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x9f, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x40, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x9f, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x32, 0x0a,
	0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x04, 0x22, 0xab, 0x02, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x04, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x76, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc2,
	0x03, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xdc, 0x02, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x32, 0x0a,
	0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4f, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53,
	0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x0a, 0x22, 0x70, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9b, 0x02, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x08, 0x22, 0xb6, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0f,
	0x61, 0x72, 0x65, 0x6e, 0x61, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x72, 0x65, 0x6e, 0x61, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc,
	0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x04, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x9b, 0x04,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52,
	0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x0f,
	0x61, 0x72, 0x65, 0x6e, 0x61, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x72, 0x65, 0x6e,
	0x61, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x22, 0x6a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x02,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x34, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xcc, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d,
	0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x32,
	0x0a, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x05, 0x22, 0x71, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xf9, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x27, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x22, 0xbe, 0x02, 0x0a, 0x05, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6c, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6c, 0x6f, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xbb, 0x03, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x06, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x87, 0x05, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x30, 0x0a, 0x07,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x32, 0xf3, 0x0c, 0x0a, 0x12, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65,
	0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x12,
	0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x6e,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x12, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x12, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_matchmaking_proto_rawDescOnce sync.Once
	file_matchmaking_proto_rawDescData []byte
)

func file_matchmaking_proto_rawDescGZIP() []byte {
	file_matchmaking_proto_rawDescOnce.Do(func() {
		file_matchmaking_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_matchmaking_proto_rawDesc), len(file_matchmaking_proto_rawDesc)))
	})
	return file_matchmaking_proto_rawDescData
}

var file_matchmaking_proto_enumTypes = make([]protoimpl.EnumInfo, 21)
var file_matchmaking_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_matchmaking_proto_goTypes = []any{
	(CreateArenaResponse_Error)(0),             // 0: api.CreateArenaResponse.Error
	(GetArenaResponse_Error)(0),                // 1: api.GetArenaResponse.Error
	(UpdateArenaResponse_Error)(0),             // 2: api.UpdateArenaResponse.Error
	(CreateMatchmakingUserResponse_Error)(0),   // 3: api.CreateMatchmakingUserResponse.Error
	(GetMatchmakingUserResponse_Error)(0),      // 4: api.GetMatchmakingUserResponse.Error
	(MatchmakingUserResponse_Error)(0),         // 5: api.MatchmakingUserResponse.Error
	(UpdateMatchmakingUserResponse_Error)(0),   // 6: api.UpdateMatchmakingUserResponse.Error
	(DeleteMatchmakingUserResponse_Error)(0),   // 7: api.DeleteMatchmakingUserResponse.Error
	(CreateMatchmakingTicketResponse_Error)(0), // 8: api.CreateMatchmakingTicketResponse.Error
	(GetMatchmakingTicketResponse_Error)(0),    // 9: api.GetMatchmakingTicketResponse.Error
	(GetMatchmakingTicketsResponse_Error)(0),   // 10: api.GetMatchmakingTicketsResponse.Error
	(UpdateMatchmakingTicketResponse_Error)(0), // 11: api.UpdateMatchmakingTicketResponse.Error
	(DeleteMatchmakingTicketResponse_Error)(0), // 12: api.DeleteMatchmakingTicketResponse.Error
	(StartMatchResponse_Error)(0),              // 13: api.StartMatchResponse.Error
	(EndMatchResponse_Error)(0),                // 14: api.EndMatchResponse.Error
	(GetMatchResponse_Error)(0),                // 15: api.GetMatchResponse.Error
	(UpdateMatchResponse_Error)(0),             // 16: api.UpdateMatchResponse.Error
	(SetMatchPrivateServerResponse_Error)(0),   // 17: api.SetMatchPrivateServerResponse.Error
	(DeleteMatchResponse_Error)(0),             // 18: api.DeleteMatchResponse.Error
	(MatchmakingTicket_Status)(0),              // 19: api.MatchmakingTicket.Status
	(Match_Status)(0),                          // 20: api.Match.Status
	(*CreateArenaRequest)(nil),                 // 21: api.CreateArenaRequest
	(*CreateArenaResponse)(nil),                // 22: api.CreateArenaResponse
	(*ArenaRequest)(nil),                       // 23: api.ArenaRequest
	(*GetArenaResponse)(nil),                   // 24: api.GetArenaResponse
	(*GetArenasResponse)(nil),                  // 25: api.GetArenasResponse
	(*UpdateArenaRequest)(nil),                 // 26: api.UpdateArenaRequest
	(*UpdateArenaResponse)(nil),                // 27: api.UpdateArenaResponse
	(*CreateMatchmakingUserRequest)(nil),       // 28: api.CreateMatchmakingUserRequest
	(*CreateMatchmakingUserResponse)(nil),      // 29: api.CreateMatchmakingUserResponse
	(*MatchmakingUserRequest)(nil),             // 30: api.MatchmakingUserRequest
	(*GetMatchmakingUserResponse)(nil),         // 31: api.GetMatchmakingUserResponse
	(*GetMatchmakingUsersResponse)(nil),        // 32: api.GetMatchmakingUsersResponse
	(*MatchmakingUserResponse)(nil),            // 33: api.MatchmakingUserResponse
	(*UpdateMatchmakingUserRequest)(nil),       // 34: api.UpdateMatchmakingUserRequest
	(*UpdateMatchmakingUserResponse)(nil),      // 35: api.UpdateMatchmakingUserResponse
	(*DeleteMatchmakingUserResponse)(nil),      // 36: api.DeleteMatchmakingUserResponse
	(*CreateMatchmakingTicketRequest)(nil),     // 37: api.CreateMatchmakingTicketRequest
	(*CreateMatchmakingTicketResponse)(nil),    // 38: api.CreateMatchmakingTicketResponse
	(*MatchmakingTicketRequest)(nil),           // 39: api.MatchmakingTicketRequest
	(*GetMatchmakingTicketRequest)(nil),        // 40: api.GetMatchmakingTicketRequest
	(*GetMatchmakingTicketResponse)(nil),       // 41: api.GetMatchmakingTicketResponse
	(*GetMatchmakingTicketsRequest)(nil),       // 42: api.GetMatchmakingTicketsRequest
	(*GetMatchmakingTicketsResponse)(nil),      // 43: api.GetMatchmakingTicketsResponse
	(*UpdateMatchmakingTicketRequest)(nil),     // 44: api.UpdateMatchmakingTicketRequest
	(*UpdateMatchmakingTicketResponse)(nil),    // 45: api.UpdateMatchmakingTicketResponse
	(*DeleteMatchmakingTicketResponse)(nil),    // 46: api.DeleteMatchmakingTicketResponse
	(*MatchRequest)(nil),                       // 47: api.MatchRequest
	(*StartMatchRequest)(nil),                  // 48: api.StartMatchRequest
	(*StartMatchResponse)(nil),                 // 49: api.StartMatchResponse
	(*EndMatchRequest)(nil),                    // 50: api.EndMatchRequest
	(*EndMatchResponse)(nil),                   // 51: api.EndMatchResponse
	(*GetMatchRequest)(nil),                    // 52: api.GetMatchRequest
	(*GetMatchResponse)(nil),                   // 53: api.GetMatchResponse
	(*GetMatchesRequest)(nil),                  // 54: api.GetMatchesRequest
	(*GetMatchesResponse)(nil),                 // 55: api.GetMatchesResponse
	(*UpdateMatchRequest)(nil),                 // 56: api.UpdateMatchRequest
	(*UpdateMatchResponse)(nil),                // 57: api.UpdateMatchResponse
	(*SetMatchPrivateServerRequest)(nil),       // 58: api.SetMatchPrivateServerRequest
	(*SetMatchPrivateServerResponse)(nil),      // 59: api.SetMatchPrivateServerResponse
	(*DeleteMatchResponse)(nil),                // 60: api.DeleteMatchResponse
	(*Arena)(nil),                              // 61: api.Arena
	(*MatchmakingUser)(nil),                    // 62: api.MatchmakingUser
	(*MatchmakingTicket)(nil),                  // 63: api.MatchmakingTicket
	(*Match)(nil),                              // 64: api.Match
	(*structpb.Struct)(nil),                    // 65: google.protobuf.Struct
	(*Pagination)(nil),                         // 66: api.Pagination
	(*timestamppb.Timestamp)(nil),              // 67: google.protobuf.Timestamp
}
var file_matchmaking_proto_depIdxs = []int32{
	65,  // 0: api.CreateArenaRequest.data:type_name -> google.protobuf.Struct
	0,   // 1: api.CreateArenaResponse.error:type_name -> api.CreateArenaResponse.Error
	61,  // 2: api.GetArenaResponse.arena:type_name -> api.Arena
	1,   // 3: api.GetArenaResponse.error:type_name -> api.GetArenaResponse.Error
	61,  // 4: api.GetArenasResponse.arenas:type_name -> api.Arena
	23,  // 5: api.UpdateArenaRequest.arena:type_name -> api.ArenaRequest
	65,  // 6: api.UpdateArenaRequest.data:type_name -> google.protobuf.Struct
	2,   // 7: api.UpdateArenaResponse.error:type_name -> api.UpdateArenaResponse.Error
	65,  // 8: api.CreateMatchmakingUserRequest.data:type_name -> google.protobuf.Struct
	3,   // 9: api.CreateMatchmakingUserResponse.error:type_name -> api.CreateMatchmakingUserResponse.Error
	62,  // 10: api.GetMatchmakingUserResponse.matchmakingUser:type_name -> api.MatchmakingUser
	4,   // 11: api.GetMatchmakingUserResponse.error:type_name -> api.GetMatchmakingUserResponse.Error
	62,  // 12: api.GetMatchmakingUsersResponse.matchmakingUsers:type_name -> api.MatchmakingUser
	5,   // 13: api.MatchmakingUserResponse.error:type_name -> api.MatchmakingUserResponse.Error
	30,  // 14: api.UpdateMatchmakingUserRequest.matchmakingUser:type_name -> api.MatchmakingUserRequest
	65,  // 15: api.UpdateMatchmakingUserRequest.data:type_name -> google.protobuf.Struct
	6,   // 16: api.UpdateMatchmakingUserResponse.error:type_name -> api.UpdateMatchmakingUserResponse.Error
	7,   // 17: api.DeleteMatchmakingUserResponse.error:type_name -> api.DeleteMatchmakingUserResponse.Error
	30,  // 18: api.CreateMatchmakingTicketRequest.matchmakingUsers:type_name -> api.MatchmakingUserRequest
	23,  // 19: api.CreateMatchmakingTicketRequest.arenas:type_name -> api.ArenaRequest
	65,  // 20: api.CreateMatchmakingTicketRequest.data:type_name -> google.protobuf.Struct
	8,   // 21: api.CreateMatchmakingTicketResponse.error:type_name -> api.CreateMatchmakingTicketResponse.Error
	30,  // 22: api.MatchmakingTicketRequest.matchmakingUser:type_name -> api.MatchmakingUserRequest
	39,  // 23: api.GetMatchmakingTicketRequest.matchmakingTicket:type_name -> api.MatchmakingTicketRequest
	66,  // 24: api.GetMatchmakingTicketRequest.userPagination:type_name -> api.Pagination
	66,  // 25: api.GetMatchmakingTicketRequest.arenaPagination:type_name -> api.Pagination
	63,  // 26: api.GetMatchmakingTicketResponse.matchmakingTicket:type_name -> api.MatchmakingTicket
	9,   // 27: api.GetMatchmakingTicketResponse.error:type_name -> api.GetMatchmakingTicketResponse.Error
	30,  // 28: api.GetMatchmakingTicketsRequest.matchmakingUser:type_name -> api.MatchmakingUserRequest
	19,  // 29: api.GetMatchmakingTicketsRequest.statuses:type_name -> api.MatchmakingTicket.Status
	66,  // 30: api.GetMatchmakingTicketsRequest.pagination:type_name -> api.Pagination
	66,  // 31: api.GetMatchmakingTicketsRequest.userPagination:type_name -> api.Pagination
	66,  // 32: api.GetMatchmakingTicketsRequest.arenaPagination:type_name -> api.Pagination
	63,  // 33: api.GetMatchmakingTicketsResponse.matchmakingTickets:type_name -> api.MatchmakingTicket
	10,  // 34: api.GetMatchmakingTicketsResponse.error:type_name -> api.GetMatchmakingTicketsResponse.Error
	39,  // 35: api.UpdateMatchmakingTicketRequest.matchmakingTicket:type_name -> api.MatchmakingTicketRequest
	65,  // 36: api.UpdateMatchmakingTicketRequest.data:type_name -> google.protobuf.Struct
	11,  // 37: api.UpdateMatchmakingTicketResponse.error:type_name -> api.UpdateMatchmakingTicketResponse.Error
	12,  // 38: api.DeleteMatchmakingTicketResponse.error:type_name -> api.DeleteMatchmakingTicketResponse.Error
	39,  // 39: api.MatchRequest.matchmakingTicket:type_name -> api.MatchmakingTicketRequest
	47,  // 40: api.StartMatchRequest.match:type_name -> api.MatchRequest
	67,  // 41: api.StartMatchRequest.startTime:type_name -> google.protobuf.Timestamp
	13,  // 42: api.StartMatchResponse.error:type_name -> api.StartMatchResponse.Error
	47,  // 43: api.EndMatchRequest.match:type_name -> api.MatchRequest
	67,  // 44: api.EndMatchRequest.endTime:type_name -> google.protobuf.Timestamp
	14,  // 45: api.EndMatchResponse.error:type_name -> api.EndMatchResponse.Error
	47,  // 46: api.GetMatchRequest.match:type_name -> api.MatchRequest
	66,  // 47: api.GetMatchRequest.ticketPagination:type_name -> api.Pagination
	66,  // 48: api.GetMatchRequest.userPagination:type_name -> api.Pagination
	66,  // 49: api.GetMatchRequest.arenaPagination:type_name -> api.Pagination
	64,  // 50: api.GetMatchResponse.match:type_name -> api.Match
	15,  // 51: api.GetMatchResponse.error:type_name -> api.GetMatchResponse.Error
	23,  // 52: api.GetMatchesRequest.arena:type_name -> api.ArenaRequest
	30,  // 53: api.GetMatchesRequest.matchmakingUser:type_name -> api.MatchmakingUserRequest
	20,  // 54: api.GetMatchesRequest.statuses:type_name -> api.Match.Status
	66,  // 55: api.GetMatchesRequest.pagination:type_name -> api.Pagination
	66,  // 56: api.GetMatchesRequest.ticketPagination:type_name -> api.Pagination
	66,  // 57: api.GetMatchesRequest.userPagination:type_name -> api.Pagination
	66,  // 58: api.GetMatchesRequest.arenaPagination:type_name -> api.Pagination
	64,  // 59: api.GetMatchesResponse.matches:type_name -> api.Match
	47,  // 60: api.UpdateMatchRequest.match:type_name -> api.MatchRequest
	65,  // 61: api.UpdateMatchRequest.data:type_name -> google.protobuf.Struct
	16,  // 62: api.UpdateMatchResponse.error:type_name -> api.UpdateMatchResponse.Error
	47,  // 63: api.SetMatchPrivateServerRequest.match:type_name -> api.MatchRequest
	17,  // 64: api.SetMatchPrivateServerResponse.error:type_name -> api.SetMatchPrivateServerResponse.Error
	18,  // 65: api.DeleteMatchResponse.error:type_name -> api.DeleteMatchResponse.Error
	65,  // 66: api.Arena.data:type_name -> google.protobuf.Struct
	67,  // 67: api.Arena.createdAt:type_name -> google.protobuf.Timestamp
	67,  // 68: api.Arena.updatedAt:type_name -> google.protobuf.Timestamp
	65,  // 69: api.MatchmakingUser.data:type_name -> google.protobuf.Struct
	67,  // 70: api.MatchmakingUser.createdAt:type_name -> google.protobuf.Timestamp
	67,  // 71: api.MatchmakingUser.updatedAt:type_name -> google.protobuf.Timestamp
	62,  // 72: api.MatchmakingTicket.matchmakingUsers:type_name -> api.MatchmakingUser
	61,  // 73: api.MatchmakingTicket.arenas:type_name -> api.Arena
	19,  // 74: api.MatchmakingTicket.status:type_name -> api.MatchmakingTicket.Status
	65,  // 75: api.MatchmakingTicket.data:type_name -> google.protobuf.Struct
	67,  // 76: api.MatchmakingTicket.createdAt:type_name -> google.protobuf.Timestamp
	67,  // 77: api.MatchmakingTicket.updatedAt:type_name -> google.protobuf.Timestamp
	61,  // 78: api.Match.arena:type_name -> api.Arena
	63,  // 79: api.Match.tickets:type_name -> api.MatchmakingTicket
	20,  // 80: api.Match.status:type_name -> api.Match.Status
	65,  // 81: api.Match.data:type_name -> google.protobuf.Struct
	67,  // 82: api.Match.lockedAt:type_name -> google.protobuf.Timestamp
	67,  // 83: api.Match.startedAt:type_name -> google.protobuf.Timestamp
	67,  // 84: api.Match.endedAt:type_name -> google.protobuf.Timestamp
	67,  // 85: api.Match.createdAt:type_name -> google.protobuf.Timestamp
	67,  // 86: api.Match.updatedAt:type_name -> google.protobuf.Timestamp
	21,  // 87: api.MatchmakingService.CreateArena:input_type -> api.CreateArenaRequest
	23,  // 88: api.MatchmakingService.GetArena:input_type -> api.ArenaRequest
	66,  // 89: api.MatchmakingService.GetArenas:input_type -> api.Pagination
	26,  // 90: api.MatchmakingService.UpdateArena:input_type -> api.UpdateArenaRequest
	28,  // 91: api.MatchmakingService.CreateMatchmakingUser:input_type -> api.CreateMatchmakingUserRequest
	30,  // 92: api.MatchmakingService.GetMatchmakingUser:input_type -> api.MatchmakingUserRequest
	66,  // 93: api.MatchmakingService.GetMatchmakingUsers:input_type -> api.Pagination
	34,  // 94: api.MatchmakingService.UpdateMatchmakingUser:input_type -> api.UpdateMatchmakingUserRequest
	30,  // 95: api.MatchmakingService.DeleteMatchmakingUser:input_type -> api.MatchmakingUserRequest
	37,  // 96: api.MatchmakingService.CreateMatchmakingTicket:input_type -> api.CreateMatchmakingTicketRequest
	40,  // 97: api.MatchmakingService.GetMatchmakingTicket:input_type -> api.GetMatchmakingTicketRequest
	42,  // 98: api.MatchmakingService.GetMatchmakingTickets:input_type -> api.GetMatchmakingTicketsRequest
	44,  // 99: api.MatchmakingService.UpdateMatchmakingTicket:input_type -> api.UpdateMatchmakingTicketRequest
	39,  // 100: api.MatchmakingService.DeleteMatchmakingTicket:input_type -> api.MatchmakingTicketRequest
	48,  // 101: api.MatchmakingService.StartMatch:input_type -> api.StartMatchRequest
	50,  // 102: api.MatchmakingService.EndMatch:input_type -> api.EndMatchRequest
	52,  // 103: api.MatchmakingService.GetMatch:input_type -> api.GetMatchRequest
	54,  // 104: api.MatchmakingService.GetMatches:input_type -> api.GetMatchesRequest
	56,  // 105: api.MatchmakingService.UpdateMatch:input_type -> api.UpdateMatchRequest
	58,  // 106: api.MatchmakingService.SetMatchPrivateServer:input_type -> api.SetMatchPrivateServerRequest
	47,  // 107: api.MatchmakingService.DeleteMatch:input_type -> api.MatchRequest
	22,  // 108: api.MatchmakingService.CreateArena:output_type -> api.CreateArenaResponse
	24,  // 109: api.MatchmakingService.GetArena:output_type -> api.GetArenaResponse
	25,  // 110: api.MatchmakingService.GetArenas:output_type -> api.GetArenasResponse
	27,  // 111: api.MatchmakingService.UpdateArena:output_type -> api.UpdateArenaResponse
	29,  // 112: api.MatchmakingService.CreateMatchmakingUser:output_type -> api.CreateMatchmakingUserResponse
	31,  // 113: api.MatchmakingService.GetMatchmakingUser:output_type -> api.GetMatchmakingUserResponse
	32,  // 114: api.MatchmakingService.GetMatchmakingUsers:output_type -> api.GetMatchmakingUsersResponse
	35,  // 115: api.MatchmakingService.UpdateMatchmakingUser:output_type -> api.UpdateMatchmakingUserResponse
	36,  // 116: api.MatchmakingService.DeleteMatchmakingUser:output_type -> api.DeleteMatchmakingUserResponse
	38,  // 117: api.MatchmakingService.CreateMatchmakingTicket:output_type -> api.CreateMatchmakingTicketResponse
	41,  // 118: api.MatchmakingService.GetMatchmakingTicket:output_type -> api.GetMatchmakingTicketResponse
	43,  // 119: api.MatchmakingService.GetMatchmakingTickets:output_type -> api.GetMatchmakingTicketsResponse
	45,  // 120: api.MatchmakingService.UpdateMatchmakingTicket:output_type -> api.UpdateMatchmakingTicketResponse
	46,  // 121: api.MatchmakingService.DeleteMatchmakingTicket:output_type -> api.DeleteMatchmakingTicketResponse
	49,  // 122: api.MatchmakingService.StartMatch:output_type -> api.StartMatchResponse
	51,  // 123: api.MatchmakingService.EndMatch:output_type -> api.EndMatchResponse
	53,  // 124: api.MatchmakingService.GetMatch:output_type -> api.GetMatchResponse
	55,  // 125: api.MatchmakingService.GetMatches:output_type -> api.GetMatchesResponse
	57,  // 126: api.MatchmakingService.UpdateMatch:output_type -> api.UpdateMatchResponse
	59,  // 127: api.MatchmakingService.SetMatchPrivateServer:output_type -> api.SetMatchPrivateServerResponse
	60,  // 128: api.MatchmakingService.DeleteMatch:output_type -> api.DeleteMatchResponse
	108, // [108:129] is the sub-list for method output_type
	87,  // [87:108] is the sub-list for method input_type
	87,  // [87:87] is the sub-list for extension type_name
	87,  // [87:87] is the sub-list for extension extendee
	0,   // [0:87] is the sub-list for field type_name
}

func init() { file_matchmaking_proto_init() }
func file_matchmaking_proto_init() {
	if File_matchmaking_proto != nil {
		return
	}
	file_types_proto_init()
	file_matchmaking_proto_msgTypes[1].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[2].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[3].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[5].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[8].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[9].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[10].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[13].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[17].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[18].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[19].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[20].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[21].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[26].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[31].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[32].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[33].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[38].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[42].OneofWrappers = []any{}
	file_matchmaking_proto_msgTypes[43].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_matchmaking_proto_rawDesc), len(file_matchmaking_proto_rawDesc)),
			NumEnums:      21,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_matchmaking_proto_goTypes,
		DependencyIndexes: file_matchmaking_proto_depIdxs,
		EnumInfos:         file_matchmaking_proto_enumTypes,
		MessageInfos:      file_matchmaking_proto_msgTypes,
	}.Build()
	File_matchmaking_proto = out.File
	file_matchmaking_proto_goTypes = nil
	file_matchmaking_proto_depIdxs = nil
}
