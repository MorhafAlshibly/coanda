// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.3
// source: tournament.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TournamentInterval int32

const (
	TournamentInterval_DAILY     TournamentInterval = 0
	TournamentInterval_WEEKLY    TournamentInterval = 1
	TournamentInterval_MONTHLY   TournamentInterval = 2
	TournamentInterval_UNLIMITED TournamentInterval = 3
)

// Enum value maps for TournamentInterval.
var (
	TournamentInterval_name = map[int32]string{
		0: "DAILY",
		1: "WEEKLY",
		2: "MONTHLY",
		3: "UNLIMITED",
	}
	TournamentInterval_value = map[string]int32{
		"DAILY":     0,
		"WEEKLY":    1,
		"MONTHLY":   2,
		"UNLIMITED": 3,
	}
)

func (x TournamentInterval) Enum() *TournamentInterval {
	p := new(TournamentInterval)
	*p = x
	return p
}

func (x TournamentInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TournamentInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[0].Descriptor()
}

func (TournamentInterval) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[0]
}

func (x TournamentInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TournamentInterval.Descriptor instead.
func (TournamentInterval) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{0}
}

type CreateTournamentUserResponse_Error int32

const (
	CreateTournamentUserResponse_NONE                      CreateTournamentUserResponse_Error = 0
	CreateTournamentUserResponse_TOURNAMENT_NAME_TOO_SHORT CreateTournamentUserResponse_Error = 1
	CreateTournamentUserResponse_TOURNAMENT_NAME_TOO_LONG  CreateTournamentUserResponse_Error = 2
	CreateTournamentUserResponse_USER_ID_REQUIRED          CreateTournamentUserResponse_Error = 3
	CreateTournamentUserResponse_DATA_REQUIRED             CreateTournamentUserResponse_Error = 4
	CreateTournamentUserResponse_ALREADY_EXISTS            CreateTournamentUserResponse_Error = 5
)

// Enum value maps for CreateTournamentUserResponse_Error.
var (
	CreateTournamentUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "TOURNAMENT_NAME_TOO_SHORT",
		2: "TOURNAMENT_NAME_TOO_LONG",
		3: "USER_ID_REQUIRED",
		4: "DATA_REQUIRED",
		5: "ALREADY_EXISTS",
	}
	CreateTournamentUserResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"TOURNAMENT_NAME_TOO_SHORT": 1,
		"TOURNAMENT_NAME_TOO_LONG":  2,
		"USER_ID_REQUIRED":          3,
		"DATA_REQUIRED":             4,
		"ALREADY_EXISTS":            5,
	}
)

func (x CreateTournamentUserResponse_Error) Enum() *CreateTournamentUserResponse_Error {
	p := new(CreateTournamentUserResponse_Error)
	*p = x
	return p
}

func (x CreateTournamentUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateTournamentUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[1].Descriptor()
}

func (CreateTournamentUserResponse_Error) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[1]
}

func (x CreateTournamentUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateTournamentUserResponse_Error.Descriptor instead.
func (CreateTournamentUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{1, 0}
}

type GetTournamentUserResponse_Error int32

const (
	GetTournamentUserResponse_NONE                                       GetTournamentUserResponse_Error = 0
	GetTournamentUserResponse_ID_OR_TOURNAMENT_INTERVAL_USER_ID_REQUIRED GetTournamentUserResponse_Error = 1
	GetTournamentUserResponse_TOURNAMENT_NAME_TOO_SHORT                  GetTournamentUserResponse_Error = 2
	GetTournamentUserResponse_TOURNAMENT_NAME_TOO_LONG                   GetTournamentUserResponse_Error = 3
	GetTournamentUserResponse_USER_ID_REQUIRED                           GetTournamentUserResponse_Error = 4
	GetTournamentUserResponse_NOT_FOUND                                  GetTournamentUserResponse_Error = 5
)

// Enum value maps for GetTournamentUserResponse_Error.
var (
	GetTournamentUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_TOURNAMENT_INTERVAL_USER_ID_REQUIRED",
		2: "TOURNAMENT_NAME_TOO_SHORT",
		3: "TOURNAMENT_NAME_TOO_LONG",
		4: "USER_ID_REQUIRED",
		5: "NOT_FOUND",
	}
	GetTournamentUserResponse_Error_value = map[string]int32{
		"NONE": 0,
		"ID_OR_TOURNAMENT_INTERVAL_USER_ID_REQUIRED": 1,
		"TOURNAMENT_NAME_TOO_SHORT":                  2,
		"TOURNAMENT_NAME_TOO_LONG":                   3,
		"USER_ID_REQUIRED":                           4,
		"NOT_FOUND":                                  5,
	}
)

func (x GetTournamentUserResponse_Error) Enum() *GetTournamentUserResponse_Error {
	p := new(GetTournamentUserResponse_Error)
	*p = x
	return p
}

func (x GetTournamentUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTournamentUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[2].Descriptor()
}

func (GetTournamentUserResponse_Error) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[2]
}

func (x GetTournamentUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTournamentUserResponse_Error.Descriptor instead.
func (GetTournamentUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{4, 0}
}

type TournamentUserResponse_Error int32

const (
	TournamentUserResponse_NONE                                       TournamentUserResponse_Error = 0
	TournamentUserResponse_ID_OR_TOURNAMENT_INTERVAL_USER_ID_REQUIRED TournamentUserResponse_Error = 1
	TournamentUserResponse_TOURNAMENT_NAME_TOO_SHORT                  TournamentUserResponse_Error = 2
	TournamentUserResponse_TOURNAMENT_NAME_TOO_LONG                   TournamentUserResponse_Error = 3
	TournamentUserResponse_USER_ID_REQUIRED                           TournamentUserResponse_Error = 4
	TournamentUserResponse_NOT_FOUND                                  TournamentUserResponse_Error = 5
)

// Enum value maps for TournamentUserResponse_Error.
var (
	TournamentUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_TOURNAMENT_INTERVAL_USER_ID_REQUIRED",
		2: "TOURNAMENT_NAME_TOO_SHORT",
		3: "TOURNAMENT_NAME_TOO_LONG",
		4: "USER_ID_REQUIRED",
		5: "NOT_FOUND",
	}
	TournamentUserResponse_Error_value = map[string]int32{
		"NONE": 0,
		"ID_OR_TOURNAMENT_INTERVAL_USER_ID_REQUIRED": 1,
		"TOURNAMENT_NAME_TOO_SHORT":                  2,
		"TOURNAMENT_NAME_TOO_LONG":                   3,
		"USER_ID_REQUIRED":                           4,
		"NOT_FOUND":                                  5,
	}
)

func (x TournamentUserResponse_Error) Enum() *TournamentUserResponse_Error {
	p := new(TournamentUserResponse_Error)
	*p = x
	return p
}

func (x TournamentUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TournamentUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[3].Descriptor()
}

func (TournamentUserResponse_Error) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[3]
}

func (x TournamentUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TournamentUserResponse_Error.Descriptor instead.
func (TournamentUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{5, 0}
}

type GetTournamentUsersResponse_Error int32

const (
	GetTournamentUsersResponse_NONE                      GetTournamentUsersResponse_Error = 0
	GetTournamentUsersResponse_TOURNAMENT_NAME_TOO_SHORT GetTournamentUsersResponse_Error = 1
	GetTournamentUsersResponse_TOURNAMENT_NAME_TOO_LONG  GetTournamentUsersResponse_Error = 2
)

// Enum value maps for GetTournamentUsersResponse_Error.
var (
	GetTournamentUsersResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "TOURNAMENT_NAME_TOO_SHORT",
		2: "TOURNAMENT_NAME_TOO_LONG",
	}
	GetTournamentUsersResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"TOURNAMENT_NAME_TOO_SHORT": 1,
		"TOURNAMENT_NAME_TOO_LONG":  2,
	}
)

func (x GetTournamentUsersResponse_Error) Enum() *GetTournamentUsersResponse_Error {
	p := new(GetTournamentUsersResponse_Error)
	*p = x
	return p
}

func (x GetTournamentUsersResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTournamentUsersResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[4].Descriptor()
}

func (GetTournamentUsersResponse_Error) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[4]
}

func (x GetTournamentUsersResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTournamentUsersResponse_Error.Descriptor instead.
func (GetTournamentUsersResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{7, 0}
}

type UpdateTournamentUserResponse_Error int32

const (
	UpdateTournamentUserResponse_NONE                                       UpdateTournamentUserResponse_Error = 0
	UpdateTournamentUserResponse_ID_OR_TOURNAMENT_INTERVAL_USER_ID_REQUIRED UpdateTournamentUserResponse_Error = 1
	UpdateTournamentUserResponse_TOURNAMENT_NAME_TOO_SHORT                  UpdateTournamentUserResponse_Error = 2
	UpdateTournamentUserResponse_TOURNAMENT_NAME_TOO_LONG                   UpdateTournamentUserResponse_Error = 3
	UpdateTournamentUserResponse_USER_ID_REQUIRED                           UpdateTournamentUserResponse_Error = 4
	UpdateTournamentUserResponse_NOT_FOUND                                  UpdateTournamentUserResponse_Error = 5
	UpdateTournamentUserResponse_NO_UPDATE_SPECIFIED                        UpdateTournamentUserResponse_Error = 6
	UpdateTournamentUserResponse_INCREMENT_SCORE_NOT_SPECIFIED              UpdateTournamentUserResponse_Error = 7
)

// Enum value maps for UpdateTournamentUserResponse_Error.
var (
	UpdateTournamentUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_OR_TOURNAMENT_INTERVAL_USER_ID_REQUIRED",
		2: "TOURNAMENT_NAME_TOO_SHORT",
		3: "TOURNAMENT_NAME_TOO_LONG",
		4: "USER_ID_REQUIRED",
		5: "NOT_FOUND",
		6: "NO_UPDATE_SPECIFIED",
		7: "INCREMENT_SCORE_NOT_SPECIFIED",
	}
	UpdateTournamentUserResponse_Error_value = map[string]int32{
		"NONE": 0,
		"ID_OR_TOURNAMENT_INTERVAL_USER_ID_REQUIRED": 1,
		"TOURNAMENT_NAME_TOO_SHORT":                  2,
		"TOURNAMENT_NAME_TOO_LONG":                   3,
		"USER_ID_REQUIRED":                           4,
		"NOT_FOUND":                                  5,
		"NO_UPDATE_SPECIFIED":                        6,
		"INCREMENT_SCORE_NOT_SPECIFIED":              7,
	}
)

func (x UpdateTournamentUserResponse_Error) Enum() *UpdateTournamentUserResponse_Error {
	p := new(UpdateTournamentUserResponse_Error)
	*p = x
	return p
}

func (x UpdateTournamentUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateTournamentUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[5].Descriptor()
}

func (UpdateTournamentUserResponse_Error) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[5]
}

func (x UpdateTournamentUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateTournamentUserResponse_Error.Descriptor instead.
func (UpdateTournamentUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{9, 0}
}

type CreateTournamentUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament string             `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
	Interval   TournamentInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=api.TournamentInterval" json:"interval,omitempty"`
	UserId     uint64             `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Score      *int64             `protobuf:"varint,4,opt,name=score,proto3,oneof" json:"score,omitempty"`
	Data       *structpb.Struct   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateTournamentUserRequest) Reset() {
	*x = CreateTournamentUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentUserRequest) ProtoMessage() {}

func (x *CreateTournamentUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentUserRequest.ProtoReflect.Descriptor instead.
func (*CreateTournamentUserRequest) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTournamentUserRequest) GetTournament() string {
	if x != nil {
		return x.Tournament
	}
	return ""
}

func (x *CreateTournamentUserRequest) GetInterval() TournamentInterval {
	if x != nil {
		return x.Interval
	}
	return TournamentInterval_DAILY
}

func (x *CreateTournamentUserRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateTournamentUserRequest) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CreateTournamentUserRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateTournamentUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      *uint64                            `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Error   CreateTournamentUserResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.CreateTournamentUserResponse_Error" json:"error,omitempty"`
}

func (x *CreateTournamentUserResponse) Reset() {
	*x = CreateTournamentUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentUserResponse) ProtoMessage() {}

func (x *CreateTournamentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentUserResponse.ProtoReflect.Descriptor instead.
func (*CreateTournamentUserResponse) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTournamentUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateTournamentUserResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateTournamentUserResponse) GetError() CreateTournamentUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateTournamentUserResponse_NONE
}

type TournamentIntervalUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament string             `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
	Interval   TournamentInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=api.TournamentInterval" json:"interval,omitempty"`
	UserId     uint64             `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *TournamentIntervalUserId) Reset() {
	*x = TournamentIntervalUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentIntervalUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentIntervalUserId) ProtoMessage() {}

func (x *TournamentIntervalUserId) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentIntervalUserId.ProtoReflect.Descriptor instead.
func (*TournamentIntervalUserId) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{2}
}

func (x *TournamentIntervalUserId) GetTournament() string {
	if x != nil {
		return x.Tournament
	}
	return ""
}

func (x *TournamentIntervalUserId) GetInterval() TournamentInterval {
	if x != nil {
		return x.Interval
	}
	return TournamentInterval_DAILY
}

func (x *TournamentIntervalUserId) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type TournamentUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       *uint64                   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TournamentIntervalUserId *TournamentIntervalUserId `protobuf:"bytes,2,opt,name=tournamentIntervalUserId,proto3,oneof" json:"tournamentIntervalUserId,omitempty"`
}

func (x *TournamentUserRequest) Reset() {
	*x = TournamentUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentUserRequest) ProtoMessage() {}

func (x *TournamentUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentUserRequest.ProtoReflect.Descriptor instead.
func (*TournamentUserRequest) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{3}
}

func (x *TournamentUserRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TournamentUserRequest) GetTournamentIntervalUserId() *TournamentIntervalUserId {
	if x != nil {
		return x.TournamentIntervalUserId
	}
	return nil
}

type GetTournamentUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool                            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	TournamentUser *TournamentUser                 `protobuf:"bytes,2,opt,name=tournamentUser,proto3,oneof" json:"tournamentUser,omitempty"`
	Error          GetTournamentUserResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.GetTournamentUserResponse_Error" json:"error,omitempty"`
}

func (x *GetTournamentUserResponse) Reset() {
	*x = GetTournamentUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentUserResponse) ProtoMessage() {}

func (x *GetTournamentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentUserResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentUserResponse) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{4}
}

func (x *GetTournamentUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTournamentUserResponse) GetTournamentUser() *TournamentUser {
	if x != nil {
		return x.TournamentUser
	}
	return nil
}

func (x *GetTournamentUserResponse) GetError() GetTournamentUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetTournamentUserResponse_NONE
}

type TournamentUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   TournamentUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.TournamentUserResponse_Error" json:"error,omitempty"`
}

func (x *TournamentUserResponse) Reset() {
	*x = TournamentUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentUserResponse) ProtoMessage() {}

func (x *TournamentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentUserResponse.ProtoReflect.Descriptor instead.
func (*TournamentUserResponse) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{5}
}

func (x *TournamentUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TournamentUserResponse) GetError() TournamentUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return TournamentUserResponse_NONE
}

type GetTournamentUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament *string            `protobuf:"bytes,1,opt,name=tournament,proto3,oneof" json:"tournament,omitempty"`
	Interval   TournamentInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=api.TournamentInterval" json:"interval,omitempty"`
	UserId     *uint64            `protobuf:"varint,3,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	Pagination *Pagination        `protobuf:"bytes,4,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *GetTournamentUsersRequest) Reset() {
	*x = GetTournamentUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentUsersRequest) ProtoMessage() {}

func (x *GetTournamentUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentUsersRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentUsersRequest) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{6}
}

func (x *GetTournamentUsersRequest) GetTournament() string {
	if x != nil && x.Tournament != nil {
		return *x.Tournament
	}
	return ""
}

func (x *GetTournamentUsersRequest) GetInterval() TournamentInterval {
	if x != nil {
		return x.Interval
	}
	return TournamentInterval_DAILY
}

func (x *GetTournamentUsersRequest) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *GetTournamentUsersRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetTournamentUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool                             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	TournamentUsers []*TournamentUser                `protobuf:"bytes,2,rep,name=tournamentUsers,proto3" json:"tournamentUsers,omitempty"`
	Error           GetTournamentUsersResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.GetTournamentUsersResponse_Error" json:"error,omitempty"`
}

func (x *GetTournamentUsersResponse) Reset() {
	*x = GetTournamentUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentUsersResponse) ProtoMessage() {}

func (x *GetTournamentUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentUsersResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentUsersResponse) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{7}
}

func (x *GetTournamentUsersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTournamentUsersResponse) GetTournamentUsers() []*TournamentUser {
	if x != nil {
		return x.TournamentUsers
	}
	return nil
}

func (x *GetTournamentUsersResponse) GetError() GetTournamentUsersResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetTournamentUsersResponse_NONE
}

type UpdateTournamentUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament     *TournamentUserRequest `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
	Data           *structpb.Struct       `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
	Score          *int64                 `protobuf:"varint,3,opt,name=score,proto3,oneof" json:"score,omitempty"`
	IncrementScore *bool                  `protobuf:"varint,4,opt,name=incrementScore,proto3,oneof" json:"incrementScore,omitempty"`
}

func (x *UpdateTournamentUserRequest) Reset() {
	*x = UpdateTournamentUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentUserRequest) ProtoMessage() {}

func (x *UpdateTournamentUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateTournamentUserRequest) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTournamentUserRequest) GetTournament() *TournamentUserRequest {
	if x != nil {
		return x.Tournament
	}
	return nil
}

func (x *UpdateTournamentUserRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateTournamentUserRequest) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *UpdateTournamentUserRequest) GetIncrementScore() bool {
	if x != nil && x.IncrementScore != nil {
		return *x.IncrementScore
	}
	return false
}

type UpdateTournamentUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   UpdateTournamentUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.UpdateTournamentUserResponse_Error" json:"error,omitempty"`
}

func (x *UpdateTournamentUserResponse) Reset() {
	*x = UpdateTournamentUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentUserResponse) ProtoMessage() {}

func (x *UpdateTournamentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateTournamentUserResponse) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateTournamentUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateTournamentUserResponse) GetError() UpdateTournamentUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateTournamentUserResponse_NONE
}

type TournamentUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tournament          string                 `protobuf:"bytes,2,opt,name=tournament,proto3" json:"tournament,omitempty"`
	UserId              uint64                 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Interval            TournamentInterval     `protobuf:"varint,4,opt,name=interval,proto3,enum=api.TournamentInterval" json:"interval,omitempty"`
	Score               int64                  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Ranking             uint64                 `protobuf:"varint,6,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Data                *structpb.Struct       `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	TournamentStartedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=tournamentStartedAt,proto3" json:"tournamentStartedAt,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *TournamentUser) Reset() {
	*x = TournamentUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentUser) ProtoMessage() {}

func (x *TournamentUser) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentUser.ProtoReflect.Descriptor instead.
func (*TournamentUser) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{10}
}

func (x *TournamentUser) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TournamentUser) GetTournament() string {
	if x != nil {
		return x.Tournament
	}
	return ""
}

func (x *TournamentUser) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TournamentUser) GetInterval() TournamentInterval {
	if x != nil {
		return x.Interval
	}
	return TournamentInterval_DAILY
}

func (x *TournamentUser) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TournamentUser) GetRanking() uint64 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *TournamentUser) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TournamentUser) GetTournamentStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TournamentStartedAt
	}
	return nil
}

func (x *TournamentUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TournamentUser) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_tournament_proto protoreflect.FileDescriptor

var file_tournament_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f,
	0x52, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x05, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x15, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x5e, 0x0a, 0x18, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x48, 0x01, 0x52, 0x18, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xec, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2e, 0x0a,
	0x2a, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x91, 0x02, 0x0a, 0x16, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xa3, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x54, 0x4f,
	0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52,
	0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x22, 0xed, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1b,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3d, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3b,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4e, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x22, 0xf9, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0e,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xdf, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x54,
	0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f,
	0x52, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x07, 0x22, 0xac, 0x03, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x4c, 0x0a, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x2a, 0x47, 0x0a, 0x12, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c,
	0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x03, 0x32, 0xc6, 0x03, 0x0a, 0x11,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tournament_proto_rawDescOnce sync.Once
	file_tournament_proto_rawDescData = file_tournament_proto_rawDesc
)

func file_tournament_proto_rawDescGZIP() []byte {
	file_tournament_proto_rawDescOnce.Do(func() {
		file_tournament_proto_rawDescData = protoimpl.X.CompressGZIP(file_tournament_proto_rawDescData)
	})
	return file_tournament_proto_rawDescData
}

var file_tournament_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_tournament_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_tournament_proto_goTypes = []interface{}{
	(TournamentInterval)(0),                 // 0: api.TournamentInterval
	(CreateTournamentUserResponse_Error)(0), // 1: api.CreateTournamentUserResponse.Error
	(GetTournamentUserResponse_Error)(0),    // 2: api.GetTournamentUserResponse.Error
	(TournamentUserResponse_Error)(0),       // 3: api.TournamentUserResponse.Error
	(GetTournamentUsersResponse_Error)(0),   // 4: api.GetTournamentUsersResponse.Error
	(UpdateTournamentUserResponse_Error)(0), // 5: api.UpdateTournamentUserResponse.Error
	(*CreateTournamentUserRequest)(nil),     // 6: api.CreateTournamentUserRequest
	(*CreateTournamentUserResponse)(nil),    // 7: api.CreateTournamentUserResponse
	(*TournamentIntervalUserId)(nil),        // 8: api.TournamentIntervalUserId
	(*TournamentUserRequest)(nil),           // 9: api.TournamentUserRequest
	(*GetTournamentUserResponse)(nil),       // 10: api.GetTournamentUserResponse
	(*TournamentUserResponse)(nil),          // 11: api.TournamentUserResponse
	(*GetTournamentUsersRequest)(nil),       // 12: api.GetTournamentUsersRequest
	(*GetTournamentUsersResponse)(nil),      // 13: api.GetTournamentUsersResponse
	(*UpdateTournamentUserRequest)(nil),     // 14: api.UpdateTournamentUserRequest
	(*UpdateTournamentUserResponse)(nil),    // 15: api.UpdateTournamentUserResponse
	(*TournamentUser)(nil),                  // 16: api.TournamentUser
	(*structpb.Struct)(nil),                 // 17: google.protobuf.Struct
	(*Pagination)(nil),                      // 18: Pagination
	(*timestamppb.Timestamp)(nil),           // 19: google.protobuf.Timestamp
}
var file_tournament_proto_depIdxs = []int32{
	0,  // 0: api.CreateTournamentUserRequest.interval:type_name -> api.TournamentInterval
	17, // 1: api.CreateTournamentUserRequest.data:type_name -> google.protobuf.Struct
	1,  // 2: api.CreateTournamentUserResponse.error:type_name -> api.CreateTournamentUserResponse.Error
	0,  // 3: api.TournamentIntervalUserId.interval:type_name -> api.TournamentInterval
	8,  // 4: api.TournamentUserRequest.tournamentIntervalUserId:type_name -> api.TournamentIntervalUserId
	16, // 5: api.GetTournamentUserResponse.tournamentUser:type_name -> api.TournamentUser
	2,  // 6: api.GetTournamentUserResponse.error:type_name -> api.GetTournamentUserResponse.Error
	3,  // 7: api.TournamentUserResponse.error:type_name -> api.TournamentUserResponse.Error
	0,  // 8: api.GetTournamentUsersRequest.interval:type_name -> api.TournamentInterval
	18, // 9: api.GetTournamentUsersRequest.pagination:type_name -> Pagination
	16, // 10: api.GetTournamentUsersResponse.tournamentUsers:type_name -> api.TournamentUser
	4,  // 11: api.GetTournamentUsersResponse.error:type_name -> api.GetTournamentUsersResponse.Error
	9,  // 12: api.UpdateTournamentUserRequest.tournament:type_name -> api.TournamentUserRequest
	17, // 13: api.UpdateTournamentUserRequest.data:type_name -> google.protobuf.Struct
	5,  // 14: api.UpdateTournamentUserResponse.error:type_name -> api.UpdateTournamentUserResponse.Error
	0,  // 15: api.TournamentUser.interval:type_name -> api.TournamentInterval
	17, // 16: api.TournamentUser.data:type_name -> google.protobuf.Struct
	19, // 17: api.TournamentUser.tournamentStartedAt:type_name -> google.protobuf.Timestamp
	19, // 18: api.TournamentUser.createdAt:type_name -> google.protobuf.Timestamp
	19, // 19: api.TournamentUser.updatedAt:type_name -> google.protobuf.Timestamp
	6,  // 20: api.TournamentService.CreateTournamentUser:input_type -> api.CreateTournamentUserRequest
	9,  // 21: api.TournamentService.GetTournamentUser:input_type -> api.TournamentUserRequest
	12, // 22: api.TournamentService.GetTournamentUsers:input_type -> api.GetTournamentUsersRequest
	14, // 23: api.TournamentService.UpdateTournamentUser:input_type -> api.UpdateTournamentUserRequest
	9,  // 24: api.TournamentService.DeleteTournamentUser:input_type -> api.TournamentUserRequest
	7,  // 25: api.TournamentService.CreateTournamentUser:output_type -> api.CreateTournamentUserResponse
	10, // 26: api.TournamentService.GetTournamentUser:output_type -> api.GetTournamentUserResponse
	13, // 27: api.TournamentService.GetTournamentUsers:output_type -> api.GetTournamentUsersResponse
	15, // 28: api.TournamentService.UpdateTournamentUser:output_type -> api.UpdateTournamentUserResponse
	11, // 29: api.TournamentService.DeleteTournamentUser:output_type -> api.TournamentUserResponse
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_tournament_proto_init() }
func file_tournament_proto_init() {
	if File_tournament_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tournament_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTournamentUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTournamentUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentIntervalUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTournamentUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTournamentUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tournament_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tournament_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_tournament_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_tournament_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_tournament_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_tournament_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tournament_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tournament_proto_goTypes,
		DependencyIndexes: file_tournament_proto_depIdxs,
		EnumInfos:         file_tournament_proto_enumTypes,
		MessageInfos:      file_tournament_proto_msgTypes,
	}.Build()
	File_tournament_proto = out.File
	file_tournament_proto_rawDesc = nil
	file_tournament_proto_goTypes = nil
	file_tournament_proto_depIdxs = nil
}
