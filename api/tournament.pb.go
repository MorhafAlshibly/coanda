// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.3
// source: tournament.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Interval int32

const (
	Interval_DAILY    Interval = 0
	Interval_WEEKLY   Interval = 1
	Interval_MONTHLY  Interval = 2
	Interval_INFINITE Interval = 3
)

// Enum value maps for Interval.
var (
	Interval_name = map[int32]string{
		0: "DAILY",
		1: "WEEKLY",
		2: "MONTHLY",
		3: "INFINITE",
	}
	Interval_value = map[string]int32{
		"DAILY":    0,
		"WEEKLY":   1,
		"MONTHLY":  2,
		"INFINITE": 3,
	}
)

func (x Interval) Enum() *Interval {
	p := new(Interval)
	*p = x
	return p
}

func (x Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[0].Descriptor()
}

func (Interval) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[0]
}

func (x Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interval.Descriptor instead.
func (Interval) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{0}
}

type CreateTournamentUserResponse_Error int32

const (
	CreateTournamentUserResponse_NONE                      CreateTournamentUserResponse_Error = 0
	CreateTournamentUserResponse_TOURNAMENT_NAME_TOO_SHORT CreateTournamentUserResponse_Error = 1
	CreateTournamentUserResponse_USER_ID_REQUIRED          CreateTournamentUserResponse_Error = 2
	CreateTournamentUserResponse_ALREADY_EXISTS            CreateTournamentUserResponse_Error = 3
)

// Enum value maps for CreateTournamentUserResponse_Error.
var (
	CreateTournamentUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "TOURNAMENT_NAME_TOO_SHORT",
		2: "USER_ID_REQUIRED",
		3: "ALREADY_EXISTS",
	}
	CreateTournamentUserResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"TOURNAMENT_NAME_TOO_SHORT": 1,
		"USER_ID_REQUIRED":          2,
		"ALREADY_EXISTS":            3,
	}
)

func (x CreateTournamentUserResponse_Error) Enum() *CreateTournamentUserResponse_Error {
	p := new(CreateTournamentUserResponse_Error)
	*p = x
	return p
}

func (x CreateTournamentUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateTournamentUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[1].Descriptor()
}

func (CreateTournamentUserResponse_Error) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[1]
}

func (x CreateTournamentUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateTournamentUserResponse_Error.Descriptor instead.
func (CreateTournamentUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{1, 0}
}

type TournamentUserResponse_Error int32

const (
	TournamentUserResponse_NONE                      TournamentUserResponse_Error = 0
	TournamentUserResponse_INVALID                   TournamentUserResponse_Error = 1
	TournamentUserResponse_NOT_FOUND                 TournamentUserResponse_Error = 2
	TournamentUserResponse_TOURNAMENT_NAME_TOO_SHORT TournamentUserResponse_Error = 3
)

// Enum value maps for TournamentUserResponse_Error.
var (
	TournamentUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "INVALID",
		2: "NOT_FOUND",
		3: "TOURNAMENT_NAME_TOO_SHORT",
	}
	TournamentUserResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"INVALID":                   1,
		"NOT_FOUND":                 2,
		"TOURNAMENT_NAME_TOO_SHORT": 3,
	}
)

func (x TournamentUserResponse_Error) Enum() *TournamentUserResponse_Error {
	p := new(TournamentUserResponse_Error)
	*p = x
	return p
}

func (x TournamentUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TournamentUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[2].Descriptor()
}

func (TournamentUserResponse_Error) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[2]
}

func (x TournamentUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TournamentUserResponse_Error.Descriptor instead.
func (TournamentUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{4, 0}
}

type GetTournamentUsersResponse_Error int32

const (
	GetTournamentUsersResponse_NONE                      GetTournamentUsersResponse_Error = 0
	GetTournamentUsersResponse_TOURNAMENT_NAME_TOO_SHORT GetTournamentUsersResponse_Error = 1
)

// Enum value maps for GetTournamentUsersResponse_Error.
var (
	GetTournamentUsersResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "TOURNAMENT_NAME_TOO_SHORT",
	}
	GetTournamentUsersResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"TOURNAMENT_NAME_TOO_SHORT": 1,
	}
)

func (x GetTournamentUsersResponse_Error) Enum() *GetTournamentUsersResponse_Error {
	p := new(GetTournamentUsersResponse_Error)
	*p = x
	return p
}

func (x GetTournamentUsersResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTournamentUsersResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[3].Descriptor()
}

func (GetTournamentUsersResponse_Error) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[3]
}

func (x GetTournamentUsersResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTournamentUsersResponse_Error.Descriptor instead.
func (GetTournamentUsersResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{6, 0}
}

type DeleteTournamentUserResponse_Error int32

const (
	DeleteTournamentUserResponse_NONE                      DeleteTournamentUserResponse_Error = 0
	DeleteTournamentUserResponse_INVALID                   DeleteTournamentUserResponse_Error = 1
	DeleteTournamentUserResponse_NOT_FOUND                 DeleteTournamentUserResponse_Error = 2
	DeleteTournamentUserResponse_TOURNAMENT_NAME_TOO_SHORT DeleteTournamentUserResponse_Error = 3
)

// Enum value maps for DeleteTournamentUserResponse_Error.
var (
	DeleteTournamentUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "INVALID",
		2: "NOT_FOUND",
		3: "TOURNAMENT_NAME_TOO_SHORT",
	}
	DeleteTournamentUserResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"INVALID":                   1,
		"NOT_FOUND":                 2,
		"TOURNAMENT_NAME_TOO_SHORT": 3,
	}
)

func (x DeleteTournamentUserResponse_Error) Enum() *DeleteTournamentUserResponse_Error {
	p := new(DeleteTournamentUserResponse_Error)
	*p = x
	return p
}

func (x DeleteTournamentUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteTournamentUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[4].Descriptor()
}

func (DeleteTournamentUserResponse_Error) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[4]
}

func (x DeleteTournamentUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteTournamentUserResponse_Error.Descriptor instead.
func (DeleteTournamentUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{9, 0}
}

type CreateTournamentUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament string            `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
	Interval   Interval          `protobuf:"varint,2,opt,name=interval,proto3,enum=api.Interval" json:"interval,omitempty"`
	UserId     uint64            `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Score      *int64            `protobuf:"varint,4,opt,name=score,proto3,oneof" json:"score,omitempty"`
	Data       map[string]string `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateTournamentUserRequest) Reset() {
	*x = CreateTournamentUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentUserRequest) ProtoMessage() {}

func (x *CreateTournamentUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentUserRequest.ProtoReflect.Descriptor instead.
func (*CreateTournamentUserRequest) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTournamentUserRequest) GetTournament() string {
	if x != nil {
		return x.Tournament
	}
	return ""
}

func (x *CreateTournamentUserRequest) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_DAILY
}

func (x *CreateTournamentUserRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateTournamentUserRequest) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CreateTournamentUserRequest) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateTournamentUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      string                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Error   CreateTournamentUserResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.CreateTournamentUserResponse_Error" json:"error,omitempty"`
}

func (x *CreateTournamentUserResponse) Reset() {
	*x = CreateTournamentUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentUserResponse) ProtoMessage() {}

func (x *CreateTournamentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentUserResponse.ProtoReflect.Descriptor instead.
func (*CreateTournamentUserResponse) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTournamentUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateTournamentUserResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateTournamentUserResponse) GetError() CreateTournamentUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateTournamentUserResponse_NONE
}

type TournamentIntervalUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament string   `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
	Interval   Interval `protobuf:"varint,2,opt,name=interval,proto3,enum=api.Interval" json:"interval,omitempty"`
	UserId     uint64   `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *TournamentIntervalUserId) Reset() {
	*x = TournamentIntervalUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentIntervalUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentIntervalUserId) ProtoMessage() {}

func (x *TournamentIntervalUserId) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentIntervalUserId.ProtoReflect.Descriptor instead.
func (*TournamentIntervalUserId) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{2}
}

func (x *TournamentIntervalUserId) GetTournament() string {
	if x != nil {
		return x.Tournament
	}
	return ""
}

func (x *TournamentIntervalUserId) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_DAILY
}

func (x *TournamentIntervalUserId) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetTournamentUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       *string                   `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	TournamentIntervalUserId *TournamentIntervalUserId `protobuf:"bytes,2,opt,name=tournamentIntervalUserId,proto3,oneof" json:"tournamentIntervalUserId,omitempty"`
}

func (x *GetTournamentUserRequest) Reset() {
	*x = GetTournamentUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentUserRequest) ProtoMessage() {}

func (x *GetTournamentUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentUserRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentUserRequest) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{3}
}

func (x *GetTournamentUserRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GetTournamentUserRequest) GetTournamentIntervalUserId() *TournamentIntervalUserId {
	if x != nil {
		return x.TournamentIntervalUserId
	}
	return nil
}

type TournamentUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool                         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	TournamentUser *TournamentUser              `protobuf:"bytes,2,opt,name=tournamentUser,proto3" json:"tournamentUser,omitempty"`
	Error          TournamentUserResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.TournamentUserResponse_Error" json:"error,omitempty"`
}

func (x *TournamentUserResponse) Reset() {
	*x = TournamentUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentUserResponse) ProtoMessage() {}

func (x *TournamentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentUserResponse.ProtoReflect.Descriptor instead.
func (*TournamentUserResponse) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{4}
}

func (x *TournamentUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TournamentUserResponse) GetTournamentUser() *TournamentUser {
	if x != nil {
		return x.TournamentUser
	}
	return nil
}

func (x *TournamentUserResponse) GetError() TournamentUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return TournamentUserResponse_NONE
}

type GetTournamentUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament *string `protobuf:"bytes,1,opt,name=tournament,proto3,oneof" json:"tournament,omitempty"`
	Max        *uint64 `protobuf:"varint,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
	Page       *uint64 `protobuf:"varint,3,opt,name=page,proto3,oneof" json:"page,omitempty"`
}

func (x *GetTournamentUsersRequest) Reset() {
	*x = GetTournamentUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentUsersRequest) ProtoMessage() {}

func (x *GetTournamentUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentUsersRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentUsersRequest) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{5}
}

func (x *GetTournamentUsersRequest) GetTournament() string {
	if x != nil && x.Tournament != nil {
		return *x.Tournament
	}
	return ""
}

func (x *GetTournamentUsersRequest) GetMax() uint64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *GetTournamentUsersRequest) GetPage() uint64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type GetTournamentUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool                             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	TournamentUsers []*TournamentUser                `protobuf:"bytes,2,rep,name=tournamentUsers,proto3" json:"tournamentUsers,omitempty"`
	Error           GetTournamentUsersResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.GetTournamentUsersResponse_Error" json:"error,omitempty"`
}

func (x *GetTournamentUsersResponse) Reset() {
	*x = GetTournamentUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentUsersResponse) ProtoMessage() {}

func (x *GetTournamentUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentUsersResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentUsersResponse) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{6}
}

func (x *GetTournamentUsersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTournamentUsersResponse) GetTournamentUsers() []*TournamentUser {
	if x != nil {
		return x.TournamentUsers
	}
	return nil
}

func (x *GetTournamentUsersResponse) GetError() GetTournamentUsersResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetTournamentUsersResponse_NONE
}

type UpdateTournamentUserScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentUser *GetTournamentUserRequest `protobuf:"bytes,1,opt,name=tournamentUser,proto3" json:"tournamentUser,omitempty"`
	ScoreOffset    int64                     `protobuf:"varint,2,opt,name=scoreOffset,proto3" json:"scoreOffset,omitempty"`
}

func (x *UpdateTournamentUserScoreRequest) Reset() {
	*x = UpdateTournamentUserScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentUserScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentUserScoreRequest) ProtoMessage() {}

func (x *UpdateTournamentUserScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentUserScoreRequest.ProtoReflect.Descriptor instead.
func (*UpdateTournamentUserScoreRequest) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTournamentUserScoreRequest) GetTournamentUser() *GetTournamentUserRequest {
	if x != nil {
		return x.TournamentUser
	}
	return nil
}

func (x *UpdateTournamentUserScoreRequest) GetScoreOffset() int64 {
	if x != nil {
		return x.ScoreOffset
	}
	return 0
}

type UpdateTournamentUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentUser *GetTournamentUserRequest `protobuf:"bytes,1,opt,name=tournamentUser,proto3" json:"tournamentUser,omitempty"`
	Data           map[string]string         `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateTournamentUserDataRequest) Reset() {
	*x = UpdateTournamentUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentUserDataRequest) ProtoMessage() {}

func (x *UpdateTournamentUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentUserDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateTournamentUserDataRequest) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTournamentUserDataRequest) GetTournamentUser() *GetTournamentUserRequest {
	if x != nil {
		return x.TournamentUser
	}
	return nil
}

func (x *UpdateTournamentUserDataRequest) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteTournamentUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   DeleteTournamentUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.DeleteTournamentUserResponse_Error" json:"error,omitempty"`
}

func (x *DeleteTournamentUserResponse) Reset() {
	*x = DeleteTournamentUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTournamentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTournamentUserResponse) ProtoMessage() {}

func (x *DeleteTournamentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTournamentUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteTournamentUserResponse) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteTournamentUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTournamentUserResponse) GetError() DeleteTournamentUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return DeleteTournamentUserResponse_NONE
}

type TournamentUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tournament string            `protobuf:"bytes,2,opt,name=tournament,proto3" json:"tournament,omitempty"`
	Interval   Interval          `protobuf:"varint,3,opt,name=interval,proto3,enum=api.Interval" json:"interval,omitempty"`
	UserId     uint64            `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Score      int64             `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Rank       uint64            `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
	Data       map[string]string `protobuf:"bytes,7,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TournamentUser) Reset() {
	*x = TournamentUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentUser) ProtoMessage() {}

func (x *TournamentUser) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentUser.ProtoReflect.Descriptor instead.
func (*TournamentUser) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{10}
}

func (x *TournamentUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentUser) GetTournament() string {
	if x != nil {
		return x.Tournament
	}
	return ""
}

func (x *TournamentUser) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_DAILY
}

func (x *TournamentUser) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TournamentUser) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TournamentUser) GetRank() uint64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TournamentUser) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_tournament_proto protoreflect.FileDescriptor

var file_tournament_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x9e, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f,
	0x52, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x22, 0x7d,
	0x0a, 0x18, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x5e, 0x0a, 0x18, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x48, 0x01, 0x52, 0x18, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x16, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4c,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x22, 0x90, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x22,
	0xe4, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e,
	0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f,
	0x52, 0x54, 0x10, 0x03, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x2a, 0x3c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c,
	0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x10, 0x03, 0x32, 0xb2,
	0x04, 0x0a, 0x11, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tournament_proto_rawDescOnce sync.Once
	file_tournament_proto_rawDescData = file_tournament_proto_rawDesc
)

func file_tournament_proto_rawDescGZIP() []byte {
	file_tournament_proto_rawDescOnce.Do(func() {
		file_tournament_proto_rawDescData = protoimpl.X.CompressGZIP(file_tournament_proto_rawDescData)
	})
	return file_tournament_proto_rawDescData
}

var file_tournament_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_tournament_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_tournament_proto_goTypes = []interface{}{
	(Interval)(0),                            // 0: api.Interval
	(CreateTournamentUserResponse_Error)(0),  // 1: api.CreateTournamentUserResponse.Error
	(TournamentUserResponse_Error)(0),        // 2: api.TournamentUserResponse.Error
	(GetTournamentUsersResponse_Error)(0),    // 3: api.GetTournamentUsersResponse.Error
	(DeleteTournamentUserResponse_Error)(0),  // 4: api.DeleteTournamentUserResponse.Error
	(*CreateTournamentUserRequest)(nil),      // 5: api.CreateTournamentUserRequest
	(*CreateTournamentUserResponse)(nil),     // 6: api.CreateTournamentUserResponse
	(*TournamentIntervalUserId)(nil),         // 7: api.TournamentIntervalUserId
	(*GetTournamentUserRequest)(nil),         // 8: api.GetTournamentUserRequest
	(*TournamentUserResponse)(nil),           // 9: api.TournamentUserResponse
	(*GetTournamentUsersRequest)(nil),        // 10: api.GetTournamentUsersRequest
	(*GetTournamentUsersResponse)(nil),       // 11: api.GetTournamentUsersResponse
	(*UpdateTournamentUserScoreRequest)(nil), // 12: api.UpdateTournamentUserScoreRequest
	(*UpdateTournamentUserDataRequest)(nil),  // 13: api.UpdateTournamentUserDataRequest
	(*DeleteTournamentUserResponse)(nil),     // 14: api.DeleteTournamentUserResponse
	(*TournamentUser)(nil),                   // 15: api.TournamentUser
	nil,                                      // 16: api.CreateTournamentUserRequest.DataEntry
	nil,                                      // 17: api.UpdateTournamentUserDataRequest.DataEntry
	nil,                                      // 18: api.TournamentUser.DataEntry
}
var file_tournament_proto_depIdxs = []int32{
	0,  // 0: api.CreateTournamentUserRequest.interval:type_name -> api.Interval
	16, // 1: api.CreateTournamentUserRequest.data:type_name -> api.CreateTournamentUserRequest.DataEntry
	1,  // 2: api.CreateTournamentUserResponse.error:type_name -> api.CreateTournamentUserResponse.Error
	0,  // 3: api.TournamentIntervalUserId.interval:type_name -> api.Interval
	7,  // 4: api.GetTournamentUserRequest.tournamentIntervalUserId:type_name -> api.TournamentIntervalUserId
	15, // 5: api.TournamentUserResponse.tournamentUser:type_name -> api.TournamentUser
	2,  // 6: api.TournamentUserResponse.error:type_name -> api.TournamentUserResponse.Error
	15, // 7: api.GetTournamentUsersResponse.tournamentUsers:type_name -> api.TournamentUser
	3,  // 8: api.GetTournamentUsersResponse.error:type_name -> api.GetTournamentUsersResponse.Error
	8,  // 9: api.UpdateTournamentUserScoreRequest.tournamentUser:type_name -> api.GetTournamentUserRequest
	8,  // 10: api.UpdateTournamentUserDataRequest.tournamentUser:type_name -> api.GetTournamentUserRequest
	17, // 11: api.UpdateTournamentUserDataRequest.data:type_name -> api.UpdateTournamentUserDataRequest.DataEntry
	4,  // 12: api.DeleteTournamentUserResponse.error:type_name -> api.DeleteTournamentUserResponse.Error
	0,  // 13: api.TournamentUser.interval:type_name -> api.Interval
	18, // 14: api.TournamentUser.data:type_name -> api.TournamentUser.DataEntry
	5,  // 15: api.TournamentService.CreateTournamentUser:input_type -> api.CreateTournamentUserRequest
	8,  // 16: api.TournamentService.GetTournamentUser:input_type -> api.GetTournamentUserRequest
	10, // 17: api.TournamentService.GetTournamentUsers:input_type -> api.GetTournamentUsersRequest
	12, // 18: api.TournamentService.UpdateTournamentUserScore:input_type -> api.UpdateTournamentUserScoreRequest
	13, // 19: api.TournamentService.UpdateTournamentUserData:input_type -> api.UpdateTournamentUserDataRequest
	8,  // 20: api.TournamentService.DeleteTournamentUser:input_type -> api.GetTournamentUserRequest
	6,  // 21: api.TournamentService.CreateTournamentUser:output_type -> api.CreateTournamentUserResponse
	9,  // 22: api.TournamentService.GetTournamentUser:output_type -> api.TournamentUserResponse
	11, // 23: api.TournamentService.GetTournamentUsers:output_type -> api.GetTournamentUsersResponse
	9,  // 24: api.TournamentService.UpdateTournamentUserScore:output_type -> api.TournamentUserResponse
	9,  // 25: api.TournamentService.UpdateTournamentUserData:output_type -> api.TournamentUserResponse
	14, // 26: api.TournamentService.DeleteTournamentUser:output_type -> api.DeleteTournamentUserResponse
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_tournament_proto_init() }
func file_tournament_proto_init() {
	if File_tournament_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tournament_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTournamentUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTournamentUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentIntervalUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTournamentUserScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTournamentUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTournamentUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tournament_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tournament_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_tournament_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tournament_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tournament_proto_goTypes,
		DependencyIndexes: file_tournament_proto_depIdxs,
		EnumInfos:         file_tournament_proto_enumTypes,
		MessageInfos:      file_tournament_proto_msgTypes,
	}.Build()
	File_tournament_proto = out.File
	file_tournament_proto_rawDesc = nil
	file_tournament_proto_goTypes = nil
	file_tournament_proto_depIdxs = nil
}
