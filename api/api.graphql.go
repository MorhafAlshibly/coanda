// Code generated by proroc-gen-graphql, DO NOT EDIT.
package api

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	gql_ptypes_timestamppb "github.com/ysugimoto/grpc-graphql-gateway/ptypes/timestamppb"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_Items                        *graphql.Object      // message Items in item.proto
	gql__type_Item_DataEntry               *graphql.Object      // message Item.DataEntry in item.proto
	gql__type_Item                         *graphql.Object      // message Item in item.proto
	gql__type_GetItemsRequest              *graphql.Object      // message GetItemsRequest in item.proto
	gql__type_GetItemRequest               *graphql.Object      // message GetItemRequest in item.proto
	gql__type_CreateItemRequest_DataEntry  *graphql.Object      // message CreateItemRequest.DataEntry in item.proto
	gql__type_CreateItemRequest            *graphql.Object      // message CreateItemRequest in item.proto
	gql__input_Items                       *graphql.InputObject // message Items in item.proto
	gql__input_Item_DataEntry              *graphql.InputObject // message Item.DataEntry in item.proto
	gql__input_Item                        *graphql.InputObject // message Item in item.proto
	gql__input_GetItemsRequest             *graphql.InputObject // message GetItemsRequest in item.proto
	gql__input_GetItemRequest              *graphql.InputObject // message GetItemRequest in item.proto
	gql__input_CreateItemRequest_DataEntry *graphql.InputObject // message CreateItemRequest.DataEntry in item.proto
	gql__input_CreateItemRequest           *graphql.InputObject // message CreateItemRequest in item.proto
)

func Gql__type_Items() *graphql.Object {
	if gql__type_Items == nil {
		gql__type_Items = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_Items",
			Fields: graphql.Fields{
				"items": &graphql.Field{
					Type: graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(Gql__type_Item()))),
				},
			},
		})
	}
	return gql__type_Items
}

func Gql__type_Item_DataEntry() *graphql.Object {
	if gql__type_Item_DataEntry == nil {
		gql__type_Item_DataEntry = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_Item_DataEntry",
			Fields: graphql.Fields{
				"key": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"value": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_Item_DataEntry
}

func Gql__type_Item() *graphql.Object {
	if gql__type_Item == nil {
		gql__type_Item = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_Item",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"type": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"data": &graphql.Field{
					Type: graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(Gql__type_Item_DataEntry()))),
				},
				"expire": &graphql.Field{
					Type: graphql.NewNonNull(gql_ptypes_timestamppb.Gql__type_Timestamp()),
				},
			},
		})
	}
	return gql__type_Item
}

func Gql__type_GetItemsRequest() *graphql.Object {
	if gql__type_GetItemsRequest == nil {
		gql__type_GetItemsRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_GetItemsRequest",
			Fields: graphql.Fields{
				"type": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"max": &graphql.Field{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"page": &graphql.Field{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__type_GetItemsRequest
}

func Gql__type_GetItemRequest() *graphql.Object {
	if gql__type_GetItemRequest == nil {
		gql__type_GetItemRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_GetItemRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"type": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_GetItemRequest
}

func Gql__type_CreateItemRequest_DataEntry() *graphql.Object {
	if gql__type_CreateItemRequest_DataEntry == nil {
		gql__type_CreateItemRequest_DataEntry = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_CreateItemRequest_DataEntry",
			Fields: graphql.Fields{
				"key": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"value": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_CreateItemRequest_DataEntry
}

func Gql__type_CreateItemRequest() *graphql.Object {
	if gql__type_CreateItemRequest == nil {
		gql__type_CreateItemRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_CreateItemRequest",
			Fields: graphql.Fields{
				"type": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"data": &graphql.Field{
					Type: graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(Gql__type_CreateItemRequest_DataEntry()))),
				},
				"expire": &graphql.Field{
					Type: graphql.NewNonNull(gql_ptypes_timestamppb.Gql__type_Timestamp()),
				},
			},
		})
	}
	return gql__type_CreateItemRequest
}

func Gql__input_Items() *graphql.InputObject {
	if gql__input_Items == nil {
		gql__input_Items = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_Items",
			Fields: graphql.InputObjectConfigFieldMap{
				"items": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(Gql__input_Item()))),
				},
			},
		})
	}
	return gql__input_Items
}

func Gql__input_Item_DataEntry() *graphql.InputObject {
	if gql__input_Item_DataEntry == nil {
		gql__input_Item_DataEntry = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_Item_DataEntry",
			Fields: graphql.InputObjectConfigFieldMap{
				"key": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_Item_DataEntry
}

func Gql__input_Item() *graphql.InputObject {
	if gql__input_Item == nil {
		gql__input_Item = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_Item",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"type": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"data": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(Gql__input_Item_DataEntry()))),
				},
				"expire": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(gql_ptypes_timestamppb.Gql__input_Timestamp()),
				},
			},
		})
	}
	return gql__input_Item
}

func Gql__input_GetItemsRequest() *graphql.InputObject {
	if gql__input_GetItemsRequest == nil {
		gql__input_GetItemsRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_GetItemsRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"type": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"max": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"page": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__input_GetItemsRequest
}

func Gql__input_GetItemRequest() *graphql.InputObject {
	if gql__input_GetItemRequest == nil {
		gql__input_GetItemRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_GetItemRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"type": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_GetItemRequest
}

func Gql__input_CreateItemRequest_DataEntry() *graphql.InputObject {
	if gql__input_CreateItemRequest_DataEntry == nil {
		gql__input_CreateItemRequest_DataEntry = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_CreateItemRequest_DataEntry",
			Fields: graphql.InputObjectConfigFieldMap{
				"key": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"value": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_CreateItemRequest_DataEntry
}

func Gql__input_CreateItemRequest() *graphql.InputObject {
	if gql__input_CreateItemRequest == nil {
		gql__input_CreateItemRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_CreateItemRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"type": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"data": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(Gql__input_CreateItemRequest_DataEntry()))),
				},
				"expire": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(gql_ptypes_timestamppb.Gql__input_Timestamp()),
				},
			},
		})
	}
	return gql__input_CreateItemRequest
}

// graphql__resolver_ItemService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_ItemService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_ItemService creates pointer of service struct
func new_graphql_resolver_ItemService(conn *grpc.ClientConn) *graphql__resolver_ItemService {
	return &graphql__resolver_ItemService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_ItemService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_ItemService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"getItem": &graphql.Field{
			Type: Gql__type_Item(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"type": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetItemRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for getItem")
				}
				client := NewItemServiceClient(conn)
				resp, err := client.GetItem(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetItem")
				}
				return resp, nil
			},
		},
		"getItems": &graphql.Field{
			Type: Gql__type_Items(),
			Args: graphql.FieldConfigArgument{
				"type": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"max": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"page": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetItemsRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for getItems")
				}
				client := NewItemServiceClient(conn)
				resp, err := client.GetItems(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetItems")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_ItemService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"createItem": &graphql.Field{
			Type: Gql__type_Item(),
			Args: graphql.FieldConfigArgument{
				"type": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"data": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(Gql__input_CreateItemRequest_DataEntry()))),
				},
				"expire": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(gql_ptypes_timestamppb.Gql__input_Timestamp()),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req CreateItemRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for createItem")
				}
				client := NewItemServiceClient(conn)
				resp, err := client.CreateItem(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC CreateItem")
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterItemServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterItemServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterItemServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
//	service ItemService {
//	   option (graphql.service) = {
//	       host: "host:port"
//	       insecure: true or false
//	   };
//
//	   ...with RPC definitions
//	}
func RegisterItemServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_ItemService(conn))
}
