extend type Query {
	" Get a team by id, name, or member. "
	GetTeam(input: GetTeamRequest): GetTeamResponse!
	" Get a list of teams based on pagination options. "
	GetTeams(input: GetTeamsRequest): GetTeamsResponse!
	" Get a team member by id or user ID. "
	GetTeamMember(input: TeamMemberRequest): GetTeamMemberResponse!
	" Search for teams based on a query string. "
	SearchTeams(input: SearchTeamsRequest): SearchTeamsResponse!
}

extend type Mutation {
	" Create a new team with the specified name, firstMemberId, score, data, and first member data. "
	CreateTeam(input: CreateTeamRequest): CreateTeamResponse!
	" Update an existing team's data and/or score. "
	UpdateTeam(input: UpdateTeamRequest): UpdateTeamResponse!
	" Delete a team by id, name, or member. "
	DeleteTeam(input: TeamRequest): TeamResponse!
	" Join a team with the specified team, user id, and data. "
	JoinTeam(input: JoinTeamRequest): JoinTeamResponse!
	" Leave a team by id or user id. "
	LeaveTeam(input: TeamMemberRequest): LeaveTeamResponse!
	" Update a team member's data. "
	UpdateTeamMember(input: UpdateTeamMemberRequest): UpdateTeamMemberResponse!
}

" Input object for creating a new team. "
input CreateTeamRequest {
	name: String!
	score: Int64
	firstMemberUserId: Uint64!
	data: Struct!
	firstMemberData: Struct!
}

" Response object for creating a team. "
type CreateTeamResponse {
	success: Boolean!
	id: Uint64
	error: CreateTeamError!
}

" Possible errors when creating a team. "
enum CreateTeamError {
	NONE
	NAME_TOO_SHORT
	NAME_TOO_LONG
	FIRST_MEMBER_USER_ID_REQUIRED
	DATA_REQUIRED
	FIRST_MEMBER_DATA_REQUIRED
	NAME_TAKEN
	FIRST_MEMBER_ALREADY_IN_A_TEAM
}

" Input object for requesting a team by id, name or member. "
input TeamRequest {
	id: Uint64
	name: String
	member: TeamMemberRequest
}

" Input object for getting a team with pagination options for the team members. "
input GetTeamRequest {
	team: TeamRequest!
	pagination: Pagination
}

" Response object for team-related operations. "
type GetTeamResponse {
	success: Boolean!
	team: Team
	error: GetTeamError!
}

" Possible errors when getting a team. "
enum GetTeamError {
	NONE
	NO_FIELD_SPECIFIED
	NAME_TOO_SHORT
	NAME_TOO_LONG
	NOT_FOUND
}

" Input object for getting a list of teams and their members. "
input GetTeamsRequest {
	pagination: Pagination
	memberPagination: Pagination
}

" Response object for getting a list of teams and their members. "
type GetTeamsResponse {
	success: Boolean!
	teams: [Team]!
}

" Input object for requesting a team member by id or user id. "
input TeamMemberRequest {
	id: Uint64
	userId: Uint64
}

" Response object for getting a team member. "
type GetTeamMemberResponse {
	success: Boolean!
	member: TeamMember
	error: GetTeamMemberError!
}

" Possible errors when getting a team member. "
enum GetTeamMemberError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
}

" Input object for searching for teams based on a query string. "
input SearchTeamsRequest {
	query: String!
	pagination: Pagination
	memberPagination: Pagination
}

" Response object for searching for teams. "
type SearchTeamsResponse {
	success: Boolean!
	teams: [Team]!
	error: SearchTeamsError!
}

" Possible errors when searching for teams. "
enum SearchTeamsError {
	NONE
	QUERY_TOO_SHORT
	QUERY_TOO_LONG
}

" Input object for deleting a team. "
input UpdateTeamRequest {
	team: TeamRequest!
	data: Struct
	score: Int64
	incrementScore: Boolean
}

" Response object for updating a team. "
type UpdateTeamResponse {
	success: Boolean!
	error: UpdateTeamError!
}

" Possible errors when updating a team. "
enum UpdateTeamError {
	NONE
	NO_FIELD_SPECIFIED
	NAME_TOO_SHORT
	NAME_TOO_LONG
	NO_UPDATE_SPECIFIED
	INCREMENT_SCORE_NOT_SPECIFIED
	NOT_FOUND
}

" Response object for a team-related operation. "
type TeamResponse {
	success: Boolean!
	error: TeamError!
}

" Possible errors when deleting a team. "
enum TeamError {
	NONE
	NO_FIELD_SPECIFIED
	NAME_TOO_SHORT
	NAME_TOO_LONG
	NOT_FOUND
}

" Input object for deleting a team. "
input JoinTeamRequest {
	team: TeamRequest!
	userId: Uint64!
	data: Struct!
}

" Response object for joining a team. "
type JoinTeamResponse {
	success: Boolean!
	error: JoinTeamError!
}

" Possible errors when joining a team. "
enum JoinTeamError {
	NONE
	NO_FIELD_SPECIFIED
	NAME_TOO_SHORT
	NAME_TOO_LONG
	USER_ID_REQUIRED
	DATA_REQUIRED
	NOT_FOUND
	TEAM_FULL
	ALREADY_IN_A_TEAM
}

" Response object for leaving a team. "
type LeaveTeamResponse {
	success: Boolean!
	error: LeaveTeamError!
}

" Possible errors when leaving a team. "
enum LeaveTeamError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
}

" Input object for updating a team member. "
input UpdateTeamMemberRequest {
	member: TeamMemberRequest!
	data: Struct!
}

" Response object for updating a team member. "
type UpdateTeamMemberResponse {
	success: Boolean!
	error: UpdateTeamMemberError!
}

" Possible errors when updating a team member. "
enum UpdateTeamMemberError {
	NONE
	NO_FIELD_SPECIFIED
	DATA_REQUIRED
	NOT_FOUND
}

" A team in the system. The ranking is based on the score highest to lowest. "
type Team {
	id: Uint64!
	name: String!
	score: Int64!
	ranking: Uint64!
	members: [TeamMember]!
	data: Struct!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}

" A member of a team. "
type TeamMember {
	id: Uint64!
	userId: Uint64!
	teamId: Uint64!
	data: Struct!
	joinedAt: Timestamp!
	updatedAt: Timestamp!
}
