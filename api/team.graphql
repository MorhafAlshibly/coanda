extend type Query {
	GetTeam(input: TeamRequest!): GetTeamResponse!
	GetTeams(input: Pagination!): GetTeamsResponse!
	GetTeamMember(input: GetTeamMemberRequest!): GetTeamMemberResponse!
	GetTeamMembers(input: GetTeamMembersRequest!): GetTeamMembersResponse!
	SearchTeams(input: SearchTeamsRequest!): SearchTeamsResponse!
}

extend type Mutation {
	CreateTeam(input: CreateTeamRequest!): CreateTeamResponse!
	UpdateTeam(input: UpdateTeamRequest!): UpdateTeamResponse!
	DeleteTeam(input: TeamRequest!): TeamResponse!
	JoinTeam(input: JoinTeamRequest!): JoinTeamResponse!
	LeaveTeam(input: LeaveTeamRequest!): LeaveTeamResponse!
	UpdateTeamMember(input: UpdateTeamMemberRequest!): UpdateTeamMemberResponse!
}

input CreateTeamRequest {
	name: String!
	owner: Uint64!
	score: Int64
	data: Struct!
	ownerData: Struct!
}

type CreateTeamResponse {
	success: Boolean!
	error: CreateTeamError!
}

enum CreateTeamError {
	NONE
	OWNER_REQUIRED
	NAME_TOO_SHORT
	NAME_TOO_LONG
	DATA_REQUIRED
	OWNER_DATA_REQUIRED
	NAME_TAKEN
	OWNER_OWNS_ANOTHER_TEAM
	OWNER_ALREADY_IN_TEAM
}

input TeamRequest {
	name: String
	owner: Uint64
	member: Uint64
}

type TeamResponse {
	success: Boolean!
	error: TeamError!
}

enum TeamError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
}

type GetTeamResponse {
	success: Boolean!
	team: Team
	error: GetTeamError!
}

enum GetTeamError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
}

type GetTeamsResponse {
	success: Boolean!
	teams: [Team]!
}

input GetTeamMemberRequest {
	userId: Uint64!
}

type GetTeamMemberResponse {
	success: Boolean!
	teamMember: TeamMember
	error: GetTeamMemberError!
}

enum GetTeamMemberError {
	NONE
	USER_ID_REQUIRED
	NOT_FOUND
}

input GetTeamMembersRequest {
	team: TeamRequest!
	pagination: Pagination
}

type GetTeamMembersResponse {
	success: Boolean!
	teamMembers: [TeamMember]!
	error: GetTeamMembersError!
}

enum GetTeamMembersError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
}

input SearchTeamsRequest {
	query: String!
	pagination: Pagination
}

type SearchTeamsResponse {
	success: Boolean!
	teams: [Team]!
	error: SearchTeamsError!
}

enum SearchTeamsError {
	NONE
	QUERY_TOO_SHORT
	QUERY_TOO_LONG
}

input UpdateTeamRequest {
	team: TeamRequest!
	data: Struct
	score: Int64
	incrementScore: Boolean
}

type UpdateTeamResponse {
	success: Boolean!
	error: UpdateTeamError!
}

enum UpdateTeamError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
	NO_UPDATE_SPECIFIED
	INCREMENT_SCORE_NOT_SPECIFIED
}

input JoinTeamRequest {
	team: TeamRequest!
	userId: Uint64!
	data: Struct!
}

type JoinTeamResponse {
	success: Boolean!
	error: JoinTeamError!
}

enum JoinTeamError {
	NONE
	NO_FIELD_SPECIFIED
	USER_ID_REQUIRED
	DATA_REQUIRED
	NAME_TOO_SHORT
	NAME_TOO_LONG
	NOT_FOUND
	TEAM_FULL
	ALREADY_IN_A_TEAM
}

input LeaveTeamRequest {
	userId: Uint64!
}

type LeaveTeamResponse {
	success: Boolean!
	error: LeaveTeamError!
}

enum LeaveTeamError {
	NONE
	USER_ID_REQUIRED
	NOT_IN_TEAM
	MEMBER_IS_OWNER
}

input UpdateTeamMemberRequest {
	userId: Uint64!
	data: Struct!
}

type UpdateTeamMemberResponse {
	success: Boolean!
	error: UpdateTeamMemberError!
}

enum UpdateTeamMemberError {
	NONE
	USER_ID_REQUIRED
	DATA_REQUIRED
	NOT_FOUND
}

type Team {
	name: String!
	owner: Uint64!
	score: Int64!
	ranking: Uint64!
	data: Struct!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}

type TeamMember {
	team: String!
	userId: Uint64!
	data: Struct!
	joinedAt: Timestamp!
	updatedAt: Timestamp!
}
