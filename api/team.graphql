extend type Query {
	" Get a team by name, owner, or member. "
	GetTeam(input: TeamRequest!): GetTeamResponse!
	" Get a list of teams based on pagination options. "
	GetTeams(input: Pagination!): GetTeamsResponse!
	" Get a team member by user ID. "
	GetTeamMember(input: GetTeamMemberRequest!): GetTeamMemberResponse!
	" Get a list of team members in a team, using the team object and pagination options. "
	GetTeamMembers(input: GetTeamMembersRequest!): GetTeamMembersResponse!
	" Search for teams based on a query string. "
	SearchTeams(input: SearchTeamsRequest!): SearchTeamsResponse!
}

extend type Mutation {
	" Create a new team with the specified name, owner, score, data, and owner data. "
	CreateTeam(input: CreateTeamRequest!): CreateTeamResponse!
	" Update an existing team with the specified name, owner, data, and score. "
	UpdateTeam(input: UpdateTeamRequest!): UpdateTeamResponse!
	" Delete a team by nam, owner, or member. "
	DeleteTeam(input: TeamRequest!): TeamResponse!
	" Join a team with the specified team, user ID, and data. "
	JoinTeam(input: JoinTeamRequest!): JoinTeamResponse!
	" Leave a team by user ID. "
	LeaveTeam(input: LeaveTeamRequest!): LeaveTeamResponse!
	" Update a team member with the specified user ID and data. "
	UpdateTeamMember(input: UpdateTeamMemberRequest!): UpdateTeamMemberResponse!
}

" Input object for creating a new team. "
input CreateTeamRequest {
	name: String!
	owner: Uint64!
	score: Int64
	data: Struct!
	ownerData: Struct!
}

" Response object for creating a team. "
type CreateTeamResponse {
	success: Boolean!
	error: CreateTeamError!
}

" Possible errors when creating a team. "
enum CreateTeamError {
	NONE
	OWNER_REQUIRED
	NAME_TOO_SHORT
	NAME_TOO_LONG
	DATA_REQUIRED
	OWNER_DATA_REQUIRED
	NAME_TAKEN
	OWNER_OWNS_ANOTHER_TEAM
	OWNER_ALREADY_IN_TEAM
}

" Input object for requesting a team by name, owner, or member. "
input TeamRequest {
	name: String
	owner: Uint64
	member: Uint64
}

" Response object for requesting a team. "
type TeamResponse {
	success: Boolean!
	error: TeamError!
}

" Possible errors when getting a team. "
enum TeamError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
}

" Response object for team-related operations. "
type GetTeamResponse {
	success: Boolean!
	team: Team
	error: GetTeamError!
}

" Possible errors when getting a team. "
enum GetTeamError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
}

" Response object for getting a list of teams. "
type GetTeamsResponse {
	success: Boolean!
	teams: [Team]!
}

" Response object for getting a team member. "
input GetTeamMemberRequest {
	userId: Uint64!
}

" Response object for getting a team member. "
type GetTeamMemberResponse {
	success: Boolean!
	teamMember: TeamMember
	error: GetTeamMemberError!
}

" Possible errors when getting a team member. "
enum GetTeamMemberError {
	NONE
	USER_ID_REQUIRED
	NOT_FOUND
}

" Input object for requesting a list of team members in a team. "
input GetTeamMembersRequest {
	team: TeamRequest!
	pagination: Pagination
}

" Response object for getting a list of team members. "
type GetTeamMembersResponse {
	success: Boolean!
	teamMembers: [TeamMember]!
	error: GetTeamMembersError!
}

" Possible errors when getting a team member. "
enum GetTeamMembersError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
}

" Input object for searching for teams based on a query string. "
input SearchTeamsRequest {
	query: String!
	pagination: Pagination
}

" Response object for searching for teams. "
type SearchTeamsResponse {
	success: Boolean!
	teams: [Team]!
	error: SearchTeamsError!
}

" Possible errors when searching for teams. "
enum SearchTeamsError {
	NONE
	QUERY_TOO_SHORT
	QUERY_TOO_LONG
}

" Input object for deleting a team. "
input UpdateTeamRequest {
	team: TeamRequest!
	data: Struct
	score: Int64
	incrementScore: Boolean
}

" Response object for updating a team. "
type UpdateTeamResponse {
	success: Boolean!
	error: UpdateTeamError!
}

" Possible errors when updating a team. "
enum UpdateTeamError {
	NONE
	NO_FIELD_SPECIFIED
	NOT_FOUND
	NAME_TOO_SHORT
	NAME_TOO_LONG
	NO_UPDATE_SPECIFIED
	INCREMENT_SCORE_NOT_SPECIFIED
}

" Input object for deleting a team. "
input JoinTeamRequest {
	team: TeamRequest!
	userId: Uint64!
	data: Struct!
}

" Response object for joining a team. "
type JoinTeamResponse {
	success: Boolean!
	error: JoinTeamError!
}

" Possible errors when joining a team. "
enum JoinTeamError {
	NONE
	NO_FIELD_SPECIFIED
	USER_ID_REQUIRED
	DATA_REQUIRED
	NAME_TOO_SHORT
	NAME_TOO_LONG
	NOT_FOUND
	TEAM_FULL
	ALREADY_IN_A_TEAM
}

" Input object for deleting a team. "
input LeaveTeamRequest {
	userId: Uint64!
}

" Response object for leaving a team. "
type LeaveTeamResponse {
	success: Boolean!
	error: LeaveTeamError!
}

" Possible errors when leaving a team. "
enum LeaveTeamError {
	NONE
	USER_ID_REQUIRED
	NOT_IN_TEAM
	MEMBER_IS_OWNER
}

" Input object for updating a team member. "
input UpdateTeamMemberRequest {
	userId: Uint64!
	data: Struct!
}

" Response object for updating a team member. "
type UpdateTeamMemberResponse {
	success: Boolean!
	error: UpdateTeamMemberError!
}

" Possible errors when updating a team member. "
enum UpdateTeamMemberError {
	NONE
	USER_ID_REQUIRED
	DATA_REQUIRED
	NOT_FOUND
}

" A team in the system. The ranking is based on the score highest to lowest. "
type Team {
	name: String!
	owner: Uint64!
	score: Int64!
	ranking: Uint64!
	data: Struct!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}

" A member of a team. "
type TeamMember {
	team: String!
	userId: Uint64!
	data: Struct!
	joinedAt: Timestamp!
	updatedAt: Timestamp!
}
