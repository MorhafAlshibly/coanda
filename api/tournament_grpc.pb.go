// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.0--rc2
// source: tournament.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TournamentServiceClient is the client API for TournamentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TournamentServiceClient interface {
	CreateTournamentUser(ctx context.Context, in *CreateTournamentUserRequest, opts ...grpc.CallOption) (*CreateTournamentUserResponse, error)
	GetTournamentUser(ctx context.Context, in *TournamentUserRequest, opts ...grpc.CallOption) (*GetTournamentUserResponse, error)
	GetTournamentUsers(ctx context.Context, in *GetTournamentUsersRequest, opts ...grpc.CallOption) (*GetTournamentUsersResponse, error)
	UpdateTournamentUser(ctx context.Context, in *UpdateTournamentUserRequest, opts ...grpc.CallOption) (*UpdateTournamentUserResponse, error)
	DeleteTournamentUser(ctx context.Context, in *TournamentUserRequest, opts ...grpc.CallOption) (*TournamentUserResponse, error)
}

type tournamentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTournamentServiceClient(cc grpc.ClientConnInterface) TournamentServiceClient {
	return &tournamentServiceClient{cc}
}

func (c *tournamentServiceClient) CreateTournamentUser(ctx context.Context, in *CreateTournamentUserRequest, opts ...grpc.CallOption) (*CreateTournamentUserResponse, error) {
	out := new(CreateTournamentUserResponse)
	err := c.cc.Invoke(ctx, "/api.TournamentService/CreateTournamentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournamentUser(ctx context.Context, in *TournamentUserRequest, opts ...grpc.CallOption) (*GetTournamentUserResponse, error) {
	out := new(GetTournamentUserResponse)
	err := c.cc.Invoke(ctx, "/api.TournamentService/GetTournamentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournamentUsers(ctx context.Context, in *GetTournamentUsersRequest, opts ...grpc.CallOption) (*GetTournamentUsersResponse, error) {
	out := new(GetTournamentUsersResponse)
	err := c.cc.Invoke(ctx, "/api.TournamentService/GetTournamentUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) UpdateTournamentUser(ctx context.Context, in *UpdateTournamentUserRequest, opts ...grpc.CallOption) (*UpdateTournamentUserResponse, error) {
	out := new(UpdateTournamentUserResponse)
	err := c.cc.Invoke(ctx, "/api.TournamentService/UpdateTournamentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) DeleteTournamentUser(ctx context.Context, in *TournamentUserRequest, opts ...grpc.CallOption) (*TournamentUserResponse, error) {
	out := new(TournamentUserResponse)
	err := c.cc.Invoke(ctx, "/api.TournamentService/DeleteTournamentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TournamentServiceServer is the server API for TournamentService service.
// All implementations must embed UnimplementedTournamentServiceServer
// for forward compatibility
type TournamentServiceServer interface {
	CreateTournamentUser(context.Context, *CreateTournamentUserRequest) (*CreateTournamentUserResponse, error)
	GetTournamentUser(context.Context, *TournamentUserRequest) (*GetTournamentUserResponse, error)
	GetTournamentUsers(context.Context, *GetTournamentUsersRequest) (*GetTournamentUsersResponse, error)
	UpdateTournamentUser(context.Context, *UpdateTournamentUserRequest) (*UpdateTournamentUserResponse, error)
	DeleteTournamentUser(context.Context, *TournamentUserRequest) (*TournamentUserResponse, error)
	mustEmbedUnimplementedTournamentServiceServer()
}

// UnimplementedTournamentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTournamentServiceServer struct {
}

func (UnimplementedTournamentServiceServer) CreateTournamentUser(context.Context, *CreateTournamentUserRequest) (*CreateTournamentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTournamentUser not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournamentUser(context.Context, *TournamentUserRequest) (*GetTournamentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournamentUser not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournamentUsers(context.Context, *GetTournamentUsersRequest) (*GetTournamentUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournamentUsers not implemented")
}
func (UnimplementedTournamentServiceServer) UpdateTournamentUser(context.Context, *UpdateTournamentUserRequest) (*UpdateTournamentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTournamentUser not implemented")
}
func (UnimplementedTournamentServiceServer) DeleteTournamentUser(context.Context, *TournamentUserRequest) (*TournamentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTournamentUser not implemented")
}
func (UnimplementedTournamentServiceServer) mustEmbedUnimplementedTournamentServiceServer() {}

// UnsafeTournamentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TournamentServiceServer will
// result in compilation errors.
type UnsafeTournamentServiceServer interface {
	mustEmbedUnimplementedTournamentServiceServer()
}

func RegisterTournamentServiceServer(s grpc.ServiceRegistrar, srv TournamentServiceServer) {
	s.RegisterService(&TournamentService_ServiceDesc, srv)
}

func _TournamentService_CreateTournamentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTournamentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).CreateTournamentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TournamentService/CreateTournamentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).CreateTournamentUser(ctx, req.(*CreateTournamentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournamentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TournamentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournamentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TournamentService/GetTournamentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournamentUser(ctx, req.(*TournamentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournamentUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournamentUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TournamentService/GetTournamentUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournamentUsers(ctx, req.(*GetTournamentUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_UpdateTournamentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTournamentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).UpdateTournamentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TournamentService/UpdateTournamentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).UpdateTournamentUser(ctx, req.(*UpdateTournamentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_DeleteTournamentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TournamentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).DeleteTournamentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TournamentService/DeleteTournamentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).DeleteTournamentUser(ctx, req.(*TournamentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TournamentService_ServiceDesc is the grpc.ServiceDesc for TournamentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TournamentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TournamentService",
	HandlerType: (*TournamentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTournamentUser",
			Handler:    _TournamentService_CreateTournamentUser_Handler,
		},
		{
			MethodName: "GetTournamentUser",
			Handler:    _TournamentService_GetTournamentUser_Handler,
		},
		{
			MethodName: "GetTournamentUsers",
			Handler:    _TournamentService_GetTournamentUsers_Handler,
		},
		{
			MethodName: "UpdateTournamentUser",
			Handler:    _TournamentService_UpdateTournamentUser_Handler,
		},
		{
			MethodName: "DeleteTournamentUser",
			Handler:    _TournamentService_DeleteTournamentUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tournament.proto",
}
