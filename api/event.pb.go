// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.23.3
// source: event.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateEventResponse_Error int32

const (
	CreateEventResponse_NONE                             CreateEventResponse_Error = 0
	CreateEventResponse_NAME_TOO_SHORT                   CreateEventResponse_Error = 1
	CreateEventResponse_NAME_TOO_LONG                    CreateEventResponse_Error = 2
	CreateEventResponse_DATA_REQUIRED                    CreateEventResponse_Error = 3
	CreateEventResponse_STARTED_AT_REQUIRED              CreateEventResponse_Error = 4
	CreateEventResponse_STARTED_AT_IN_THE_PAST           CreateEventResponse_Error = 5
	CreateEventResponse_ROUNDS_REQUIRED                  CreateEventResponse_Error = 6
	CreateEventResponse_TOO_MANY_ROUNDS                  CreateEventResponse_Error = 7
	CreateEventResponse_ROUND_NAME_TOO_SHORT             CreateEventResponse_Error = 8
	CreateEventResponse_ROUND_NAME_TOO_LONG              CreateEventResponse_Error = 9
	CreateEventResponse_ROUND_DATA_REQUIRED              CreateEventResponse_Error = 10
	CreateEventResponse_ROUND_ENDED_AT_REQUIRED          CreateEventResponse_Error = 11
	CreateEventResponse_ROUND_ENDED_AT_BEFORE_STARTED_AT CreateEventResponse_Error = 12
	CreateEventResponse_ROUND_SCORING_REQUIRED           CreateEventResponse_Error = 13
	CreateEventResponse_ALREADY_EXISTS                   CreateEventResponse_Error = 14
	CreateEventResponse_DUPLICATE_ROUND_NAME             CreateEventResponse_Error = 15
	CreateEventResponse_DUPLICATE_ROUND_ENDED_AT         CreateEventResponse_Error = 16
)

// Enum value maps for CreateEventResponse_Error.
var (
	CreateEventResponse_Error_name = map[int32]string{
		0:  "NONE",
		1:  "NAME_TOO_SHORT",
		2:  "NAME_TOO_LONG",
		3:  "DATA_REQUIRED",
		4:  "STARTED_AT_REQUIRED",
		5:  "STARTED_AT_IN_THE_PAST",
		6:  "ROUNDS_REQUIRED",
		7:  "TOO_MANY_ROUNDS",
		8:  "ROUND_NAME_TOO_SHORT",
		9:  "ROUND_NAME_TOO_LONG",
		10: "ROUND_DATA_REQUIRED",
		11: "ROUND_ENDED_AT_REQUIRED",
		12: "ROUND_ENDED_AT_BEFORE_STARTED_AT",
		13: "ROUND_SCORING_REQUIRED",
		14: "ALREADY_EXISTS",
		15: "DUPLICATE_ROUND_NAME",
		16: "DUPLICATE_ROUND_ENDED_AT",
	}
	CreateEventResponse_Error_value = map[string]int32{
		"NONE":                             0,
		"NAME_TOO_SHORT":                   1,
		"NAME_TOO_LONG":                    2,
		"DATA_REQUIRED":                    3,
		"STARTED_AT_REQUIRED":              4,
		"STARTED_AT_IN_THE_PAST":           5,
		"ROUNDS_REQUIRED":                  6,
		"TOO_MANY_ROUNDS":                  7,
		"ROUND_NAME_TOO_SHORT":             8,
		"ROUND_NAME_TOO_LONG":              9,
		"ROUND_DATA_REQUIRED":              10,
		"ROUND_ENDED_AT_REQUIRED":          11,
		"ROUND_ENDED_AT_BEFORE_STARTED_AT": 12,
		"ROUND_SCORING_REQUIRED":           13,
		"ALREADY_EXISTS":                   14,
		"DUPLICATE_ROUND_NAME":             15,
		"DUPLICATE_ROUND_ENDED_AT":         16,
	}
)

func (x CreateEventResponse_Error) Enum() *CreateEventResponse_Error {
	p := new(CreateEventResponse_Error)
	*p = x
	return p
}

func (x CreateEventResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateEventResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[0].Descriptor()
}

func (CreateEventResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[0]
}

func (x CreateEventResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateEventResponse_Error.Descriptor instead.
func (CreateEventResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2, 0}
}

type GetEventResponse_Error int32

const (
	GetEventResponse_NONE                GetEventResponse_Error = 0
	GetEventResponse_NAME_TOO_SHORT      GetEventResponse_Error = 1
	GetEventResponse_NAME_TOO_LONG       GetEventResponse_Error = 2
	GetEventResponse_ID_OR_NAME_REQUIRED GetEventResponse_Error = 3
	GetEventResponse_NOT_FOUND           GetEventResponse_Error = 4
)

// Enum value maps for GetEventResponse_Error.
var (
	GetEventResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ID_OR_NAME_REQUIRED",
		4: "NOT_FOUND",
	}
	GetEventResponse_Error_value = map[string]int32{
		"NONE":                0,
		"NAME_TOO_SHORT":      1,
		"NAME_TOO_LONG":       2,
		"ID_OR_NAME_REQUIRED": 3,
		"NOT_FOUND":           4,
	}
)

func (x GetEventResponse_Error) Enum() *GetEventResponse_Error {
	p := new(GetEventResponse_Error)
	*p = x
	return p
}

func (x GetEventResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetEventResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[1].Descriptor()
}

func (GetEventResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[1]
}

func (x GetEventResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetEventResponse_Error.Descriptor instead.
func (GetEventResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5, 0}
}

type UpdateEventResponse_Error int32

const (
	UpdateEventResponse_NONE                UpdateEventResponse_Error = 0
	UpdateEventResponse_NAME_TOO_SHORT      UpdateEventResponse_Error = 1
	UpdateEventResponse_NAME_TOO_LONG       UpdateEventResponse_Error = 2
	UpdateEventResponse_ID_OR_NAME_REQUIRED UpdateEventResponse_Error = 3
	UpdateEventResponse_DATA_REQUIRED       UpdateEventResponse_Error = 4
	UpdateEventResponse_NOT_FOUND           UpdateEventResponse_Error = 5
)

// Enum value maps for UpdateEventResponse_Error.
var (
	UpdateEventResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ID_OR_NAME_REQUIRED",
		4: "DATA_REQUIRED",
		5: "NOT_FOUND",
	}
	UpdateEventResponse_Error_value = map[string]int32{
		"NONE":                0,
		"NAME_TOO_SHORT":      1,
		"NAME_TOO_LONG":       2,
		"ID_OR_NAME_REQUIRED": 3,
		"DATA_REQUIRED":       4,
		"NOT_FOUND":           5,
	}
)

func (x UpdateEventResponse_Error) Enum() *UpdateEventResponse_Error {
	p := new(UpdateEventResponse_Error)
	*p = x
	return p
}

func (x UpdateEventResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateEventResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[2].Descriptor()
}

func (UpdateEventResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[2]
}

func (x UpdateEventResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateEventResponse_Error.Descriptor instead.
func (UpdateEventResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{7, 0}
}

type EventResponse_Error int32

const (
	EventResponse_NONE                EventResponse_Error = 0
	EventResponse_NAME_TOO_SHORT      EventResponse_Error = 1
	EventResponse_NAME_TOO_LONG       EventResponse_Error = 2
	EventResponse_ID_OR_NAME_REQUIRED EventResponse_Error = 3
	EventResponse_NOT_FOUND           EventResponse_Error = 4
)

// Enum value maps for EventResponse_Error.
var (
	EventResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ID_OR_NAME_REQUIRED",
		4: "NOT_FOUND",
	}
	EventResponse_Error_value = map[string]int32{
		"NONE":                0,
		"NAME_TOO_SHORT":      1,
		"NAME_TOO_LONG":       2,
		"ID_OR_NAME_REQUIRED": 3,
		"NOT_FOUND":           4,
	}
)

func (x EventResponse_Error) Enum() *EventResponse_Error {
	p := new(EventResponse_Error)
	*p = x
	return p
}

func (x EventResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[3].Descriptor()
}

func (EventResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[3]
}

func (x EventResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventResponse_Error.Descriptor instead.
func (EventResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{8, 0}
}

type CreateEventRoundResponse_Error int32

const (
	CreateEventRoundResponse_NONE                                   CreateEventRoundResponse_Error = 0
	CreateEventRoundResponse_NAME_TOO_SHORT                         CreateEventRoundResponse_Error = 1
	CreateEventRoundResponse_NAME_TOO_LONG                          CreateEventRoundResponse_Error = 2
	CreateEventRoundResponse_ID_OR_NAME_REQUIRED                    CreateEventRoundResponse_Error = 3
	CreateEventRoundResponse_ROUND_REQUIRED                         CreateEventRoundResponse_Error = 4
	CreateEventRoundResponse_ROUND_NAME_TOO_SHORT                   CreateEventRoundResponse_Error = 5
	CreateEventRoundResponse_ROUND_NAME_TOO_LONG                    CreateEventRoundResponse_Error = 6
	CreateEventRoundResponse_ROUND_DATA_REQUIRED                    CreateEventRoundResponse_Error = 7
	CreateEventRoundResponse_ROUND_ENDED_AT_REQUIRED                CreateEventRoundResponse_Error = 8
	CreateEventRoundResponse_ROUND_ENDED_AT_IN_THE_PAST             CreateEventRoundResponse_Error = 9
	CreateEventRoundResponse_ROUND_ENDED_AT_BEFORE_EVENT_STARTED_AT CreateEventRoundResponse_Error = 10
	CreateEventRoundResponse_ROUND_SCORING_REQUIRED                 CreateEventRoundResponse_Error = 11
	CreateEventRoundResponse_NOT_FOUND                              CreateEventRoundResponse_Error = 12
	CreateEventRoundResponse_DUPLICATE_ROUND_NAME                   CreateEventRoundResponse_Error = 13
	CreateEventRoundResponse_DUPLICATE_ROUND_ENDED_AT               CreateEventRoundResponse_Error = 14
)

// Enum value maps for CreateEventRoundResponse_Error.
var (
	CreateEventRoundResponse_Error_name = map[int32]string{
		0:  "NONE",
		1:  "NAME_TOO_SHORT",
		2:  "NAME_TOO_LONG",
		3:  "ID_OR_NAME_REQUIRED",
		4:  "ROUND_REQUIRED",
		5:  "ROUND_NAME_TOO_SHORT",
		6:  "ROUND_NAME_TOO_LONG",
		7:  "ROUND_DATA_REQUIRED",
		8:  "ROUND_ENDED_AT_REQUIRED",
		9:  "ROUND_ENDED_AT_IN_THE_PAST",
		10: "ROUND_ENDED_AT_BEFORE_EVENT_STARTED_AT",
		11: "ROUND_SCORING_REQUIRED",
		12: "NOT_FOUND",
		13: "DUPLICATE_ROUND_NAME",
		14: "DUPLICATE_ROUND_ENDED_AT",
	}
	CreateEventRoundResponse_Error_value = map[string]int32{
		"NONE":                                   0,
		"NAME_TOO_SHORT":                         1,
		"NAME_TOO_LONG":                          2,
		"ID_OR_NAME_REQUIRED":                    3,
		"ROUND_REQUIRED":                         4,
		"ROUND_NAME_TOO_SHORT":                   5,
		"ROUND_NAME_TOO_LONG":                    6,
		"ROUND_DATA_REQUIRED":                    7,
		"ROUND_ENDED_AT_REQUIRED":                8,
		"ROUND_ENDED_AT_IN_THE_PAST":             9,
		"ROUND_ENDED_AT_BEFORE_EVENT_STARTED_AT": 10,
		"ROUND_SCORING_REQUIRED":                 11,
		"NOT_FOUND":                              12,
		"DUPLICATE_ROUND_NAME":                   13,
		"DUPLICATE_ROUND_ENDED_AT":               14,
	}
)

func (x CreateEventRoundResponse_Error) Enum() *CreateEventRoundResponse_Error {
	p := new(CreateEventRoundResponse_Error)
	*p = x
	return p
}

func (x CreateEventRoundResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateEventRoundResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[4].Descriptor()
}

func (CreateEventRoundResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[4]
}

func (x CreateEventRoundResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateEventRoundResponse_Error.Descriptor instead.
func (CreateEventRoundResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{10, 0}
}

type GetEventRoundResponse_Error int32

const (
	GetEventRoundResponse_NONE                       GetEventRoundResponse_Error = 0
	GetEventRoundResponse_NAME_TOO_SHORT             GetEventRoundResponse_Error = 1
	GetEventRoundResponse_NAME_TOO_LONG              GetEventRoundResponse_Error = 2
	GetEventRoundResponse_ID_OR_NAME_REQUIRED        GetEventRoundResponse_Error = 3
	GetEventRoundResponse_EVENT_ROUND_OR_ID_REQUIRED GetEventRoundResponse_Error = 4
	GetEventRoundResponse_NOT_FOUND                  GetEventRoundResponse_Error = 5
)

// Enum value maps for GetEventRoundResponse_Error.
var (
	GetEventRoundResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ID_OR_NAME_REQUIRED",
		4: "EVENT_ROUND_OR_ID_REQUIRED",
		5: "NOT_FOUND",
	}
	GetEventRoundResponse_Error_value = map[string]int32{
		"NONE":                       0,
		"NAME_TOO_SHORT":             1,
		"NAME_TOO_LONG":              2,
		"ID_OR_NAME_REQUIRED":        3,
		"EVENT_ROUND_OR_ID_REQUIRED": 4,
		"NOT_FOUND":                  5,
	}
)

func (x GetEventRoundResponse_Error) Enum() *GetEventRoundResponse_Error {
	p := new(GetEventRoundResponse_Error)
	*p = x
	return p
}

func (x GetEventRoundResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetEventRoundResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[5].Descriptor()
}

func (GetEventRoundResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[5]
}

func (x GetEventRoundResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetEventRoundResponse_Error.Descriptor instead.
func (GetEventRoundResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{13, 0}
}

type UpdateEventRoundResponse_Error int32

const (
	UpdateEventRoundResponse_NONE                       UpdateEventRoundResponse_Error = 0
	UpdateEventRoundResponse_NAME_TOO_SHORT             UpdateEventRoundResponse_Error = 1
	UpdateEventRoundResponse_NAME_TOO_LONG              UpdateEventRoundResponse_Error = 2
	UpdateEventRoundResponse_ID_OR_NAME_REQUIRED        UpdateEventRoundResponse_Error = 3
	UpdateEventRoundResponse_EVENT_ROUND_OR_ID_REQUIRED UpdateEventRoundResponse_Error = 4
	UpdateEventRoundResponse_NO_UPDATE_SPECIFIED        UpdateEventRoundResponse_Error = 5
	UpdateEventRoundResponse_NOT_FOUND                  UpdateEventRoundResponse_Error = 6
)

// Enum value maps for UpdateEventRoundResponse_Error.
var (
	UpdateEventRoundResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ID_OR_NAME_REQUIRED",
		4: "EVENT_ROUND_OR_ID_REQUIRED",
		5: "NO_UPDATE_SPECIFIED",
		6: "NOT_FOUND",
	}
	UpdateEventRoundResponse_Error_value = map[string]int32{
		"NONE":                       0,
		"NAME_TOO_SHORT":             1,
		"NAME_TOO_LONG":              2,
		"ID_OR_NAME_REQUIRED":        3,
		"EVENT_ROUND_OR_ID_REQUIRED": 4,
		"NO_UPDATE_SPECIFIED":        5,
		"NOT_FOUND":                  6,
	}
)

func (x UpdateEventRoundResponse_Error) Enum() *UpdateEventRoundResponse_Error {
	p := new(UpdateEventRoundResponse_Error)
	*p = x
	return p
}

func (x UpdateEventRoundResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateEventRoundResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[6].Descriptor()
}

func (UpdateEventRoundResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[6]
}

func (x UpdateEventRoundResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateEventRoundResponse_Error.Descriptor instead.
func (UpdateEventRoundResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{15, 0}
}

type GetEventUserResponse_Error int32

const (
	GetEventUserResponse_NONE                      GetEventUserResponse_Error = 0
	GetEventUserResponse_NAME_TOO_SHORT            GetEventUserResponse_Error = 1
	GetEventUserResponse_NAME_TOO_LONG             GetEventUserResponse_Error = 2
	GetEventUserResponse_ID_OR_NAME_REQUIRED       GetEventUserResponse_Error = 3
	GetEventUserResponse_CLIENT_USER_ID_REQUIRED   GetEventUserResponse_Error = 4
	GetEventUserResponse_EVENT_USER_OR_ID_REQUIRED GetEventUserResponse_Error = 5
	GetEventUserResponse_NOT_FOUND                 GetEventUserResponse_Error = 6
)

// Enum value maps for GetEventUserResponse_Error.
var (
	GetEventUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ID_OR_NAME_REQUIRED",
		4: "CLIENT_USER_ID_REQUIRED",
		5: "EVENT_USER_OR_ID_REQUIRED",
		6: "NOT_FOUND",
	}
	GetEventUserResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"NAME_TOO_SHORT":            1,
		"NAME_TOO_LONG":             2,
		"ID_OR_NAME_REQUIRED":       3,
		"CLIENT_USER_ID_REQUIRED":   4,
		"EVENT_USER_OR_ID_REQUIRED": 5,
		"NOT_FOUND":                 6,
	}
)

func (x GetEventUserResponse_Error) Enum() *GetEventUserResponse_Error {
	p := new(GetEventUserResponse_Error)
	*p = x
	return p
}

func (x GetEventUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetEventUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[7].Descriptor()
}

func (GetEventUserResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[7]
}

func (x GetEventUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetEventUserResponse_Error.Descriptor instead.
func (GetEventUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{18, 0}
}

type UpdateEventUserResponse_Error int32

const (
	UpdateEventUserResponse_NONE                      UpdateEventUserResponse_Error = 0
	UpdateEventUserResponse_NAME_TOO_SHORT            UpdateEventUserResponse_Error = 1
	UpdateEventUserResponse_NAME_TOO_LONG             UpdateEventUserResponse_Error = 2
	UpdateEventUserResponse_ID_OR_NAME_REQUIRED       UpdateEventUserResponse_Error = 3
	UpdateEventUserResponse_CLIENT_USER_ID_REQUIRED   UpdateEventUserResponse_Error = 4
	UpdateEventUserResponse_EVENT_USER_OR_ID_REQUIRED UpdateEventUserResponse_Error = 5
	UpdateEventUserResponse_DATA_REQUIRED             UpdateEventUserResponse_Error = 6
	UpdateEventUserResponse_NOT_FOUND                 UpdateEventUserResponse_Error = 7
)

// Enum value maps for UpdateEventUserResponse_Error.
var (
	UpdateEventUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ID_OR_NAME_REQUIRED",
		4: "CLIENT_USER_ID_REQUIRED",
		5: "EVENT_USER_OR_ID_REQUIRED",
		6: "DATA_REQUIRED",
		7: "NOT_FOUND",
	}
	UpdateEventUserResponse_Error_value = map[string]int32{
		"NONE":                      0,
		"NAME_TOO_SHORT":            1,
		"NAME_TOO_LONG":             2,
		"ID_OR_NAME_REQUIRED":       3,
		"CLIENT_USER_ID_REQUIRED":   4,
		"EVENT_USER_OR_ID_REQUIRED": 5,
		"DATA_REQUIRED":             6,
		"NOT_FOUND":                 7,
	}
)

func (x UpdateEventUserResponse_Error) Enum() *UpdateEventUserResponse_Error {
	p := new(UpdateEventUserResponse_Error)
	*p = x
	return p
}

func (x UpdateEventUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateEventUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[8].Descriptor()
}

func (UpdateEventUserResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[8]
}

func (x UpdateEventUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateEventUserResponse_Error.Descriptor instead.
func (UpdateEventUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{20, 0}
}

type EventUserResponse_Error int32

const (
	EventUserResponse_NONE                    EventUserResponse_Error = 0
	EventUserResponse_NAME_TOO_SHORT          EventUserResponse_Error = 1
	EventUserResponse_NAME_TOO_LONG           EventUserResponse_Error = 2
	EventUserResponse_ID_OR_NAME_REQUIRED     EventUserResponse_Error = 3
	EventUserResponse_CLIENT_USER_ID_REQUIRED EventUserResponse_Error = 4
	EventUserResponse_NOT_FOUND               EventUserResponse_Error = 5
)

// Enum value maps for EventUserResponse_Error.
var (
	EventUserResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ID_OR_NAME_REQUIRED",
		4: "CLIENT_USER_ID_REQUIRED",
		5: "NOT_FOUND",
	}
	EventUserResponse_Error_value = map[string]int32{
		"NONE":                    0,
		"NAME_TOO_SHORT":          1,
		"NAME_TOO_LONG":           2,
		"ID_OR_NAME_REQUIRED":     3,
		"CLIENT_USER_ID_REQUIRED": 4,
		"NOT_FOUND":               5,
	}
)

func (x EventUserResponse_Error) Enum() *EventUserResponse_Error {
	p := new(EventUserResponse_Error)
	*p = x
	return p
}

func (x EventUserResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventUserResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[9].Descriptor()
}

func (EventUserResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[9]
}

func (x EventUserResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventUserResponse_Error.Descriptor instead.
func (EventUserResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{21, 0}
}

type AddEventResultResponse_Error int32

const (
	AddEventResultResponse_NONE                     AddEventResultResponse_Error = 0
	AddEventResultResponse_NAME_TOO_SHORT           AddEventResultResponse_Error = 1
	AddEventResultResponse_NAME_TOO_LONG            AddEventResultResponse_Error = 2
	AddEventResultResponse_ID_OR_NAME_REQUIRED      AddEventResultResponse_Error = 3
	AddEventResultResponse_CLIENT_USER_ID_REQUIRED  AddEventResultResponse_Error = 4
	AddEventResultResponse_RESULT_REQUIRED          AddEventResultResponse_Error = 5
	AddEventResultResponse_USER_DATA_REQUIRED       AddEventResultResponse_Error = 6
	AddEventResultResponse_ROUND_USER_DATA_REQUIRED AddEventResultResponse_Error = 7
	AddEventResultResponse_NOT_FOUND                AddEventResultResponse_Error = 8
	AddEventResultResponse_EVENT_ENDED              AddEventResultResponse_Error = 9
)

// Enum value maps for AddEventResultResponse_Error.
var (
	AddEventResultResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "NAME_TOO_SHORT",
		2: "NAME_TOO_LONG",
		3: "ID_OR_NAME_REQUIRED",
		4: "CLIENT_USER_ID_REQUIRED",
		5: "RESULT_REQUIRED",
		6: "USER_DATA_REQUIRED",
		7: "ROUND_USER_DATA_REQUIRED",
		8: "NOT_FOUND",
		9: "EVENT_ENDED",
	}
	AddEventResultResponse_Error_value = map[string]int32{
		"NONE":                     0,
		"NAME_TOO_SHORT":           1,
		"NAME_TOO_LONG":            2,
		"ID_OR_NAME_REQUIRED":      3,
		"CLIENT_USER_ID_REQUIRED":  4,
		"RESULT_REQUIRED":          5,
		"USER_DATA_REQUIRED":       6,
		"ROUND_USER_DATA_REQUIRED": 7,
		"NOT_FOUND":                8,
		"EVENT_ENDED":              9,
	}
)

func (x AddEventResultResponse_Error) Enum() *AddEventResultResponse_Error {
	p := new(AddEventResultResponse_Error)
	*p = x
	return p
}

func (x AddEventResultResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddEventResultResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[10].Descriptor()
}

func (AddEventResultResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[10]
}

func (x AddEventResultResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddEventResultResponse_Error.Descriptor instead.
func (AddEventResultResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{23, 0}
}

type RemoveEventResultResponse_Error int32

const (
	RemoveEventResultResponse_NONE        RemoveEventResultResponse_Error = 0
	RemoveEventResultResponse_ID_REQUIRED RemoveEventResultResponse_Error = 1
	RemoveEventResultResponse_NOT_FOUND   RemoveEventResultResponse_Error = 2
	RemoveEventResultResponse_EVENT_ENDED RemoveEventResultResponse_Error = 3
)

// Enum value maps for RemoveEventResultResponse_Error.
var (
	RemoveEventResultResponse_Error_name = map[int32]string{
		0: "NONE",
		1: "ID_REQUIRED",
		2: "NOT_FOUND",
		3: "EVENT_ENDED",
	}
	RemoveEventResultResponse_Error_value = map[string]int32{
		"NONE":        0,
		"ID_REQUIRED": 1,
		"NOT_FOUND":   2,
		"EVENT_ENDED": 3,
	}
)

func (x RemoveEventResultResponse_Error) Enum() *RemoveEventResultResponse_Error {
	p := new(RemoveEventResultResponse_Error)
	*p = x
	return p
}

func (x RemoveEventResultResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveEventResultResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[11].Descriptor()
}

func (RemoveEventResultResponse_Error) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[11]
}

func (x RemoveEventResultResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveEventResultResponse_Error.Descriptor instead.
func (RemoveEventResultResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{25, 0}
}

type CreateEventRound struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endedAt,proto3" json:"endedAt,omitempty"`
	Scoring       []uint64               `protobuf:"varint,4,rep,packed,name=scoring,proto3" json:"scoring,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventRound) Reset() {
	*x = CreateEventRound{}
	mi := &file_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRound) ProtoMessage() {}

func (x *CreateEventRound) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRound.ProtoReflect.Descriptor instead.
func (*CreateEventRound) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *CreateEventRound) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEventRound) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateEventRound) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *CreateEventRound) GetScoring() []uint64 {
	if x != nil {
		return x.Scoring
	}
	return nil
}

type CreateEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	Rounds        []*CreateEventRound    `protobuf:"bytes,4,rep,name=rounds,proto3" json:"rounds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventRequest) Reset() {
	*x = CreateEventRequest{}
	mi := &file_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRequest) ProtoMessage() {}

func (x *CreateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *CreateEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEventRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateEventRequest) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *CreateEventRequest) GetRounds() []*CreateEventRound {
	if x != nil {
		return x.Rounds
	}
	return nil
}

type CreateEventResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Success       bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id            *uint64                   `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Error         CreateEventResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.CreateEventResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventResponse) Reset() {
	*x = CreateEventResponse{}
	mi := &file_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventResponse) ProtoMessage() {}

func (x *CreateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventResponse.ProtoReflect.Descriptor instead.
func (*CreateEventResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateEventResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateEventResponse) GetError() CreateEventResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateEventResponse_NONE
}

type EventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	mi := &file_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *EventRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EventRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         *EventRequest          `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Pagination    *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventRequest) Reset() {
	*x = GetEventRequest{}
	mi := &file_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventRequest) ProtoMessage() {}

func (x *GetEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventRequest.ProtoReflect.Descriptor instead.
func (*GetEventRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *GetEventRequest) GetEvent() *EventRequest {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *GetEventRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Event         *Event                 `protobuf:"bytes,2,opt,name=event,proto3,oneof" json:"event,omitempty"`
	Leaderboard   []*EventUser           `protobuf:"bytes,3,rep,name=leaderboard,proto3" json:"leaderboard,omitempty"`
	Error         GetEventResponse_Error `protobuf:"varint,4,opt,name=error,proto3,enum=api.GetEventResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventResponse) Reset() {
	*x = GetEventResponse{}
	mi := &file_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventResponse) ProtoMessage() {}

func (x *GetEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventResponse.ProtoReflect.Descriptor instead.
func (*GetEventResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *GetEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetEventResponse) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *GetEventResponse) GetLeaderboard() []*EventUser {
	if x != nil {
		return x.Leaderboard
	}
	return nil
}

func (x *GetEventResponse) GetError() GetEventResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetEventResponse_NONE
}

type UpdateEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         *EventRequest          `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEventRequest) Reset() {
	*x = UpdateEventRequest{}
	mi := &file_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventRequest) ProtoMessage() {}

func (x *UpdateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateEventRequest) GetEvent() *EventRequest {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *UpdateEventRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateEventResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Success       bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         UpdateEventResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.UpdateEventResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEventResponse) Reset() {
	*x = UpdateEventResponse{}
	mi := &file_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventResponse) ProtoMessage() {}

func (x *UpdateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateEventResponse) GetError() UpdateEventResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateEventResponse_NONE
}

type EventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         EventResponse_Error    `protobuf:"varint,2,opt,name=error,proto3,enum=api.EventResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	mi := &file_event_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{8}
}

func (x *EventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EventResponse) GetError() EventResponse_Error {
	if x != nil {
		return x.Error
	}
	return EventResponse_NONE
}

type CreateEventRoundRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         *EventRequest          `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Round         *CreateEventRound      `protobuf:"bytes,2,opt,name=round,proto3" json:"round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventRoundRequest) Reset() {
	*x = CreateEventRoundRequest{}
	mi := &file_event_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRoundRequest) ProtoMessage() {}

func (x *CreateEventRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRoundRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRoundRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{9}
}

func (x *CreateEventRoundRequest) GetEvent() *EventRequest {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *CreateEventRoundRequest) GetRound() *CreateEventRound {
	if x != nil {
		return x.Round
	}
	return nil
}

type CreateEventRoundResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Success       bool                           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id            *uint64                        `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Error         CreateEventRoundResponse_Error `protobuf:"varint,3,opt,name=error,proto3,enum=api.CreateEventRoundResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventRoundResponse) Reset() {
	*x = CreateEventRoundResponse{}
	mi := &file_event_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRoundResponse) ProtoMessage() {}

func (x *CreateEventRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRoundResponse.ProtoReflect.Descriptor instead.
func (*CreateEventRoundResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{10}
}

func (x *CreateEventRoundResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateEventRoundResponse) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CreateEventRoundResponse) GetError() CreateEventRoundResponse_Error {
	if x != nil {
		return x.Error
	}
	return CreateEventRoundResponse_NONE
}

type EventRoundRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Event         *EventRequest          `protobuf:"bytes,2,opt,name=event,proto3,oneof" json:"event,omitempty"`
	RoundName     *string                `protobuf:"bytes,3,opt,name=roundName,proto3,oneof" json:"roundName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventRoundRequest) Reset() {
	*x = EventRoundRequest{}
	mi := &file_event_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRoundRequest) ProtoMessage() {}

func (x *EventRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRoundRequest.ProtoReflect.Descriptor instead.
func (*EventRoundRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{11}
}

func (x *EventRoundRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EventRoundRequest) GetEvent() *EventRequest {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EventRoundRequest) GetRoundName() string {
	if x != nil && x.RoundName != nil {
		return *x.RoundName
	}
	return ""
}

type GetEventRoundRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Round         *EventRoundRequest     `protobuf:"bytes,1,opt,name=round,proto3" json:"round,omitempty"`
	Pagination    *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventRoundRequest) Reset() {
	*x = GetEventRoundRequest{}
	mi := &file_event_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventRoundRequest) ProtoMessage() {}

func (x *GetEventRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventRoundRequest.ProtoReflect.Descriptor instead.
func (*GetEventRoundRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{12}
}

func (x *GetEventRoundRequest) GetRound() *EventRoundRequest {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *GetEventRoundRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetEventRoundResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Success       bool                        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Round         *EventRound                 `protobuf:"bytes,2,opt,name=round,proto3,oneof" json:"round,omitempty"`
	Results       []*EventRoundUser           `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Error         GetEventRoundResponse_Error `protobuf:"varint,4,opt,name=error,proto3,enum=api.GetEventRoundResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventRoundResponse) Reset() {
	*x = GetEventRoundResponse{}
	mi := &file_event_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventRoundResponse) ProtoMessage() {}

func (x *GetEventRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventRoundResponse.ProtoReflect.Descriptor instead.
func (*GetEventRoundResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{13}
}

func (x *GetEventRoundResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetEventRoundResponse) GetRound() *EventRound {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *GetEventRoundResponse) GetResults() []*EventRoundUser {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetEventRoundResponse) GetError() GetEventRoundResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetEventRoundResponse_NONE
}

type UpdateEventRoundRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Round         *EventRoundRequest     `protobuf:"bytes,1,opt,name=round,proto3" json:"round,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
	Scoring       []uint64               `protobuf:"varint,3,rep,packed,name=scoring,proto3" json:"scoring,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEventRoundRequest) Reset() {
	*x = UpdateEventRoundRequest{}
	mi := &file_event_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventRoundRequest) ProtoMessage() {}

func (x *UpdateEventRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventRoundRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventRoundRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateEventRoundRequest) GetRound() *EventRoundRequest {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *UpdateEventRoundRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateEventRoundRequest) GetScoring() []uint64 {
	if x != nil {
		return x.Scoring
	}
	return nil
}

type UpdateEventRoundResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Success       bool                           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         UpdateEventRoundResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.UpdateEventRoundResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEventRoundResponse) Reset() {
	*x = UpdateEventRoundResponse{}
	mi := &file_event_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventRoundResponse) ProtoMessage() {}

func (x *UpdateEventRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventRoundResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventRoundResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateEventRoundResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateEventRoundResponse) GetError() UpdateEventRoundResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateEventRoundResponse_NONE
}

type EventUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Event         *EventRequest          `protobuf:"bytes,2,opt,name=event,proto3,oneof" json:"event,omitempty"`
	ClientUserId  *uint64                `protobuf:"varint,3,opt,name=clientUserId,proto3,oneof" json:"clientUserId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUserRequest) Reset() {
	*x = EventUserRequest{}
	mi := &file_event_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserRequest) ProtoMessage() {}

func (x *EventUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserRequest.ProtoReflect.Descriptor instead.
func (*EventUserRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{16}
}

func (x *EventUserRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EventUserRequest) GetEvent() *EventRequest {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EventUserRequest) GetClientUserId() uint64 {
	if x != nil && x.ClientUserId != nil {
		return *x.ClientUserId
	}
	return 0
}

type GetEventUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *EventUserRequest      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pagination    *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventUserRequest) Reset() {
	*x = GetEventUserRequest{}
	mi := &file_event_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventUserRequest) ProtoMessage() {}

func (x *GetEventUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventUserRequest.ProtoReflect.Descriptor instead.
func (*GetEventUserRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{17}
}

func (x *GetEventUserRequest) GetUser() *EventUserRequest {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetEventUserRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetEventUserResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Success       bool                       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	User          *EventUser                 `protobuf:"bytes,2,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Results       []*EventRoundUser          `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Error         GetEventUserResponse_Error `protobuf:"varint,6,opt,name=error,proto3,enum=api.GetEventUserResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventUserResponse) Reset() {
	*x = GetEventUserResponse{}
	mi := &file_event_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventUserResponse) ProtoMessage() {}

func (x *GetEventUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventUserResponse.ProtoReflect.Descriptor instead.
func (*GetEventUserResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{18}
}

func (x *GetEventUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetEventUserResponse) GetUser() *EventUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetEventUserResponse) GetResults() []*EventRoundUser {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetEventUserResponse) GetError() GetEventUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return GetEventUserResponse_NONE
}

type UpdateEventUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *EventUserRequest      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEventUserRequest) Reset() {
	*x = UpdateEventUserRequest{}
	mi := &file_event_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventUserRequest) ProtoMessage() {}

func (x *UpdateEventUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventUserRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateEventUserRequest) GetUser() *EventUserRequest {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateEventUserRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateEventUserResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Success       bool                          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         UpdateEventUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.UpdateEventUserResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEventUserResponse) Reset() {
	*x = UpdateEventUserResponse{}
	mi := &file_event_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventUserResponse) ProtoMessage() {}

func (x *UpdateEventUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventUserResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateEventUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateEventUserResponse) GetError() UpdateEventUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return UpdateEventUserResponse_NONE
}

type EventUserResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Success       bool                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         EventUserResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.EventUserResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUserResponse) Reset() {
	*x = EventUserResponse{}
	mi := &file_event_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserResponse) ProtoMessage() {}

func (x *EventUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserResponse.ProtoReflect.Descriptor instead.
func (*EventUserResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{21}
}

func (x *EventUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EventUserResponse) GetError() EventUserResponse_Error {
	if x != nil {
		return x.Error
	}
	return EventUserResponse_NONE
}

type AddEventResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         *EventRequest          `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	ClientUserId  uint64                 `protobuf:"varint,2,opt,name=clientUserId,proto3" json:"clientUserId,omitempty"`
	Result        uint64                 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	UserData      *structpb.Struct       `protobuf:"bytes,4,opt,name=userData,proto3" json:"userData,omitempty"`
	RoundUserData *structpb.Struct       `protobuf:"bytes,5,opt,name=roundUserData,proto3" json:"roundUserData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddEventResultRequest) Reset() {
	*x = AddEventResultRequest{}
	mi := &file_event_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddEventResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventResultRequest) ProtoMessage() {}

func (x *AddEventResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventResultRequest.ProtoReflect.Descriptor instead.
func (*AddEventResultRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{22}
}

func (x *AddEventResultRequest) GetEvent() *EventRequest {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AddEventResultRequest) GetClientUserId() uint64 {
	if x != nil {
		return x.ClientUserId
	}
	return 0
}

func (x *AddEventResultRequest) GetResult() uint64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *AddEventResultRequest) GetUserData() *structpb.Struct {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *AddEventResultRequest) GetRoundUserData() *structpb.Struct {
	if x != nil {
		return x.RoundUserData
	}
	return nil
}

type AddEventResultResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Success       bool                         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         AddEventResultResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.AddEventResultResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddEventResultResponse) Reset() {
	*x = AddEventResultResponse{}
	mi := &file_event_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddEventResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventResultResponse) ProtoMessage() {}

func (x *AddEventResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventResultResponse.ProtoReflect.Descriptor instead.
func (*AddEventResultResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{23}
}

func (x *AddEventResultResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddEventResultResponse) GetError() AddEventResultResponse_Error {
	if x != nil {
		return x.Error
	}
	return AddEventResultResponse_NONE
}

type EventRoundUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventRoundUserRequest) Reset() {
	*x = EventRoundUserRequest{}
	mi := &file_event_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRoundUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRoundUserRequest) ProtoMessage() {}

func (x *EventRoundUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRoundUserRequest.ProtoReflect.Descriptor instead.
func (*EventRoundUserRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{24}
}

func (x *EventRoundUserRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RemoveEventResultResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Success       bool                            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         RemoveEventResultResponse_Error `protobuf:"varint,2,opt,name=error,proto3,enum=api.RemoveEventResultResponse_Error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveEventResultResponse) Reset() {
	*x = RemoveEventResultResponse{}
	mi := &file_event_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveEventResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveEventResultResponse) ProtoMessage() {}

func (x *RemoveEventResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveEventResultResponse.ProtoReflect.Descriptor instead.
func (*RemoveEventResultResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{25}
}

func (x *RemoveEventResultResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveEventResultResponse) GetError() RemoveEventResultResponse_Error {
	if x != nil {
		return x.Error
	}
	return RemoveEventResultResponse_NONE
}

type Event struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CurrentRoundId   *uint64                `protobuf:"varint,4,opt,name=currentRoundId,proto3,oneof" json:"currentRoundId,omitempty"`
	CurrentRoundName *string                `protobuf:"bytes,5,opt,name=currentRoundName,proto3,oneof" json:"currentRoundName,omitempty"`
	Data             *structpb.Struct       `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Rounds           []*EventRound          `protobuf:"bytes,7,rep,name=rounds,proto3" json:"rounds,omitempty"`
	StartedAt        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_event_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{26}
}

func (x *Event) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetCurrentRoundId() uint64 {
	if x != nil && x.CurrentRoundId != nil {
		return *x.CurrentRoundId
	}
	return 0
}

func (x *Event) GetCurrentRoundName() string {
	if x != nil && x.CurrentRoundName != nil {
		return *x.CurrentRoundName
	}
	return ""
}

func (x *Event) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetRounds() []*EventRound {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *Event) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Event) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Event) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EventRound struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId       uint64                 `protobuf:"varint,2,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Scoring       []uint64               `protobuf:"varint,4,rep,packed,name=scoring,proto3" json:"scoring,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=endedAt,proto3" json:"endedAt,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventRound) Reset() {
	*x = EventRound{}
	mi := &file_event_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRound) ProtoMessage() {}

func (x *EventRound) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRound.ProtoReflect.Descriptor instead.
func (*EventRound) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{27}
}

func (x *EventRound) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventRound) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *EventRound) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRound) GetScoring() []uint64 {
	if x != nil {
		return x.Scoring
	}
	return nil
}

func (x *EventRound) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EventRound) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *EventRound) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EventRound) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EventUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId       uint64                 `protobuf:"varint,2,opt,name=eventId,proto3" json:"eventId,omitempty"`
	ClientUserId  uint64                 `protobuf:"varint,3,opt,name=clientUserId,proto3" json:"clientUserId,omitempty"`
	Score         uint64                 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Ranking       uint64                 `protobuf:"varint,5,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUser) Reset() {
	*x = EventUser{}
	mi := &file_event_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUser) ProtoMessage() {}

func (x *EventUser) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUser.ProtoReflect.Descriptor instead.
func (*EventUser) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{28}
}

func (x *EventUser) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventUser) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *EventUser) GetClientUserId() uint64 {
	if x != nil {
		return x.ClientUserId
	}
	return 0
}

func (x *EventUser) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EventUser) GetRanking() uint64 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *EventUser) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EventUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EventUser) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EventRoundUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventUserId   uint64                 `protobuf:"varint,2,opt,name=eventUserId,proto3" json:"eventUserId,omitempty"`
	ClientUserId  uint64                 `protobuf:"varint,3,opt,name=clientUserId,proto3" json:"clientUserId,omitempty"`
	EventRoundId  uint64                 `protobuf:"varint,4,opt,name=eventRoundId,proto3" json:"eventRoundId,omitempty"`
	Result        uint64                 `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
	Ranking       uint64                 `protobuf:"varint,6,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Data          *structpb.Struct       `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventRoundUser) Reset() {
	*x = EventRoundUser{}
	mi := &file_event_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRoundUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRoundUser) ProtoMessage() {}

func (x *EventRoundUser) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRoundUser.ProtoReflect.Descriptor instead.
func (*EventRoundUser) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{29}
}

func (x *EventRoundUser) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventRoundUser) GetEventUserId() uint64 {
	if x != nil {
		return x.EventUserId
	}
	return 0
}

func (x *EventRoundUser) GetClientUserId() uint64 {
	if x != nil {
		return x.ClientUserId
	}
	return 0
}

func (x *EventRoundUser) GetEventRoundId() uint64 {
	if x != nil {
		return x.EventRoundId
	}
	return 0
}

func (x *EventRoundUser) GetResult() uint64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *EventRoundUser) GetRanking() uint64 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *EventRoundUser) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EventRoundUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EventRoundUser) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_event_proto protoreflect.FileDescriptor

var file_event_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61,
	0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0xa5, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xa1, 0x03, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x50,
	0x41, 0x53, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x07, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47,
	0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x0c, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x0e, 0x12, 0x18,
	0x0a, 0x14, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x41, 0x54, 0x10, 0x10, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x4c, 0x0a,
	0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x02, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xda, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x73, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x22, 0xbb, 0x01, 0x0a,
	0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x22, 0x6f, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xfd, 0x02, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f,
	0x52, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x50, 0x41, 0x53,
	0x54, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x0a, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x54,
	0x10, 0x0e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xd1, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8b, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x06, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x02, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x02, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9c,
	0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f,
	0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x52,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x22, 0xe0, 0x01, 0x0a, 0x11, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7d,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4f,
	0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x22, 0xf0, 0x01,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xc7, 0x02, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd9,
	0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f,
	0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x09, 0x22, 0x27, 0x0a, 0x15, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x42, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x22, 0xb5, 0x03, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xaa, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdd,
	0x02, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xdc,
	0x06, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a,
	0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData []byte
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)))
	})
	return file_event_proto_rawDescData
}

var file_event_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_event_proto_goTypes = []any{
	(CreateEventResponse_Error)(0),       // 0: api.CreateEventResponse.Error
	(GetEventResponse_Error)(0),          // 1: api.GetEventResponse.Error
	(UpdateEventResponse_Error)(0),       // 2: api.UpdateEventResponse.Error
	(EventResponse_Error)(0),             // 3: api.EventResponse.Error
	(CreateEventRoundResponse_Error)(0),  // 4: api.CreateEventRoundResponse.Error
	(GetEventRoundResponse_Error)(0),     // 5: api.GetEventRoundResponse.Error
	(UpdateEventRoundResponse_Error)(0),  // 6: api.UpdateEventRoundResponse.Error
	(GetEventUserResponse_Error)(0),      // 7: api.GetEventUserResponse.Error
	(UpdateEventUserResponse_Error)(0),   // 8: api.UpdateEventUserResponse.Error
	(EventUserResponse_Error)(0),         // 9: api.EventUserResponse.Error
	(AddEventResultResponse_Error)(0),    // 10: api.AddEventResultResponse.Error
	(RemoveEventResultResponse_Error)(0), // 11: api.RemoveEventResultResponse.Error
	(*CreateEventRound)(nil),             // 12: api.CreateEventRound
	(*CreateEventRequest)(nil),           // 13: api.CreateEventRequest
	(*CreateEventResponse)(nil),          // 14: api.CreateEventResponse
	(*EventRequest)(nil),                 // 15: api.EventRequest
	(*GetEventRequest)(nil),              // 16: api.GetEventRequest
	(*GetEventResponse)(nil),             // 17: api.GetEventResponse
	(*UpdateEventRequest)(nil),           // 18: api.UpdateEventRequest
	(*UpdateEventResponse)(nil),          // 19: api.UpdateEventResponse
	(*EventResponse)(nil),                // 20: api.EventResponse
	(*CreateEventRoundRequest)(nil),      // 21: api.CreateEventRoundRequest
	(*CreateEventRoundResponse)(nil),     // 22: api.CreateEventRoundResponse
	(*EventRoundRequest)(nil),            // 23: api.EventRoundRequest
	(*GetEventRoundRequest)(nil),         // 24: api.GetEventRoundRequest
	(*GetEventRoundResponse)(nil),        // 25: api.GetEventRoundResponse
	(*UpdateEventRoundRequest)(nil),      // 26: api.UpdateEventRoundRequest
	(*UpdateEventRoundResponse)(nil),     // 27: api.UpdateEventRoundResponse
	(*EventUserRequest)(nil),             // 28: api.EventUserRequest
	(*GetEventUserRequest)(nil),          // 29: api.GetEventUserRequest
	(*GetEventUserResponse)(nil),         // 30: api.GetEventUserResponse
	(*UpdateEventUserRequest)(nil),       // 31: api.UpdateEventUserRequest
	(*UpdateEventUserResponse)(nil),      // 32: api.UpdateEventUserResponse
	(*EventUserResponse)(nil),            // 33: api.EventUserResponse
	(*AddEventResultRequest)(nil),        // 34: api.AddEventResultRequest
	(*AddEventResultResponse)(nil),       // 35: api.AddEventResultResponse
	(*EventRoundUserRequest)(nil),        // 36: api.EventRoundUserRequest
	(*RemoveEventResultResponse)(nil),    // 37: api.RemoveEventResultResponse
	(*Event)(nil),                        // 38: api.Event
	(*EventRound)(nil),                   // 39: api.EventRound
	(*EventUser)(nil),                    // 40: api.EventUser
	(*EventRoundUser)(nil),               // 41: api.EventRoundUser
	(*structpb.Struct)(nil),              // 42: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),        // 43: google.protobuf.Timestamp
	(*Pagination)(nil),                   // 44: api.Pagination
}
var file_event_proto_depIdxs = []int32{
	42, // 0: api.CreateEventRound.data:type_name -> google.protobuf.Struct
	43, // 1: api.CreateEventRound.endedAt:type_name -> google.protobuf.Timestamp
	42, // 2: api.CreateEventRequest.data:type_name -> google.protobuf.Struct
	43, // 3: api.CreateEventRequest.startedAt:type_name -> google.protobuf.Timestamp
	12, // 4: api.CreateEventRequest.rounds:type_name -> api.CreateEventRound
	0,  // 5: api.CreateEventResponse.error:type_name -> api.CreateEventResponse.Error
	15, // 6: api.GetEventRequest.event:type_name -> api.EventRequest
	44, // 7: api.GetEventRequest.pagination:type_name -> api.Pagination
	38, // 8: api.GetEventResponse.event:type_name -> api.Event
	40, // 9: api.GetEventResponse.leaderboard:type_name -> api.EventUser
	1,  // 10: api.GetEventResponse.error:type_name -> api.GetEventResponse.Error
	15, // 11: api.UpdateEventRequest.event:type_name -> api.EventRequest
	42, // 12: api.UpdateEventRequest.data:type_name -> google.protobuf.Struct
	2,  // 13: api.UpdateEventResponse.error:type_name -> api.UpdateEventResponse.Error
	3,  // 14: api.EventResponse.error:type_name -> api.EventResponse.Error
	15, // 15: api.CreateEventRoundRequest.event:type_name -> api.EventRequest
	12, // 16: api.CreateEventRoundRequest.round:type_name -> api.CreateEventRound
	4,  // 17: api.CreateEventRoundResponse.error:type_name -> api.CreateEventRoundResponse.Error
	15, // 18: api.EventRoundRequest.event:type_name -> api.EventRequest
	23, // 19: api.GetEventRoundRequest.round:type_name -> api.EventRoundRequest
	44, // 20: api.GetEventRoundRequest.pagination:type_name -> api.Pagination
	39, // 21: api.GetEventRoundResponse.round:type_name -> api.EventRound
	41, // 22: api.GetEventRoundResponse.results:type_name -> api.EventRoundUser
	5,  // 23: api.GetEventRoundResponse.error:type_name -> api.GetEventRoundResponse.Error
	23, // 24: api.UpdateEventRoundRequest.round:type_name -> api.EventRoundRequest
	42, // 25: api.UpdateEventRoundRequest.data:type_name -> google.protobuf.Struct
	6,  // 26: api.UpdateEventRoundResponse.error:type_name -> api.UpdateEventRoundResponse.Error
	15, // 27: api.EventUserRequest.event:type_name -> api.EventRequest
	28, // 28: api.GetEventUserRequest.user:type_name -> api.EventUserRequest
	44, // 29: api.GetEventUserRequest.pagination:type_name -> api.Pagination
	40, // 30: api.GetEventUserResponse.user:type_name -> api.EventUser
	41, // 31: api.GetEventUserResponse.results:type_name -> api.EventRoundUser
	7,  // 32: api.GetEventUserResponse.error:type_name -> api.GetEventUserResponse.Error
	28, // 33: api.UpdateEventUserRequest.user:type_name -> api.EventUserRequest
	42, // 34: api.UpdateEventUserRequest.data:type_name -> google.protobuf.Struct
	8,  // 35: api.UpdateEventUserResponse.error:type_name -> api.UpdateEventUserResponse.Error
	9,  // 36: api.EventUserResponse.error:type_name -> api.EventUserResponse.Error
	15, // 37: api.AddEventResultRequest.event:type_name -> api.EventRequest
	42, // 38: api.AddEventResultRequest.userData:type_name -> google.protobuf.Struct
	42, // 39: api.AddEventResultRequest.roundUserData:type_name -> google.protobuf.Struct
	10, // 40: api.AddEventResultResponse.error:type_name -> api.AddEventResultResponse.Error
	11, // 41: api.RemoveEventResultResponse.error:type_name -> api.RemoveEventResultResponse.Error
	42, // 42: api.Event.data:type_name -> google.protobuf.Struct
	39, // 43: api.Event.rounds:type_name -> api.EventRound
	43, // 44: api.Event.startedAt:type_name -> google.protobuf.Timestamp
	43, // 45: api.Event.createdAt:type_name -> google.protobuf.Timestamp
	43, // 46: api.Event.updatedAt:type_name -> google.protobuf.Timestamp
	42, // 47: api.EventRound.data:type_name -> google.protobuf.Struct
	43, // 48: api.EventRound.endedAt:type_name -> google.protobuf.Timestamp
	43, // 49: api.EventRound.createdAt:type_name -> google.protobuf.Timestamp
	43, // 50: api.EventRound.updatedAt:type_name -> google.protobuf.Timestamp
	42, // 51: api.EventUser.data:type_name -> google.protobuf.Struct
	43, // 52: api.EventUser.createdAt:type_name -> google.protobuf.Timestamp
	43, // 53: api.EventUser.updatedAt:type_name -> google.protobuf.Timestamp
	42, // 54: api.EventRoundUser.data:type_name -> google.protobuf.Struct
	43, // 55: api.EventRoundUser.createdAt:type_name -> google.protobuf.Timestamp
	43, // 56: api.EventRoundUser.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 57: api.EventService.CreateEvent:input_type -> api.CreateEventRequest
	16, // 58: api.EventService.GetEvent:input_type -> api.GetEventRequest
	18, // 59: api.EventService.UpdateEvent:input_type -> api.UpdateEventRequest
	15, // 60: api.EventService.DeleteEvent:input_type -> api.EventRequest
	21, // 61: api.EventService.CreateEventRound:input_type -> api.CreateEventRoundRequest
	24, // 62: api.EventService.GetEventRound:input_type -> api.GetEventRoundRequest
	26, // 63: api.EventService.UpdateEventRound:input_type -> api.UpdateEventRoundRequest
	29, // 64: api.EventService.GetEventUser:input_type -> api.GetEventUserRequest
	31, // 65: api.EventService.UpdateEventUser:input_type -> api.UpdateEventUserRequest
	28, // 66: api.EventService.DeleteEventUser:input_type -> api.EventUserRequest
	34, // 67: api.EventService.AddEventResult:input_type -> api.AddEventResultRequest
	36, // 68: api.EventService.RemoveEventResult:input_type -> api.EventRoundUserRequest
	14, // 69: api.EventService.CreateEvent:output_type -> api.CreateEventResponse
	17, // 70: api.EventService.GetEvent:output_type -> api.GetEventResponse
	19, // 71: api.EventService.UpdateEvent:output_type -> api.UpdateEventResponse
	20, // 72: api.EventService.DeleteEvent:output_type -> api.EventResponse
	22, // 73: api.EventService.CreateEventRound:output_type -> api.CreateEventRoundResponse
	25, // 74: api.EventService.GetEventRound:output_type -> api.GetEventRoundResponse
	27, // 75: api.EventService.UpdateEventRound:output_type -> api.UpdateEventRoundResponse
	30, // 76: api.EventService.GetEventUser:output_type -> api.GetEventUserResponse
	32, // 77: api.EventService.UpdateEventUser:output_type -> api.UpdateEventUserResponse
	33, // 78: api.EventService.DeleteEventUser:output_type -> api.EventUserResponse
	35, // 79: api.EventService.AddEventResult:output_type -> api.AddEventResultResponse
	37, // 80: api.EventService.RemoveEventResult:output_type -> api.RemoveEventResultResponse
	69, // [69:81] is the sub-list for method output_type
	57, // [57:69] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	file_types_proto_init()
	file_event_proto_msgTypes[2].OneofWrappers = []any{}
	file_event_proto_msgTypes[3].OneofWrappers = []any{}
	file_event_proto_msgTypes[4].OneofWrappers = []any{}
	file_event_proto_msgTypes[5].OneofWrappers = []any{}
	file_event_proto_msgTypes[10].OneofWrappers = []any{}
	file_event_proto_msgTypes[11].OneofWrappers = []any{}
	file_event_proto_msgTypes[12].OneofWrappers = []any{}
	file_event_proto_msgTypes[13].OneofWrappers = []any{}
	file_event_proto_msgTypes[14].OneofWrappers = []any{}
	file_event_proto_msgTypes[16].OneofWrappers = []any{}
	file_event_proto_msgTypes[17].OneofWrappers = []any{}
	file_event_proto_msgTypes[18].OneofWrappers = []any{}
	file_event_proto_msgTypes[26].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)),
			NumEnums:      12,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		EnumInfos:         file_event_proto_enumTypes,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
