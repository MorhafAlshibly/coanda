extend type Query {
	GetItem(input: ItemRequest!): GetItemResponse
	GetItems(input: GetItemsRequest!): GetItemsResponse
}

extend type Mutation {
	CreateItem(input: CreateItemRequest!): CreateItemResponse
	UpdateItem(input: UpdateItemRequest!): UpdateItemResponse
	DeleteItem(input: ItemRequest!): ItemResponse
}

input CreateItemRequest {
	id: ID!
	type: String!
	data: Struct!
	expiresAt: Timestamp
}

type CreateItemResponse {
	success: Boolean!
	error: CreateItemError!
}

enum CreateItemError {
	NONE
	ID_REQUIRED
	TYPE_REQUIRED
	DATA_REQUIRED
	ALREADY_EXISTS
}

input ItemRequest {
	id: ID!
	type: String!
}

type GetItemResponse {
	success: Boolean!
	item: Item!
	error: GetItemError!
}

enum GetItemError {
	NONE
	ID_REQUIRED
	TYPE_REQUIRED
	NOT_FOUND
}

input GetItemsRequest {
	type: String
	pagination: Pagination
}

type GetItemsResponse {
	success: Boolean!
	items: [Item]!
}

type ItemResponse {
	success: Boolean!
	error: ItemError!
}

enum ItemError {
	NONE
	ID_REQUIRED
	TYPE_REQUIRED
	NOT_FOUND
}

input UpdateItemRequest {
	item: ItemRequest!
	data: Struct
	expiresAt: Timestamp
}

type UpdateItemResponse {
	success: Boolean!
	error: UpdateItemError!
}

enum UpdateItemError {
	NONE
	ID_REQUIRED
	TYPE_REQUIRED
	NOT_FOUND
	NO_UPDATE_SPECIFIED
}

type Item {
	id: ID!
	type: String!
	data: Struct!
	expiresAt: Timestamp!
	createdAt: Timestamp!
	updatedAt: Timestamp!
}
